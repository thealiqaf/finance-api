"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  HfInference: () => HfInference,
  HfInferenceEndpoint: () => HfInferenceEndpoint,
  INFERENCE_PROVIDERS: () => INFERENCE_PROVIDERS,
  InferenceOutputError: () => InferenceOutputError,
  audioClassification: () => audioClassification,
  audioToAudio: () => audioToAudio,
  automaticSpeechRecognition: () => automaticSpeechRecognition,
  chatCompletion: () => chatCompletion,
  chatCompletionStream: () => chatCompletionStream,
  documentQuestionAnswering: () => documentQuestionAnswering,
  featureExtraction: () => featureExtraction,
  fillMask: () => fillMask,
  imageClassification: () => imageClassification,
  imageSegmentation: () => imageSegmentation,
  imageToImage: () => imageToImage,
  imageToText: () => imageToText,
  objectDetection: () => objectDetection,
  questionAnswering: () => questionAnswering,
  request: () => request,
  sentenceSimilarity: () => sentenceSimilarity,
  streamingRequest: () => streamingRequest,
  summarization: () => summarization,
  tableQuestionAnswering: () => tableQuestionAnswering,
  tabularClassification: () => tabularClassification,
  tabularRegression: () => tabularRegression,
  textClassification: () => textClassification,
  textGeneration: () => textGeneration,
  textGenerationStream: () => textGenerationStream,
  textToImage: () => textToImage,
  textToSpeech: () => textToSpeech,
  textToVideo: () => textToVideo,
  tokenClassification: () => tokenClassification,
  translation: () => translation,
  visualQuestionAnswering: () => visualQuestionAnswering,
  zeroShotClassification: () => zeroShotClassification,
  zeroShotImageClassification: () => zeroShotImageClassification
});
module.exports = __toCommonJS(src_exports);

// src/tasks/index.ts
var tasks_exports = {};
__export(tasks_exports, {
  audioClassification: () => audioClassification,
  audioToAudio: () => audioToAudio,
  automaticSpeechRecognition: () => automaticSpeechRecognition,
  chatCompletion: () => chatCompletion,
  chatCompletionStream: () => chatCompletionStream,
  documentQuestionAnswering: () => documentQuestionAnswering,
  featureExtraction: () => featureExtraction,
  fillMask: () => fillMask,
  imageClassification: () => imageClassification,
  imageSegmentation: () => imageSegmentation,
  imageToImage: () => imageToImage,
  imageToText: () => imageToText,
  objectDetection: () => objectDetection,
  questionAnswering: () => questionAnswering,
  request: () => request,
  sentenceSimilarity: () => sentenceSimilarity,
  streamingRequest: () => streamingRequest,
  summarization: () => summarization,
  tableQuestionAnswering: () => tableQuestionAnswering,
  tabularClassification: () => tabularClassification,
  tabularRegression: () => tabularRegression,
  textClassification: () => textClassification,
  textGeneration: () => textGeneration,
  textGenerationStream: () => textGenerationStream,
  textToImage: () => textToImage,
  textToSpeech: () => textToSpeech,
  textToVideo: () => textToVideo,
  tokenClassification: () => tokenClassification,
  translation: () => translation,
  visualQuestionAnswering: () => visualQuestionAnswering,
  zeroShotClassification: () => zeroShotClassification,
  zeroShotImageClassification: () => zeroShotImageClassification
});

// src/config.ts
var HF_HUB_URL = "https://huggingface.co";
var HF_ROUTER_URL = "https://router.huggingface.co";

// src/providers/fal-ai.ts
var FAL_AI_API_BASE_URL = "https://fal.run";

// src/providers/nebius.ts
var NEBIUS_API_BASE_URL = "https://api.studio.nebius.ai";

// src/providers/replicate.ts
var REPLICATE_API_BASE_URL = "https://api.replicate.com";

// src/providers/sambanova.ts
var SAMBANOVA_API_BASE_URL = "https://api.sambanova.ai";

// src/providers/together.ts
var TOGETHER_API_BASE_URL = "https://api.together.xyz";

// src/providers/novita.ts
var NOVITA_API_BASE_URL = "https://api.novita.ai/v3/openai";

// src/providers/fireworks-ai.ts
var FIREWORKS_AI_API_BASE_URL = "https://api.fireworks.ai/inference";

// src/providers/hyperbolic.ts
var HYPERBOLIC_API_BASE_URL = "https://api.hyperbolic.xyz";

// src/providers/black-forest-labs.ts
var BLACKFORESTLABS_AI_API_BASE_URL = "https://api.us1.bfl.ai/v1";

// src/lib/isUrl.ts
function isUrl(modelOrUrl) {
  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith("/");
}

// package.json
var name = "@huggingface/inference";
var version = "3.3.5";

// src/providers/consts.ts
var HARDCODED_MODEL_ID_MAPPING = {
  /**
   * "HF model ID" => "Model ID on Inference Provider's side"
   *
   * Example:
   * "Qwen/Qwen2.5-Coder-32B-Instruct": "Qwen2.5-Coder-32B-Instruct",
   */
  "black-forest-labs": {},
  "fal-ai": {},
  "fireworks-ai": {},
  "hf-inference": {},
  hyperbolic: {},
  nebius: {},
  replicate: {},
  sambanova: {},
  together: {},
  novita: {}
};

// src/lib/getProviderModelId.ts
var inferenceProviderMappingCache = /* @__PURE__ */ new Map();
async function getProviderModelId(params, args, options = {}) {
  if (params.provider === "hf-inference") {
    return params.model;
  }
  if (!options.taskHint) {
    throw new Error("taskHint must be specified when using a third-party provider");
  }
  const task = options.taskHint === "text-generation" && options.chatCompletion ? "conversational" : options.taskHint;
  if (HARDCODED_MODEL_ID_MAPPING[params.provider]?.[params.model]) {
    return HARDCODED_MODEL_ID_MAPPING[params.provider][params.model];
  }
  let inferenceProviderMapping;
  if (inferenceProviderMappingCache.has(params.model)) {
    inferenceProviderMapping = inferenceProviderMappingCache.get(params.model);
  } else {
    inferenceProviderMapping = await (options?.fetch ?? fetch)(
      `${HF_HUB_URL}/api/models/${params.model}?expand[]=inferenceProviderMapping`,
      {
        headers: args.accessToken?.startsWith("hf_") ? { Authorization: `Bearer ${args.accessToken}` } : {}
      }
    ).then((resp) => resp.json()).then((json) => json.inferenceProviderMapping).catch(() => null);
  }
  if (!inferenceProviderMapping) {
    throw new Error(`We have not been able to find inference provider information for model ${params.model}.`);
  }
  const providerMapping = inferenceProviderMapping[params.provider];
  if (providerMapping) {
    if (providerMapping.task !== task) {
      throw new Error(
        `Model ${params.model} is not supported for task ${task} and provider ${params.provider}. Supported task: ${providerMapping.task}.`
      );
    }
    if (providerMapping.status === "staging") {
      console.warn(
        `Model ${params.model} is in staging mode for provider ${params.provider}. Meant for test purposes only.`
      );
    }
    return providerMapping.providerId;
  }
  throw new Error(`Model ${params.model} is not supported provider ${params.provider}.`);
}

// src/lib/makeRequestOptions.ts
var HF_HUB_INFERENCE_PROXY_TEMPLATE = `${HF_ROUTER_URL}/{{PROVIDER}}`;
var tasks = null;
async function makeRequestOptions(args, options) {
  const { accessToken, endpointUrl, provider: maybeProvider, model: maybeModel, ...remainingArgs } = args;
  let otherArgs = remainingArgs;
  const provider = maybeProvider ?? "hf-inference";
  const { includeCredentials, taskHint, chatCompletion: chatCompletion2 } = options ?? {};
  if (endpointUrl && provider !== "hf-inference") {
    throw new Error(`Cannot use endpointUrl with a third-party provider.`);
  }
  if (maybeModel && isUrl(maybeModel)) {
    throw new Error(`Model URLs are no longer supported. Use endpointUrl instead.`);
  }
  if (!maybeModel && !taskHint) {
    throw new Error("No model provided, and no task has been specified.");
  }
  const hfModel = maybeModel ?? await loadDefaultModel(taskHint);
  const model = await getProviderModelId({ model: hfModel, provider }, args, {
    taskHint,
    chatCompletion: chatCompletion2,
    fetch: options?.fetch
  });
  const authMethod = accessToken ? accessToken.startsWith("hf_") ? "hf-token" : "provider-key" : includeCredentials === "include" ? "credentials-include" : "none";
  const url = endpointUrl ? chatCompletion2 ? endpointUrl + `/v1/chat/completions` : endpointUrl : makeUrl({
    authMethod,
    chatCompletion: chatCompletion2 ?? false,
    model,
    provider: provider ?? "hf-inference",
    taskHint
  });
  const headers = {};
  if (accessToken) {
    if (provider === "fal-ai" && authMethod === "provider-key") {
      headers["Authorization"] = `Key ${accessToken}`;
    } else if (provider === "black-forest-labs" && authMethod === "provider-key") {
      headers["X-Key"] = accessToken;
    } else {
      headers["Authorization"] = `Bearer ${accessToken}`;
    }
  }
  const ownUserAgent = `${name}/${version}`;
  headers["User-Agent"] = [ownUserAgent, typeof navigator !== "undefined" ? navigator.userAgent : void 0].filter((x) => x !== void 0).join(" ");
  const binary = "data" in args && !!args.data;
  if (!binary) {
    headers["Content-Type"] = "application/json";
  }
  if (provider === "replicate") {
    headers["Prefer"] = "wait";
  }
  let credentials;
  if (typeof includeCredentials === "string") {
    credentials = includeCredentials;
  } else if (includeCredentials === true) {
    credentials = "include";
  }
  if (provider === "replicate") {
    const version2 = model.includes(":") ? model.split(":")[1] : void 0;
    otherArgs = { input: otherArgs, version: version2 };
  }
  const info = {
    headers,
    method: "POST",
    body: binary ? args.data : JSON.stringify({
      ...otherArgs,
      ...taskHint === "text-to-image" && provider === "hyperbolic" ? { model_name: model } : chatCompletion2 || provider === "together" || provider === "nebius" || provider === "hyperbolic" ? { model } : void 0
    }),
    ...credentials ? { credentials } : void 0,
    signal: options?.signal
  };
  return { url, info };
}
function makeUrl(params) {
  if (params.authMethod === "none" && params.provider !== "hf-inference") {
    throw new Error("Authentication is required when requesting a third-party provider. Please provide accessToken");
  }
  const shouldProxy = params.provider !== "hf-inference" && params.authMethod !== "provider-key";
  switch (params.provider) {
    case "black-forest-labs": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : BLACKFORESTLABS_AI_API_BASE_URL;
      return `${baseUrl}/${params.model}`;
    }
    case "fal-ai": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : FAL_AI_API_BASE_URL;
      return `${baseUrl}/${params.model}`;
    }
    case "nebius": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : NEBIUS_API_BASE_URL;
      if (params.taskHint === "text-to-image") {
        return `${baseUrl}/v1/images/generations`;
      }
      if (params.taskHint === "text-generation") {
        if (params.chatCompletion) {
          return `${baseUrl}/v1/chat/completions`;
        }
        return `${baseUrl}/v1/completions`;
      }
      return baseUrl;
    }
    case "replicate": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : REPLICATE_API_BASE_URL;
      if (params.model.includes(":")) {
        return `${baseUrl}/v1/predictions`;
      }
      return `${baseUrl}/v1/models/${params.model}/predictions`;
    }
    case "sambanova": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : SAMBANOVA_API_BASE_URL;
      if (params.taskHint === "text-generation" && params.chatCompletion) {
        return `${baseUrl}/v1/chat/completions`;
      }
      return baseUrl;
    }
    case "together": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : TOGETHER_API_BASE_URL;
      if (params.taskHint === "text-to-image") {
        return `${baseUrl}/v1/images/generations`;
      }
      if (params.taskHint === "text-generation") {
        if (params.chatCompletion) {
          return `${baseUrl}/v1/chat/completions`;
        }
        return `${baseUrl}/v1/completions`;
      }
      return baseUrl;
    }
    case "fireworks-ai": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : FIREWORKS_AI_API_BASE_URL;
      if (params.taskHint === "text-generation" && params.chatCompletion) {
        return `${baseUrl}/v1/chat/completions`;
      }
      return baseUrl;
    }
    case "hyperbolic": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : HYPERBOLIC_API_BASE_URL;
      if (params.taskHint === "text-to-image") {
        return `${baseUrl}/v1/images/generations`;
      }
      return `${baseUrl}/v1/chat/completions`;
    }
    case "novita": {
      const baseUrl = shouldProxy ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace("{{PROVIDER}}", params.provider) : NOVITA_API_BASE_URL;
      if (params.taskHint === "text-generation") {
        if (params.chatCompletion) {
          return `${baseUrl}/chat/completions`;
        }
        return `${baseUrl}/completions`;
      }
      return baseUrl;
    }
    default: {
      const baseUrl = HF_HUB_INFERENCE_PROXY_TEMPLATE.replaceAll("{{PROVIDER}}", "hf-inference");
      if (params.taskHint && ["feature-extraction", "sentence-similarity"].includes(params.taskHint)) {
        return `${baseUrl}/pipeline/${params.taskHint}/${params.model}`;
      }
      if (params.taskHint === "text-generation" && params.chatCompletion) {
        return `${baseUrl}/models/${params.model}/v1/chat/completions`;
      }
      return `${baseUrl}/models/${params.model}`;
    }
  }
}
async function loadDefaultModel(task) {
  if (!tasks) {
    tasks = await loadTaskInfo();
  }
  const taskInfo = tasks[task];
  if ((taskInfo?.models.length ?? 0) <= 0) {
    throw new Error(`No default model defined for task ${task}, please define the model explicitly.`);
  }
  return taskInfo.models[0].id;
}
async function loadTaskInfo() {
  const res = await fetch(`${HF_HUB_URL}/api/tasks`);
  if (!res.ok) {
    throw new Error("Failed to load tasks definitions from Hugging Face Hub.");
  }
  return await res.json();
}

// src/tasks/custom/request.ts
async function request(args, options) {
  const { url, info } = await makeRequestOptions(args, options);
  const response = await (options?.fetch ?? fetch)(url, info);
  if (options?.retry_on_error !== false && response.status === 503) {
    return request(args, options);
  }
  if (!response.ok) {
    const contentType = response.headers.get("Content-Type");
    if (["application/json", "application/problem+json"].some((ct) => contentType?.startsWith(ct))) {
      const output = await response.json();
      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {
        throw new Error(
          `Server ${args.model} does not seem to support chat completion. Error: ${JSON.stringify(output.error)}`
        );
      }
      if (output.error || output.detail) {
        throw new Error(JSON.stringify(output.error ?? output.detail));
      } else {
        throw new Error(output);
      }
    }
    const message = contentType?.startsWith("text/plain;") ? await response.text() : void 0;
    throw new Error(message ?? "An error occurred while fetching the blob");
  }
  if (response.headers.get("Content-Type")?.startsWith("application/json")) {
    return await response.json();
  }
  return await response.blob();
}

// src/vendor/fetch-event-source/parse.ts
function getLines(onLine) {
  let buffer;
  let position;
  let fieldLength;
  let discardTrailingNewline = false;
  return function onChunk(arr) {
    if (buffer === void 0) {
      buffer = arr;
      position = 0;
      fieldLength = -1;
    } else {
      buffer = concat(buffer, arr);
    }
    const bufLength = buffer.length;
    let lineStart = 0;
    while (position < bufLength) {
      if (discardTrailingNewline) {
        if (buffer[position] === 10 /* NewLine */) {
          lineStart = ++position;
        }
        discardTrailingNewline = false;
      }
      let lineEnd = -1;
      for (; position < bufLength && lineEnd === -1; ++position) {
        switch (buffer[position]) {
          case 58 /* Colon */:
            if (fieldLength === -1) {
              fieldLength = position - lineStart;
            }
            break;
          case 13 /* CarriageReturn */:
            discardTrailingNewline = true;
          case 10 /* NewLine */:
            lineEnd = position;
            break;
        }
      }
      if (lineEnd === -1) {
        break;
      }
      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);
      lineStart = position;
      fieldLength = -1;
    }
    if (lineStart === bufLength) {
      buffer = void 0;
    } else if (lineStart !== 0) {
      buffer = buffer.subarray(lineStart);
      position -= lineStart;
    }
  };
}
function getMessages(onId, onRetry, onMessage) {
  let message = newMessage();
  const decoder = new TextDecoder();
  return function onLine(line, fieldLength) {
    if (line.length === 0) {
      onMessage?.(message);
      message = newMessage();
    } else if (fieldLength > 0) {
      const field = decoder.decode(line.subarray(0, fieldLength));
      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);
      const value = decoder.decode(line.subarray(valueOffset));
      switch (field) {
        case "data":
          message.data = message.data ? message.data + "\n" + value : value;
          break;
        case "event":
          message.event = value;
          break;
        case "id":
          onId(message.id = value);
          break;
        case "retry":
          const retry = parseInt(value, 10);
          if (!isNaN(retry)) {
            onRetry(message.retry = retry);
          }
          break;
      }
    }
  };
}
function concat(a, b) {
  const res = new Uint8Array(a.length + b.length);
  res.set(a);
  res.set(b, a.length);
  return res;
}
function newMessage() {
  return {
    data: "",
    event: "",
    id: "",
    retry: void 0
  };
}

// src/tasks/custom/streamingRequest.ts
async function* streamingRequest(args, options) {
  const { url, info } = await makeRequestOptions({ ...args, stream: true }, options);
  const response = await (options?.fetch ?? fetch)(url, info);
  if (options?.retry_on_error !== false && response.status === 503) {
    return yield* streamingRequest(args, options);
  }
  if (!response.ok) {
    if (response.headers.get("Content-Type")?.startsWith("application/json")) {
      const output = await response.json();
      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {
        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);
      }
      if (typeof output.error === "string") {
        throw new Error(output.error);
      }
      if (output.error && "message" in output.error && typeof output.error.message === "string") {
        throw new Error(output.error.message);
      }
    }
    throw new Error(`Server response contains error: ${response.status}`);
  }
  if (!response.headers.get("content-type")?.startsWith("text/event-stream")) {
    throw new Error(
      `Server does not support event stream content type, it returned ` + response.headers.get("content-type")
    );
  }
  if (!response.body) {
    return;
  }
  const reader = response.body.getReader();
  let events = [];
  const onEvent = (event) => {
    events.push(event);
  };
  const onChunk = getLines(
    getMessages(
      () => {
      },
      () => {
      },
      onEvent
    )
  );
  try {
    while (true) {
      const { done, value } = await reader.read();
      if (done) {
        return;
      }
      onChunk(value);
      for (const event of events) {
        if (event.data.length > 0) {
          if (event.data === "[DONE]") {
            return;
          }
          const data = JSON.parse(event.data);
          if (typeof data === "object" && data !== null && "error" in data) {
            const errorStr = typeof data.error === "string" ? data.error : typeof data.error === "object" && data.error && "message" in data.error && typeof data.error.message === "string" ? data.error.message : JSON.stringify(data.error);
            throw new Error(`Error forwarded from backend: ` + errorStr);
          }
          yield data;
        }
      }
      events = [];
    }
  } finally {
    reader.releaseLock();
  }
}

// src/lib/InferenceOutputError.ts
var InferenceOutputError = class extends TypeError {
  constructor(message) {
    super(
      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`
    );
    this.name = "InferenceOutputError";
  }
};

// src/utils/pick.ts
function pick(o, props) {
  return Object.assign(
    {},
    ...props.map((prop) => {
      if (o[prop] !== void 0) {
        return { [prop]: o[prop] };
      }
    })
  );
}

// src/utils/typedInclude.ts
function typedInclude(arr, v) {
  return arr.includes(v);
}

// src/utils/omit.ts
function omit(o, props) {
  const propsArr = Array.isArray(props) ? props : [props];
  const letsKeep = Object.keys(o).filter((prop) => !typedInclude(propsArr, prop));
  return pick(o, letsKeep);
}

// src/tasks/audio/utils.ts
function preparePayload(args) {
  return "data" in args ? args : {
    ...omit(args, "inputs"),
    data: args.inputs
  };
}

// src/tasks/audio/audioClassification.ts
async function audioClassification(args, options) {
  const payload = preparePayload(args);
  const res = await request(payload, {
    ...options,
    taskHint: "audio-classification"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === "string" && typeof x.score === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{label: string, score: number}>");
  }
  return res;
}

// src/utils/base64FromBytes.ts
function base64FromBytes(arr) {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

// src/tasks/audio/automaticSpeechRecognition.ts
async function automaticSpeechRecognition(args, options) {
  const payload = await buildPayload(args);
  const res = await request(payload, {
    ...options,
    taskHint: "automatic-speech-recognition"
  });
  const isValidOutput = typeof res?.text === "string";
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected {text: string}");
  }
  return res;
}
var FAL_AI_SUPPORTED_BLOB_TYPES = ["audio/mpeg", "audio/mp4", "audio/wav", "audio/x-wav"];
async function buildPayload(args) {
  if (args.provider === "fal-ai") {
    const blob = "data" in args && args.data instanceof Blob ? args.data : "inputs" in args ? args.inputs : void 0;
    const contentType = blob?.type;
    if (!contentType) {
      throw new Error(
        `Unable to determine the input's content-type. Make sure your are passing a Blob when using provider fal-ai.`
      );
    }
    if (!FAL_AI_SUPPORTED_BLOB_TYPES.includes(contentType)) {
      throw new Error(
        `Provider fal-ai does not support blob type ${contentType} - supported content types are: ${FAL_AI_SUPPORTED_BLOB_TYPES.join(
          ", "
        )}`
      );
    }
    const base64audio = base64FromBytes(new Uint8Array(await blob.arrayBuffer()));
    return {
      ..."data" in args ? omit(args, "data") : omit(args, "inputs"),
      audio_url: `data:${contentType};base64,${base64audio}`
    };
  } else {
    return preparePayload(args);
  }
}

// src/tasks/audio/textToSpeech.ts
async function textToSpeech(args, options) {
  const payload = args.provider === "replicate" ? {
    ...omit(args, ["inputs", "parameters"]),
    ...args.parameters,
    text: args.inputs
  } : args;
  const res = await request(payload, {
    ...options,
    taskHint: "text-to-speech"
  });
  if (res instanceof Blob) {
    return res;
  }
  if (res && typeof res === "object") {
    if ("output" in res) {
      if (typeof res.output === "string") {
        const urlResponse = await fetch(res.output);
        const blob = await urlResponse.blob();
        return blob;
      } else if (Array.isArray(res.output)) {
        const urlResponse = await fetch(res.output[0]);
        const blob = await urlResponse.blob();
        return blob;
      }
    }
  }
  throw new InferenceOutputError("Expected Blob or object with output");
}

// src/tasks/audio/audioToAudio.ts
async function audioToAudio(args, options) {
  const payload = preparePayload(args);
  const res = await request(payload, {
    ...options,
    taskHint: "audio-to-audio"
  });
  return validateOutput(res);
}
function validateOutput(output) {
  if (!Array.isArray(output)) {
    throw new InferenceOutputError("Expected Array");
  }
  if (!output.every((elem) => {
    return typeof elem === "object" && elem && "label" in elem && typeof elem.label === "string" && "content-type" in elem && typeof elem["content-type"] === "string" && "blob" in elem && typeof elem.blob === "string";
  })) {
    throw new InferenceOutputError("Expected Array<{label: string, audio: Blob}>");
  }
  return output;
}

// src/tasks/cv/utils.ts
function preparePayload2(args) {
  return "data" in args ? args : { ...omit(args, "inputs"), data: args.inputs };
}

// src/tasks/cv/imageClassification.ts
async function imageClassification(args, options) {
  const payload = preparePayload2(args);
  const res = await request(payload, {
    ...options,
    taskHint: "image-classification"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === "string" && typeof x.score === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{label: string, score: number}>");
  }
  return res;
}

// src/tasks/cv/imageSegmentation.ts
async function imageSegmentation(args, options) {
  const payload = preparePayload2(args);
  const res = await request(payload, {
    ...options,
    taskHint: "image-segmentation"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === "string" && typeof x.mask === "string" && typeof x.score === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{label: string, mask: string, score: number}>");
  }
  return res;
}

// src/tasks/cv/imageToText.ts
async function imageToText(args, options) {
  const payload = preparePayload2(args);
  const res = (await request(payload, {
    ...options,
    taskHint: "image-to-text"
  }))?.[0];
  if (typeof res?.generated_text !== "string") {
    throw new InferenceOutputError("Expected {generated_text: string}");
  }
  return res;
}

// src/tasks/cv/objectDetection.ts
async function objectDetection(args, options) {
  const payload = preparePayload2(args);
  const res = await request(payload, {
    ...options,
    taskHint: "object-detection"
  });
  const isValidOutput = Array.isArray(res) && res.every(
    (x) => typeof x.label === "string" && typeof x.score === "number" && typeof x.box.xmin === "number" && typeof x.box.ymin === "number" && typeof x.box.xmax === "number" && typeof x.box.ymax === "number"
  );
  if (!isValidOutput) {
    throw new InferenceOutputError(
      "Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>"
    );
  }
  return res;
}

// src/utils/delay.ts
function delay(ms) {
  return new Promise((resolve) => {
    setTimeout(() => resolve(), ms);
  });
}

// src/tasks/cv/textToImage.ts
function getResponseFormatArg(provider) {
  switch (provider) {
    case "fal-ai":
      return { sync_mode: true };
    case "nebius":
      return { response_format: "b64_json" };
    case "replicate":
      return void 0;
    case "together":
      return { response_format: "base64" };
    default:
      return void 0;
  }
}
async function textToImage(args, options) {
  const payload = !args.provider || args.provider === "hf-inference" || args.provider === "sambanova" ? args : {
    ...omit(args, ["inputs", "parameters"]),
    ...args.parameters,
    ...getResponseFormatArg(args.provider),
    prompt: args.inputs
  };
  const res = await request(payload, {
    ...options,
    taskHint: "text-to-image"
  });
  if (res && typeof res === "object") {
    if (args.provider === "black-forest-labs" && "polling_url" in res && typeof res.polling_url === "string") {
      return await pollBflResponse(res.polling_url, options?.outputType);
    }
    if (args.provider === "fal-ai" && "images" in res && Array.isArray(res.images) && res.images[0].url) {
      if (options?.outputType === "url") {
        return res.images[0].url;
      } else {
        const image = await fetch(res.images[0].url);
        return await image.blob();
      }
    }
    if (args.provider === "hyperbolic" && "images" in res && Array.isArray(res.images) && res.images[0] && typeof res.images[0].image === "string") {
      if (options?.outputType === "url") {
        return `data:image/jpeg;base64,${res.images[0].image}`;
      }
      const base64Response = await fetch(`data:image/jpeg;base64,${res.images[0].image}`);
      return await base64Response.blob();
    }
    if ("data" in res && Array.isArray(res.data) && res.data[0].b64_json) {
      const base64Data = res.data[0].b64_json;
      if (options?.outputType === "url") {
        return `data:image/jpeg;base64,${base64Data}`;
      }
      const base64Response = await fetch(`data:image/jpeg;base64,${base64Data}`);
      return await base64Response.blob();
    }
    if ("output" in res && Array.isArray(res.output)) {
      if (options?.outputType === "url") {
        return res.output[0];
      }
      const urlResponse = await fetch(res.output[0]);
      const blob = await urlResponse.blob();
      return blob;
    }
  }
  const isValidOutput = res && res instanceof Blob;
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Blob");
  }
  if (options?.outputType === "url") {
    const b64 = await res.arrayBuffer().then((buf) => Buffer.from(buf).toString("base64"));
    return `data:image/jpeg;base64,${b64}`;
  }
  return res;
}
async function pollBflResponse(url, outputType) {
  const urlObj = new URL(url);
  for (let step = 0; step < 5; step++) {
    await delay(1e3);
    console.debug(`Polling Black Forest Labs API for the result... ${step + 1}/5`);
    urlObj.searchParams.set("attempt", step.toString(10));
    const resp = await fetch(urlObj, { headers: { "Content-Type": "application/json" } });
    if (!resp.ok) {
      throw new InferenceOutputError("Failed to fetch result from black forest labs API");
    }
    const payload = await resp.json();
    if (typeof payload === "object" && payload && "status" in payload && typeof payload.status === "string" && payload.status === "Ready" && "result" in payload && typeof payload.result === "object" && payload.result && "sample" in payload.result && typeof payload.result.sample === "string") {
      if (outputType === "url") {
        return payload.result.sample;
      }
      const image = await fetch(payload.result.sample);
      return await image.blob();
    }
  }
  throw new InferenceOutputError("Failed to fetch result from black forest labs API");
}

// src/tasks/cv/imageToImage.ts
async function imageToImage(args, options) {
  let reqArgs;
  if (!args.parameters) {
    reqArgs = {
      accessToken: args.accessToken,
      model: args.model,
      data: args.inputs
    };
  } else {
    reqArgs = {
      ...args,
      inputs: base64FromBytes(
        new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer())
      )
    };
  }
  const res = await request(reqArgs, {
    ...options,
    taskHint: "image-to-image"
  });
  const isValidOutput = res && res instanceof Blob;
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Blob");
  }
  return res;
}

// src/tasks/cv/zeroShotImageClassification.ts
async function preparePayload3(args) {
  if (args.inputs instanceof Blob) {
    return {
      ...args,
      inputs: {
        image: base64FromBytes(new Uint8Array(await args.inputs.arrayBuffer()))
      }
    };
  } else {
    return {
      ...args,
      inputs: {
        image: base64FromBytes(
          new Uint8Array(
            args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()
          )
        )
      }
    };
  }
}
async function zeroShotImageClassification(args, options) {
  const payload = await preparePayload3(args);
  const res = await request(payload, {
    ...options,
    taskHint: "zero-shot-image-classification"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === "string" && typeof x.score === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{label: string, score: number}>");
  }
  return res;
}

// src/tasks/cv/textToVideo.ts
var SUPPORTED_PROVIDERS = ["fal-ai", "replicate"];
async function textToVideo(args, options) {
  if (!args.provider || !typedInclude(SUPPORTED_PROVIDERS, args.provider)) {
    throw new Error(
      `textToVideo inference is only supported for the following providers: ${SUPPORTED_PROVIDERS.join(", ")}`
    );
  }
  const payload = args.provider === "fal-ai" || args.provider === "replicate" ? { ...omit(args, ["inputs", "parameters"]), ...args.parameters, prompt: args.inputs } : args;
  const res = await request(payload, {
    ...options,
    taskHint: "text-to-video"
  });
  if (args.provider === "fal-ai") {
    const isValidOutput = typeof res === "object" && !!res && "video" in res && typeof res.video === "object" && !!res.video && "url" in res.video && typeof res.video.url === "string" && isUrl(res.video.url);
    if (!isValidOutput) {
      throw new InferenceOutputError("Expected { video: { url: string } }");
    }
    const urlResponse = await fetch(res.video.url);
    return await urlResponse.blob();
  } else {
    const isValidOutput = typeof res === "object" && !!res && "output" in res && typeof res.output === "string" && isUrl(res.output);
    if (!isValidOutput) {
      throw new InferenceOutputError("Expected { output: string }");
    }
    const urlResponse = await fetch(res.output);
    return await urlResponse.blob();
  }
}

// src/tasks/nlp/featureExtraction.ts
async function featureExtraction(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "feature-extraction"
  });
  let isValidOutput = true;
  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {
    if (curDepth > maxDepth)
      return false;
    if (arr.every((x) => Array.isArray(x))) {
      return arr.every((x) => isNumArrayRec(x, maxDepth, curDepth + 1));
    } else {
      return arr.every((x) => typeof x === "number");
    }
  };
  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<number[][][] | number[][] | number[] | number>");
  }
  return res;
}

// src/tasks/nlp/fillMask.ts
async function fillMask(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "fill-mask"
  });
  const isValidOutput = Array.isArray(res) && res.every(
    (x) => typeof x.score === "number" && typeof x.sequence === "string" && typeof x.token === "number" && typeof x.token_str === "string"
  );
  if (!isValidOutput) {
    throw new InferenceOutputError(
      "Expected Array<{score: number, sequence: string, token: number, token_str: string}>"
    );
  }
  return res;
}

// src/tasks/nlp/questionAnswering.ts
async function questionAnswering(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "question-answering"
  });
  const isValidOutput = Array.isArray(res) ? res.every(
    (elem) => typeof elem === "object" && !!elem && typeof elem.answer === "string" && typeof elem.end === "number" && typeof elem.score === "number" && typeof elem.start === "number"
  ) : typeof res === "object" && !!res && typeof res.answer === "string" && typeof res.end === "number" && typeof res.score === "number" && typeof res.start === "number";
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{answer: string, end: number, score: number, start: number}>");
  }
  return Array.isArray(res) ? res[0] : res;
}

// src/tasks/nlp/sentenceSimilarity.ts
async function sentenceSimilarity(args, options) {
  const res = await request(prepareInput(args), {
    ...options,
    taskHint: "sentence-similarity"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected number[]");
  }
  return res;
}
function prepareInput(args) {
  return {
    ...omit(args, ["inputs", "parameters"]),
    inputs: { ...omit(args.inputs, "sourceSentence") },
    parameters: { source_sentence: args.inputs.sourceSentence, ...args.parameters }
  };
}

// src/tasks/nlp/summarization.ts
async function summarization(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "summarization"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === "string");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{summary_text: string}>");
  }
  return res?.[0];
}

// src/tasks/nlp/tableQuestionAnswering.ts
async function tableQuestionAnswering(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "table-question-answering"
  });
  const isValidOutput = Array.isArray(res) ? res.every((elem) => validate(elem)) : validate(res);
  if (!isValidOutput) {
    throw new InferenceOutputError(
      "Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}"
    );
  }
  return Array.isArray(res) ? res[0] : res;
}
function validate(elem) {
  return typeof elem === "object" && !!elem && "aggregator" in elem && typeof elem.aggregator === "string" && "answer" in elem && typeof elem.answer === "string" && "cells" in elem && Array.isArray(elem.cells) && elem.cells.every((x) => typeof x === "string") && "coordinates" in elem && Array.isArray(elem.coordinates) && elem.coordinates.every(
    (coord) => Array.isArray(coord) && coord.every((x) => typeof x === "number")
  );
}

// src/tasks/nlp/textClassification.ts
async function textClassification(args, options) {
  const res = (await request(args, {
    ...options,
    taskHint: "text-classification"
  }))?.[0];
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === "string" && typeof x.score === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{label: string, score: number}>");
  }
  return res;
}

// src/utils/toArray.ts
function toArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  }
  return [obj];
}

// src/tasks/nlp/textGeneration.ts
async function textGeneration(args, options) {
  if (args.provider === "together") {
    args.prompt = args.inputs;
    const raw = await request(args, {
      ...options,
      taskHint: "text-generation"
    });
    const isValidOutput = typeof raw === "object" && "choices" in raw && Array.isArray(raw?.choices) && typeof raw?.model === "string";
    if (!isValidOutput) {
      throw new InferenceOutputError("Expected ChatCompletionOutput");
    }
    const completion = raw.choices[0];
    return {
      generated_text: completion.text
    };
  } else if (args.provider === "hyperbolic") {
    const payload = {
      messages: [{ content: args.inputs, role: "user" }],
      ...args.parameters ? {
        max_tokens: args.parameters.max_new_tokens,
        ...omit(args.parameters, "max_new_tokens")
      } : void 0,
      ...omit(args, ["inputs", "parameters"])
    };
    const raw = await request(payload, {
      ...options,
      taskHint: "text-generation"
    });
    const isValidOutput = typeof raw === "object" && "choices" in raw && Array.isArray(raw?.choices) && typeof raw?.model === "string";
    if (!isValidOutput) {
      throw new InferenceOutputError("Expected ChatCompletionOutput");
    }
    const completion = raw.choices[0];
    return {
      generated_text: completion.message.content
    };
  } else {
    const res = toArray(
      await request(args, {
        ...options,
        taskHint: "text-generation"
      })
    );
    const isValidOutput = Array.isArray(res) && res.every((x) => "generated_text" in x && typeof x?.generated_text === "string");
    if (!isValidOutput) {
      throw new InferenceOutputError("Expected Array<{generated_text: string}>");
    }
    return res?.[0];
  }
}

// src/tasks/nlp/textGenerationStream.ts
async function* textGenerationStream(args, options) {
  yield* streamingRequest(args, {
    ...options,
    taskHint: "text-generation"
  });
}

// src/tasks/nlp/tokenClassification.ts
async function tokenClassification(args, options) {
  const res = toArray(
    await request(args, {
      ...options,
      taskHint: "token-classification"
    })
  );
  const isValidOutput = Array.isArray(res) && res.every(
    (x) => typeof x.end === "number" && typeof x.entity_group === "string" && typeof x.score === "number" && typeof x.start === "number" && typeof x.word === "string"
  );
  if (!isValidOutput) {
    throw new InferenceOutputError(
      "Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>"
    );
  }
  return res;
}

// src/tasks/nlp/translation.ts
async function translation(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "translation"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === "string");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected type Array<{translation_text: string}>");
  }
  return res?.length === 1 ? res?.[0] : res;
}

// src/tasks/nlp/zeroShotClassification.ts
async function zeroShotClassification(args, options) {
  const res = toArray(
    await request(args, {
      ...options,
      taskHint: "zero-shot-classification"
    })
  );
  const isValidOutput = Array.isArray(res) && res.every(
    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === "string") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === "number") && typeof x.sequence === "string"
  );
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{labels: string[], scores: number[], sequence: string}>");
  }
  return res;
}

// src/tasks/nlp/chatCompletion.ts
async function chatCompletion(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "text-generation",
    chatCompletion: true
  });
  const isValidOutput = typeof res === "object" && Array.isArray(res?.choices) && typeof res?.created === "number" && typeof res?.id === "string" && typeof res?.model === "string" && /// Together.ai and Nebius do not output a system_fingerprint
  (res.system_fingerprint === void 0 || res.system_fingerprint === null || typeof res.system_fingerprint === "string") && typeof res?.usage === "object";
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected ChatCompletionOutput");
  }
  return res;
}

// src/tasks/nlp/chatCompletionStream.ts
async function* chatCompletionStream(args, options) {
  yield* streamingRequest(args, {
    ...options,
    taskHint: "text-generation",
    chatCompletion: true
  });
}

// src/tasks/multimodal/documentQuestionAnswering.ts
async function documentQuestionAnswering(args, options) {
  const reqArgs = {
    ...args,
    inputs: {
      question: args.inputs.question,
      // convert Blob or ArrayBuffer to base64
      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))
    }
  };
  const res = toArray(
    await request(reqArgs, {
      ...options,
      taskHint: "document-question-answering"
    })
  );
  const isValidOutput = Array.isArray(res) && res.every(
    (elem) => typeof elem === "object" && !!elem && typeof elem?.answer === "string" && (typeof elem.end === "number" || typeof elem.end === "undefined") && (typeof elem.score === "number" || typeof elem.score === "undefined") && (typeof elem.start === "number" || typeof elem.start === "undefined")
  );
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{answer: string, end?: number, score?: number, start?: number}>");
  }
  return res[0];
}

// src/tasks/multimodal/visualQuestionAnswering.ts
async function visualQuestionAnswering(args, options) {
  const reqArgs = {
    ...args,
    inputs: {
      question: args.inputs.question,
      // convert Blob or ArrayBuffer to base64
      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))
    }
  };
  const res = await request(reqArgs, {
    ...options,
    taskHint: "visual-question-answering"
  });
  const isValidOutput = Array.isArray(res) && res.every(
    (elem) => typeof elem === "object" && !!elem && typeof elem?.answer === "string" && typeof elem.score === "number"
  );
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected Array<{answer: string, score: number}>");
  }
  return res[0];
}

// src/tasks/tabular/tabularRegression.ts
async function tabularRegression(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "tabular-regression"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected number[]");
  }
  return res;
}

// src/tasks/tabular/tabularClassification.ts
async function tabularClassification(args, options) {
  const res = await request(args, {
    ...options,
    taskHint: "tabular-classification"
  });
  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === "number");
  if (!isValidOutput) {
    throw new InferenceOutputError("Expected number[]");
  }
  return res;
}

// src/HfInference.ts
var HfInference = class {
  accessToken;
  defaultOptions;
  constructor(accessToken = "", defaultOptions = {}) {
    this.accessToken = accessToken;
    this.defaultOptions = defaultOptions;
    for (const [name2, fn] of Object.entries(tasks_exports)) {
      Object.defineProperty(this, name2, {
        enumerable: false,
        value: (params, options) => (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          fn({ ...params, accessToken }, { ...defaultOptions, ...options })
        )
      });
    }
  }
  /**
   * Returns copy of HfInference tied to a specified endpoint.
   */
  endpoint(endpointUrl) {
    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);
  }
};
var HfInferenceEndpoint = class {
  constructor(endpointUrl, accessToken = "", defaultOptions = {}) {
    accessToken;
    defaultOptions;
    for (const [name2, fn] of Object.entries(tasks_exports)) {
      Object.defineProperty(this, name2, {
        enumerable: false,
        value: (params, options) => (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          fn({ ...params, accessToken, endpointUrl }, { ...defaultOptions, ...options })
        )
      });
    }
  }
};

// src/types.ts
var INFERENCE_PROVIDERS = [
  "black-forest-labs",
  "fal-ai",
  "fireworks-ai",
  "hf-inference",
  "hyperbolic",
  "nebius",
  "novita",
  "replicate",
  "sambanova",
  "together"
];
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HfInference,
  HfInferenceEndpoint,
  INFERENCE_PROVIDERS,
  InferenceOutputError,
  audioClassification,
  audioToAudio,
  automaticSpeechRecognition,
  chatCompletion,
  chatCompletionStream,
  documentQuestionAnswering,
  featureExtraction,
  fillMask,
  imageClassification,
  imageSegmentation,
  imageToImage,
  imageToText,
  objectDetection,
  questionAnswering,
  request,
  sentenceSimilarity,
  streamingRequest,
  summarization,
  tableQuestionAnswering,
  tabularClassification,
  tabularRegression,
  textClassification,
  textGeneration,
  textGenerationStream,
  textToImage,
  textToSpeech,
  textToVideo,
  tokenClassification,
  translation,
  visualQuestionAnswering,
  zeroShotClassification,
  zeroShotImageClassification
});
