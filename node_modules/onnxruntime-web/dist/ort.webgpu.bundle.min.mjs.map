{"version":3,"sources":["../../common/lib/backend-impl.ts","../../common/lib/backend.ts","../../common/lib/version.ts","../../common/lib/env-impl.ts","../../common/lib/env.ts","../../common/lib/tensor-conversion-impl.ts","../../common/lib/tensor-factory-impl.ts","../../common/lib/tensor-impl-type-mapping.ts","../../common/lib/tensor-utils-impl.ts","../../common/lib/tensor-impl.ts","../../common/lib/tensor.ts","../../common/lib/trace.ts","../../common/lib/inference-session-impl.ts","../../common/lib/inference-session.ts","../../common/lib/tensor-conversion.ts","../../common/lib/tensor-factory.ts","../../common/lib/onnx-model.ts","../../common/lib/onnx-value.ts","../../common/lib/index.ts","../lib/wasm/wasm-utils-env.ts","../lib/wasm/proxy-worker/main.ts","ort-wasm-simd-threaded.jsep.mjs","../lib/wasm/wasm-utils-import.ts","../lib/wasm/wasm-factory.ts","../lib/wasm/wasm-utils.ts","../lib/wasm/run-options.ts","../lib/wasm/session-options.ts","../lib/wasm/wasm-common.ts","../lib/wasm/wasm-utils-load-file.ts","../lib/wasm/jsep/log.ts","../lib/wasm/jsep/tensor-view.ts","../lib/wasm/jsep/webgpu/types.ts","../lib/wasm/jsep/webgpu/gpu-data-manager.ts","../lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","../lib/wasm/jsep/util.ts","../lib/wasm/jsep/webgpu/ops/common.ts","../lib/wasm/jsep/webgpu/ops/transpose.ts","../lib/wasm/jsep/webgpu/ops/reduce-shared.ts","../lib/wasm/jsep/webgpu/ops/reduce.ts","../lib/wasm/jsep/webgpu/ops/argminmax.ts","../lib/wasm/jsep/webgpu/ops/attention.ts","../lib/wasm/jsep/webgpu/ops/batch-norm.ts","../lib/wasm/jsep/webgpu/ops/bias-add.ts","../lib/wasm/jsep/webgpu/ops/unary-op.ts","../lib/wasm/jsep/webgpu/ops/bias-split-gelu.ts","../lib/wasm/jsep/webgpu/ops/binary-op.ts","../lib/wasm/jsep/webgpu/ops/concat.ts","../lib/wasm/jsep/webgpu/ops/fuse-utils.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","../lib/wasm/jsep/webgpu/ops/matmul-shaders.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv3d_naive_webgpu.ts","../lib/wasm/jsep/webgpu/ops/conv-grouped.ts","../lib/wasm/jsep/webgpu/ops/conv.ts","../lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","../lib/wasm/jsep/webgpu/ops/conv-transpose.ts","../lib/wasm/jsep/webgpu/ops/cumsum.ts","../lib/wasm/jsep/webgpu/ops/depth-to-space.ts","../lib/wasm/jsep/webgpu/ops/einsum.ts","../lib/wasm/jsep/webgpu/ops/expand.ts","../lib/wasm/jsep/webgpu/ops/fast-gelu.ts","../lib/wasm/jsep/webgpu/ops/gather.ts","../lib/wasm/jsep/webgpu/ops/gather-nd.ts","../lib/wasm/jsep/webgpu/ops/gather-block-quantized.ts","../lib/wasm/jsep/webgpu/ops/gather-elements.ts","../lib/wasm/jsep/webgpu/ops/gemm.ts","../lib/wasm/jsep/webgpu/ops/grid-sample.ts","../lib/wasm/jsep/webgpu/ops/multihead-attention.ts","../lib/wasm/jsep/webgpu/ops/split.ts","../lib/wasm/jsep/webgpu/ops/group-query-attention.ts","../lib/wasm/jsep/webgpu/ops/instance-norm.ts","../lib/wasm/jsep/webgpu/ops/layer-norm.ts","../lib/wasm/jsep/webgpu/ops/matmul.ts","../lib/wasm/jsep/webgpu/ops/matmulnbits.ts","../lib/wasm/jsep/webgpu/ops/pad.ts","../lib/wasm/jsep/webgpu/ops/pool.ts","../lib/wasm/jsep/webgpu/ops/quantize-linear.ts","../lib/wasm/jsep/webgpu/ops/range.ts","../lib/wasm/jsep/webgpu/ops/scatter-nd.ts","../lib/wasm/jsep/webgpu/ops/resize.ts","../lib/wasm/jsep/webgpu/ops/rotary-embedding.ts","../lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts","../lib/wasm/jsep/webgpu/ops/slice.ts","../lib/wasm/jsep/webgpu/ops/softmax.ts","../lib/wasm/jsep/webgpu/ops/tile.ts","../lib/wasm/jsep/webgpu/ops/where.ts","../lib/wasm/jsep/webgpu/op-resolve-rules.ts","../lib/wasm/jsep/webgpu/program-manager.ts","../lib/wasm/jsep/backend-webgpu.ts","../lib/wasm/jsep/webnn/tensor-manager.ts","../lib/wasm/jsep/backend-webnn.ts","../lib/wasm/jsep/init.ts","../lib/wasm/wasm-core-impl.ts","../lib/wasm/proxy-wrapper.ts","../lib/wasm/session-handler-inference.ts","../lib/backend-wasm.ts","../lib/index.ts","../lib/version.ts"],"names":["backends","backendsSortedByPriority","registerBackend","tryResolveAndInitializeBackend","resolveBackendAndExecutionProviders","init_backend_impl","__esmMin","name","backend","priority","currentBackend","i","backendName","backendInfo","isInitializing","e","options","eps","backendHints","backendNames","errors","availableBackendNames","resolveResult","err","filteredEps","target","prop","init_backend","version","init_version","logLevelValue","env","init_env_impl","value","init_env","tensorToDataURL","tensorToImageData","init_tensor_conversion_impl","tensor","canvas","pixels2DContext","width","height","inputformat","norm","normMean","normBias","stride","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","j","R","G","B","A","image","channels","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","bufferToTensor","tensorFromImage","tensorFromTexture","tensorFromGpuBuffer","tensorFromMLTensor","tensorFromPinnedBuffer","init_tensor_factory_impl","init_tensor_impl","buffer","outputformat","float32Data","Tensor","isHTMLImageEle","isImageDataEle","isImageBitmap","isString","data","bufferToTensorOptions","createCanvas","createCanvasContext","tempCanvas","resolve","reject","context","newImage","img","texture","download","dispose","dims","gpuBuffer","dataType","mlTensor","type","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isTypedArrayChecked","checkTypedArray","init_tensor_impl_type_mapping","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","isFloat16ArrayAvailable","calculateSize","tensorReshape","init_tensor_utils_impl","size","dim","arg0","arg1","arg2","expectedTypedArrayConstructor","maybeDims","typedArrayConstructor","firstElementType","mappedType","releaseData","init_tensor","TRACE","TRACE_FUNC","TRACE_FUNC_BEGIN","TRACE_FUNC_END","init_trace","deviceType","label","msg","extraMsg","stack","hasTraceFunc","InferenceSession","init_inference_session_impl","_InferenceSession","handler","feeds","fetches","isFetchesEmpty","isFetches","arg1Keys","v","results","returnValue","key","result","arg3","filePathOrUint8Array","byteOffset","byteLength","optionsWithValidatedEPs","init_inference_session","init_tensor_conversion","init_tensor_factory","init_onnx_model","init_onnx_value","esm_exports","__export","init_esm","init_wasm_utils_env","main_exports","main_default","WORKER_NAME","isProxyWorker","init_main","init_wasm_core_impl","init_wasm_factory","init_wasm_utils_import","ev","message","initializeWebAssembly","initRuntime","epName","initEp","bufferData","copyFromExternalBuffer","model","createSession","sessionMetadata","releaseSession","sessionId","inputIndices","inputs","outputIndices","run","outputs","o","extractTransferableBuffers","endProfiling","urlOverride","scriptSrc","ort_wasm_simd_threaded_jsep_exports","ort_wasm_simd_threaded_jsep_default","r","init_ort_wasm_simd_threaded_jsep","M","Y","a","H","F","P","u","I","s","f","b","l","m","c","d","p","h","y","t","n","Ve","Ke","g","N","k","w","C","_","O","T","S","Ba","W","wa","Re","Or","wr","E","ya","Tr","ga","Oa","He","Aa","or","x","D","U","L","$","z","V","q","J","Q","X","Z","K","rr","er","tr","ar","nr","sr","ur","Wr","Mr","Hr","Fr","jr","Ur","Lr","Gr","$r","Yr","zr","Vr","qr","Jr","Qr","Kr","ie","se","he","ve","ge","Ne","ke","We","Ee","Me","xe","Fe","Be","Ie","je","Ge","$e","tt","nt","ut","le","ft","ct","dt","pt","ht","yt","vt","gt","Nt","kt","wt","At","Ct","St","Wt","Et","Mt","xt","Ht","Ft","Pt","Bt","It","Ut","Lt","jt","Gt","$t","Yt","Jt","Qt","ra","ea","hr","ta","aa","na","ia","dr","ba","la","ir","Rr","et","fr","br","lr","yr","Cr","Ar","vr","Nr","mr","cr","Ma","Ea","Ca","Wa","pr","gr","kr","_a","_r","Sa","xa","Sr","Er","xr","Dr","Pr","Br","Ir","Xr","Zr","re","ee","te","ae","ne","oe","ue","fe","be","me","ce","de","pe","ye","Na","ka","we","Ae","Ce","_e","Oe","Te","Se","De","Ta","Pe","da","Ue","ha","Le","Ye","ze","qe","Je","Qe","Xe","Ze","rt","Ha","pa","Da","Fa","at","ot","it","st","bt","lt","mt","_t","Ot","Tt","Dt","Rt","zt","Vt","qt","Xt","Zt","Kt","oa","ua","sa","fa","ma","ca","Ra","va","Pa","origin","getScriptSrc","inferWasmPathPrefixFromScriptSrc","isSameOrigin","normalizeUrl","fallbackUrl","preload","dynamicImportDefault","createProxyWorker","importProxyWorker","embeddedWasmModule","importWasmModule","filename","prefixOverride","baseUrl","absoluteUrl","blob","url","isMultiThreaded","wasmModuleFilename","wasmModuleUrl","needPreload","wasm","initialized","initializing","aborted","isMultiThreadSupported","isSimdSupported","getInstance","flags","timeout","numThreads","multiThreadSupported","wasmPaths","wasmPrefixOverride","mjsPathOverrideFlag","mjsPathOverride","wasmPathOverrideFlag","wasmPathOverride","wasmBinaryOverride","objectUrl","ortWasmFactory","isTimeout","tasks","config","fileName","inferredWasmPathPrefix","module","what","allocWasmString","iterateExtraOptions","checkLastError","init_wasm_utils","allocs","dataLength","dataOffset","prefix","seen","ptrSize","paramsOffset","errorCode","errorMessagePointer","errorMessage","setRunOptions","init_run_options","runOptionsHandle","runOptions","tagDataOffset","keyDataOffset","valueDataOffset","alloc","getGraphOptimzationLevel","getExecutionMode","appendDefaultOptions","setExecutionProviders","setSessionOptions","init_session_options","graphOptimizationLevel","executionMode","session","ep","sessionOptionsHandle","executionProviders","webgpuOptions","epNameDataOffset","sessionOptions","logIdDataOffset","logSeverityLevel","logVerbosityLevel","optimizedModelFilePathOffset","nameOffset","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","calculateTensorSizeInBytes","tensorTypeToTypedArrayConstructor","logLevelStringToEnum","isGpuBufferSupportedType","isMLTensorSupportedType","dataLocationStringToEnum","init_wasm_common","typeProto","dateType","dimsOrSize","elementSize","logLevel","location","loadFile","init_wasm_utils_load_file","file","readFile","createReadStream","stream","chunks","chunk","response","contentLengthHeader","fileSize","reader","pages","offset","done","chunkSize","logLevelPrefix","doLog","configLogLevel","debug","configureLogger","LOG","LOG_DEBUG","init_log","level","$configLogLevel","$debug","messageLevel","configLevel","args","createView","init_tensor_view","dataBuffer","init_types","bucketFreelist","bucketArr","calcNormalizedBufferSize","calcBucketBufferSize","guid","createNewGpuDataId","downloadGpuData","GpuDataManagerImpl","createGpuDataManager","init_gpu_data_manager","idx","sizeForBucket","originalSize","getTargetBuffer","bufferSize","gpuReadBuffer","commandEncoder","arrayBuffer","targetBuffer","id","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","gpuBufferForUploading","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","previous","usage","isStorage","isUniform","buffers","gpuData","idInput","cachedData","maxInFreeList","freelist","capturedBuffers","storage","pendingBuffers","AttributeWithCacheKeyImpl","createAttributeWithCacheKey","init_attribute_with_cache_key","attribute","MatMulUtil","BroadcastUtil","ShapeUtil","PoolConvUtil","GemmUtil","MIN_CLIP","MAX_CLIP","init_util","adims","bdims","isMatMul","arank","brank","crank","cdims","cShapeMatMul","aLen","bLen","max","shape","finalShape","inputRank","finalRank","_ShapeUtil","rank","newDims","axis","start","end","strides","tensorRank","axes","perm","pad","shape1","shape2","_PoolConvUtil","isGlobalOperator","inputDims","kernelShape","dilations","pads","isChannelLast","autoPad","outputDims","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","leftShape","transLeft","rightShape","transRight","biasShape","kDim","WORKGROUP_SIZE","getWgslMappedType","tensorTypeToWsglStorageType","tensorTypeToWsglValueType","createTensorShapeVariables","getMaxComponents","fillVector","castToF32","sumVector","getElementAt","createIndicesHelper","inputVariable","outputVariable","atomicOutputVariable","internalVariable","ShaderHelperImpl","createShaderHelper","init_common","components","programUniforms","index","length","tensorType","shapeOrRank","useUniform","rankIdentity","indicesType","valueType","storageType","normalizeDim","implementationUsed","uniformPrefix","o2iSnippet","offsetToIndicesImplementation","offsetToIndices","varOffset","offsets","indicesToOffsetImplementation","indicesToOffset","varIndices","indices","init","indicesGet","indicesSet","broadcastedIndicesToOffsetImplementation","broadcastedIndicesToOffset","output","implKey","setByOffset","getByOffset","getByIndicesImplementation","getImplementation","functionParams","dimsParams","get","normalizedIndices","getByIndices","setByIndicesImplementation","setImplementation","impls","needShapeStrides","impl","indicesAndValue","normalizedDispatchGroup","limits","workgroupSize","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","paramList","globalIdxDefinition","variable","bindingIndex","access","variables","additionalUniforms","uniformSnippets","typeTemp","uniformWgslTypeToDataType","dispatchGroup","validateInputs","getAdjustedPerm","getOutputShape","permFunctionBody","squeezeShape","isTransposeReshape","createTransposeProgramInfo","transpose","parseTransposeAttributes","init_transpose","inputShape","input","reverseFunc","adjustedPerm","newShape","newPerm","lastPermutedAxis","inputTensor","permAttr","inputDataType","outputShape","newInputShape","newOutputShape","transposeAsReshape","getShaderSource","shaderHelper","outputSize","channelsLast","channelsFirst","tileSize","attributes","reduceOps","reduceSharedOps","reduceInitValues","reduceOutputValues","getInnerMostAxes","computeOutAndReduceShapes","expandShapeToKeepDim","areAxesInnerMostDims","getAxesPermutation","createReduceSharedProgramInfo","reduceCommon","reduceMeanShared","reduceL1Shared","reduceL2Shared","reduceLogSumExpShared","reduceMaxShared","reduceMinShared","reduceProdShared","reduceSumShared","reduceSumSquareShared","reduceLogSumShared","init_reduce_shared","init_reduce","numInnerAxes","res","reduceShape","expandShape","shapeIdx","cacheKey","reduceType","outputDataType","reduceSize","sharedMemorySnippet","updatedAttributes","createReduceAttributesFromInputs","updatedAxes","_dim","normalizeAxes","permutedAxes","finalOutputShape","noOp","createReduceProgramInfo","runReduceProgram","reduceLogSumNaive","reduceL1Naive","reduceL2Naive","reduceLogSumExpNaive","reduceMaxNaive","reduceMeanNaive","reduceMinNaive","reduceProdNaive","reduceSumNaive","reduceSumSquareNaive","useNaiveReduceMethod","reduceMean","reduceL1","reduceL2","reduceLogSumExp","reduceMax","reduceMin","reduceProd","reduceSum","reduceSumSquare","reduceLogSum","shaderCache","reduceOp","axesInput","keepDims","noopWithEmptyAxes","reduceOnAllAxes","outputRank","idxCopy","ops","_output","idxZero","argMin","argMax","parseArgMinMaxAttributes","init_argminmax","argMinMaxOp","validateAttentionInputs","initVarStub","createInPlaceSoftmaxProgramInfo","createAttentionProbsProgramInfo","createVxAttentionScoreProgramInfo","applyAttention","prepare","attention","init_attention","weights","bias","maskIndex","past","attentionBias","batchSize","sequenceLength","inputHiddenSize","qHiddenSize","kHiddenSize","vHiddenSize","sz","kvSequenceLength","pastSequenceLength","totalSequenceLength","maxSequenceLength","maskType","seqLensInput","totalSequenceLengthInput","initPastSequenceLength","numHeads","seqLens","WG","totalSequenceLengthComp","elementsPerThread","f32Type","inputDependencies","inputHelper","inputHelpers","seqLensInputHelper","totalSequenceLengthInputHelper","elemValueType","uniforms","outputCount","pastKey","parameters","probsShape","presentKey","kvNumHeads","presentKeyShape","nReps","alpha","vectorizedHeadSize","TILE_SIZE","dispatch","feedPastKey","qInput","kInput","inputVars","pastKeyInput","seqLensInputVariable","totalSequenceLengthInputVariable","outputVars","probs","pastValue","params","repeatedVHiddenSize","presentValue","presentValueShape","feedPastValue","probsHelper","vHelper","_maskIndex","_past","attentionBiasInput","inputsK","inputsV","outputQ","outputK","outputV","weight","createBatchNormInferenceProgramInfo","parseBatchNormAttributes","batchNorm","init_batch_norm","checkShapeEqual","actual","expected","epsilon","spatial","format","yShape","cComponents","useShapesUniforms","scale","inputMean","inputVar","calcCOffset","cOffset","getInferenceModeShaderSource","helper","createBiasAddProgramInfo","biasAdd","init_bias_add","residual","createElementwiseProgramShader","createElementwiseProgramInfo","abs","acos","acosh","asin","asinh","atan","atanh","parseCastAttributes","cast","generateClipAttributesFromInputs","clip","ceil","cos","cosh","parseAlphaAttributes","elu","erfImpl","erf","exp","floor","gelu","leakyRelu","not","neg","reciprocal","relu","sigmoid","parseHardSigmoidAttributes","hardSigmoid","sin","sinh","sqrt","tan","tanhExpression","tanh","fastGeluImpl","fastGeluExpression","fastGelu","thresholdedRelu","log","quickGeluImpl","quickGeluExpression","quickgelu","init_unary_op","datasize","funcCall","additionalImplementation","additionalUniformsType","vecSize","expression","inputTensors","func","min","hasMin","hasMax","clipAttributes","varType","dType","createBiasSplitGeluProgramInfo","biasSplitGelu","init_bias_split_gelu","createBinaryOpProgramShader","createBinaryOpProgramInfo","runBinaryOp","add","div","equal","mul","pow","sub","greater","less","greaterOrEqual","lessOrEqual","init_binary_op","dimsA","dimsB","dimsOutput","vectorize","doBroadcast","sharedDimensionDivisibleBy4","typeA","typeB","typeOutput","expressionScalar","expressionVector","assignment","isAOneElement","isBOneElement","aLastDimDivisibleBy4","bLastDimDivisibleBy4","singleAssignment","resStr","typeCast","expressionA","expressionB","aDims","bDims","isBroadcast","cacheKeyAux","calculatedShape","sharedDimension","dimA","dimB","calculateInputIndexImpl","assignOutputData","createConcatProgramInfo","concat","parseConcatAttributes","init_concat","referenceIndex","referenceInput","inputType","numberOfTensors","sizeInConcatAxisStr","codeLines","returnSnippet","adjustedAxis","sizeInConcatAxis","previousSum","inputRanks","indicesAxis","sum","nonEmptyInputs","getActivationSnippet","appendActivationUniformsData","appendActivationUniforms","parseInternalActivationAttributes","init_fuse_utils","baseType","programUniform","activation","beta","clipMin","clipMax","typeSnippet","biasSnippet","init_activation_util","component","hasBias","utilFunctions","init_conv_util","strideStr","convertOutputBatchIndicesToInputBatchIndices","createNaiveMatmulProgramInfo","init_matmul_shaders","targetIndicesName","inputBatchRank","outputBatchRank","batchIndicesName","extendingInputRank","activationAttributes","reshapedOutputShape","isChannelsLast","squeezeOutputShapeFunction","aShape","bShape","aComponents","outputNumber","outerDims","outputShapeInShader","batchDims","applyActivation","inputVariables","processBias","biasComponents","calcResult","calcStr","writeDataToSubAVec4Snippet","calculateResultSnippet","makeMatMulPackedVec4Source","writeDataToSubASnippet","readDataFromSubASnippet","makeMatMulPackedSource","matMulReadWriteFnSource","createMatmulProgramInfo","init_matmul_packed_webgpu","transposeA","innerElementSize","workPerThread","tileInner","splitK","splitedDimInner","tileAOuter","tileBOuter","tileAWidth","tileAHight","rowPerThreadB","sequentialAccessByThreads","rowPerThreadA","colPerThreadA","matmulSnippet","batchVariable","aVariable","bVariable","outerDimsA","outerDimsB","dimAOuter","dimInner","dimBOuter","isVec4","aShapeTemp","aRank","bShapeTemp","bRank","outputShapeTemp","batchRank","declareFunctions","conv2dCommonSnippet","createConv2DMatMulProgramInfo","init_conv2d_mm_webgpu","fitAOuter","fitBOuter","fitInner","addBias","innerElementSizeX","innerElementSizeW","getXSnippet","getWSnippet","coordASnippet","coordResSnippet","xHeight","xWidth","row","col","readXSnippet","sampleX","sampleW","resType","aType","bType","inChannels","outWidth","outHeight","outChannels","dispatchX","dispatchY","workGroupSize","elementsSize","arrayProduct","parse3TupleParam","getEffectiveFilterSize","computeDefaultPad","computeOutputShape4D","get3DPadAndOutInfo","computeConv3DInfo","createConv3DNaiveProgramInfo","init_conv3d_naive_webgpu","arr","product","param","filterSize","fieldSize","effectiveFieldSize","inShape","filterShape","zeroPad","outShape","inDepth","inHeight","inWidth","strideDepth","strideHeight","strideWidth","filterDepth","filterHeight","filterWidth","padInfo","outDepth","val","padAlongDepth","padAlongHeight","padAlongWidth","front","back","top","bottom","left","right","depthwise","dataFormat","filterChannels","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","dispatchLayout","createGroupedConvProgramInfo","createGroupedConvVectorizeProgramInfo","init_conv_grouped","xShape","wShape","outputChannels","outputChannelsPerGroup","calculateResult","xNumber","calculateOutputShape","weightTransposeAttribute","getAdjustedConvAttributes","parseConvAttributes","conv2d","conv1d","conv3d","conv","init_conv","adjustPads","inputSpatialShape","spatialRank","dilatedKernelShape","dataChannel","filterInChannel","newAttributes","group","wIsConst","convInputs","transposedWeight","inputHeight","inputWidth","inputChannels","weightHeight","weightWidth","sameSize","batch","xReshaped","wReshaped","matmulOutputShape","matmulInputs","sharedDim","adjustedAttributes","convInfo","createConvTranspose2DProgramInfo","init_conv_backprop_webgpu","inputChannelsPerGroup","bComponents","effectiveFilterDims","rowDim","colDim","channelDim","dy","codeSnippet","computeTotalPad","distributePadding","calculateOutputShapeAndPads","getAdjustedConvTransposeAttributes","parseConvTransposeAttributes","convTranspose2d","convTranspose1d","convTranspose","init_conv_transpose","inDim","adj","outSize","totalPad","head","tail","smallPad","outputPadding","updateOutputShape","featureMaps","convTransposeInputs","createCumsumProgramInfo","cumsum","parseCumSumAttributes","init_cumsum","axisInput","axisValue","lowerLimit","upperLimit","exclusive","reverse","createDepthToSpaceProgramInfo","depthToSpace","parseDepthToSpaceAttributes","init_depth_to_space","blocksize","isDCRmode","reshapedInputTensor","reshapedInputRank","reshapedInput","permedOutput","shapeBeforePerm","shapeAfterPerm","symbolPattern","termPattern","termPatternOnly","lhsPattern","lhsPatternOnly","EinsumTerm","EinsumEquation","appendMax","createEinsumProgramInfo","einsum","parseEinsumAttributes","init_einsum","inputIndex","symbol","equation","lhs","rhs","inputTerm","einsumTerm","sym","info","dimValue","term","isInput","ellipsis","ellipsisDims","nextDim","indexSymbols","ellipsisDimLength","inputShapes","einsumEquation","uniformsSymbols","initProd","initSum","updateSum","reduceOpsSetIndices","reduceOpsLoopHeaders","reduceOpsLoopFooters","reduceOpCompute","isReduceOpsWithoutLoop","outputIndex","_var","programUniformsInit","acc","inputProgramUniforms","getAdjustedShape","createExpandProgramInfo","expand","init_expand","shapeIndex","inputShapeIndex","diff","isBoolOrScalar","iComponents","createFastGeluProgramInfo","init_fast_gelu","biasLength","useVec4","singleElementBias","biasGetExpression","createGatherProgramInfo","parseGatherAttributes","gather","init_gather","indicesShape","axisDimLimit","calcDataIndices","indicesRank","computeSliceOffsets","gatherND","parseGatherNDAttributes","init_gather_nd","indicesData","sizesFromSliceDimsData","numSlices","numSlicesPerBatch","inputBatchStride","numSliceDims","sliceSize","numBatches","sizesFromSliceDims","runningProduct","inputSliceOffsets","lastIndicesDimension","createGatherBlockQuantizedProgramInfo","gatherBlockQuantized","parseGatherBlockQuantizedAttributes","init_gather_block_quantized","quantizeAxis","blockSize","scales","zeroPoint","gatherAxis","outputType","isSigned","_v","_i","createGatherElementsProgramInfo","parseGatherElementsAttributes","gatherElements","init_gather_elements","inputOutputDataType","indicesDataType","createGemmProgramInfo","parseGemmAttributes","gemm","init_gemm","numTileN","numTileM","useShared","line","calculateAlpha","getShaderSourceShared","fillWorkgroupMemory","transA","transB","idxN","idxC","idxH","idxW","gsGetCubicCoeffs","gsBicubicInterpolate","gsDenormalize","gsReflect","pixelAtGrid","computePixel","createGridSampleProgramInfo","gridSample","parseGridSampleAttributes","init_grid_sample","gridShape","grid","getInput","parseMultiHeadAttentionAttributes","addBiasTranspose","maybeTransposeToBNSHAndAddBias","multiHeadAttention","init_multihead_attention","query","keyPaddingMask","hiddenSize","headSize","qkvFormat","maskDims","passPastInKv","broadcastResPosBias","qkv","biasOffset","qkvInput","biasInput","kvBNSH","createSplitAttributesFromInputs","calculateOutputIndexImpl","writeBufferDataImpl","createSplitProgramInfo","split","parseSplitAttributes","init_split","splitSizes","numOutputs","inputSize","sizeInSplitAxis","outputsTensorInfo","outputShapes","maybeTransposeToBNSH","groupQueryAttention","init_group_query_attention","dmmhaPacking","packedQKV","hasPastKey","hasPastValue","seqlLens","splitAttributes","computeChannelScaleShift","createInstanceNormProgramInfo","createInstanceNormNHWCProgramInfo","instanceNorm","init_instance_norm","wgType","unitsOfWork","channelScaleShift","scaleShape","needTranspose","transposedXPerm","transposedX","scaleType","scaleData","num","outputHelper","createLayerNormProgramInfo","layerNorm","init_layer_norm","simplified","normCount","normSize","scaleSize","biasSize","meanInvStdDevDim","hasMeanDataOutput","hasInvStdOutput","matMul","init_matmul","batchA","batchB","reshapedA","reshapedB","createMatMulNBitsProgramInfo","createMatMulNBitsBlockSize32ProgramInfo","matMulNBits","parseMatMulNBitsAttributes","init_matmulnbits","nBlocksPerCol","blobSize","scalesShape","zeroPointsShape","expectedZeroPointsSize","blobSizeInWords","dispatchSize","inputShapeTemp","zeroPoints","qDqDataType","processOneWord","prepareScaleAndZeroPoint","prepareBData","workgroupY","workgroupX","aLengthPerTile","blocksPerTile","readA","getPadConstant","getPadReflect","getPadEdge","getPadWrap","getPadSnippet","createPadProgramInfo","createPadAttributesFromInputs","init_pad","validPads","padsLength","block","isValueFromInput","padSnippet","bigInt64Pads","updatePads","getAdjustedPoolAttributesAndOutputShape","getUniformAndPadInfo","generatePoolingCode","createShaderKeyFromAttributes","createAveragePoolShaderKeyFromAttributes","createMaxPoolShaderKeyFromAttributes","parsePoolCommonAttributes","createAveragePoolProgramInfo","parseAveragePoolAttributes","averagePool","globalPoolAttributes","parseGlobalAveragePoolAttributes","globalAveragePool","createMaxPoolProgramInfo","maxPool","parseMaxPoolAttributes","parseGlobalMaxPoolAttributes","globalMaxPool","init_pool","inputShapeAsChannelFirst","hasDilations","outputShapeAsChannelFirst","outputShapeAsChannelLast","kernelSize","kw","sw","pwStart","pwEnd","pwStartEndNotZero","phStartEndNotZero","kh","sh","phStart","phEnd","kernelStrides","hasPads","cur","outputShapeRank","op1","op2","codeW","codeH","codeHEnd","dimIdxW","dimIdxH","stridesRank","padsRank","padCode","countIncludePad","attr","averagePoolAttributes","storageOrder","maxPoolAttributes","createDequantizeLinearProgramInfo","dequantizeLinear","parseDequantizeLinearAttributes","init_quantize_linear","dI","si","isPacked","zeroPointInput","zeroPointShape","perLayerQuantization","perAxisQuantization","maxComponents","useComponents","inputComponent","validateInputsContent","createRangeProgramInfo","range","init_range","limit","delta","sameStartLimit","increasingRangeNegativeStep","decreasingRangePositiveStep","numElements","wgslType","atomicReductionSnippet","createScatterNDProgramInfo","parseScatterNDAttributes","scatterND","init_scatter_nd","reduction","ptr","floatStart","floatEnd","lastIndexDimension","numUpdatesElements","updates","validateScales","updateScales","getSafeIntegerDivision","getOriginalCoordinateFromResizedCoordinate","getNearestPixelFromOriginal","updateRoI","initOutputShape","adjustOutputShape","calculateOriginalIndicesFromOutputIndices","calculateInputIndicesFromOutputIndices","checkInputIndices","setChannelAndBatchIndices","bilinearInterpolation","bicubicInterpolation","trilinearInterpolation","createResizeProgramInfo","getOpsetVersionFromCustomDataBuffer","resize","parseResizeAttributes","init_resize","newScales","opsetVersion","sizes","roi","roiInputIndex","scalesInputIndex","sizesInputIndex","coordinateTransferMode","nearestMode","roiTmp","roiLocal","scaleInPolicy","adjustedOutputShape","scalesLength","roiLength","useExtrapolation","channelIdx","batchIdx","spacialDims","extrapolationValue","heightIdx","widthIdx","cubicCoeffA","excludeOutside","is2D","isNchw","createCubicInterpolationFunction","direction","depthIdx","scalesInput","roiInput","noScale","customDataBuffer","antialias","coordinateTransformMode","keepAspectRatioPolicy","mode","createRotaryEmbeddingProgramInfo","rotaryEmbedding","init_rotary_embedding","positionIds","cosCache","sinCache","rotaryEmbeddingDim","interleaved","batchStride","halfRotaryEmbeddingDim","globalShape","globalStrides","createSkipLayerNormProgramInfo","skipLayerNorm","init_skip_layer_norm","skip","gamma","isTraining","hasBetaInput","hasBiasInput","hasMeanOutput","hasInvStdDevOutput","hasInputSkipBiasSumOutput","uniformsArray","vecDataType","_input","_index","readInput","createSliceAttributesFromInputs","fixStartEndValues","calculateInputIndicesImpl","createSliceProgramInfo","slice","parseSliceAttributes","init_slice","starts","ends","steps","newValue","signs","array","numSteps","newEnd","newStart","outputTensorInfo","createSoftmaxProgramInfo","softmax","parseSoftmaxAttributes","init_softmax","isTransposeRequired","transposedInput","transposedInputShape","cols","rows","packedCols","maxVector","threadMaxDecl","getRepeats","createTileProgramInfo","tile","init_tile","repeatsTensorView","repeats","createWhereOpProgramShader","createWhereOpProgramInfo","where","init_where","expressionC","dimsC","WEBGPU_OP_RESOLVE_RULES","init_op_resolve_rules","ProgramManager","init_program_manager","artifact","buildArtifact","uniformBufferBinding","device","computePassEncoder","entries","bindGroup","commandInfo","programInfo","normalizedDispatchGroupSize","enableDirectives","userCode","code","shaderModule","computePipeline","limitPerDimension","dispatchAverage","getProgramInputTensorInfoDependencyKey","getProgramInfoUniqueKey","AdapterInfoImpl","DeviceInfoImpl","WebGpuBackend","init_backend_webgpu","inputInfos","adapterInfo","architecture","vendor","deviceSubgroupsLimits","adapter","requiredFeatures","deviceDescriptor","requireFeatureIfAvailable","feature","computePassDescriptor","queryReadBuffer","mappedData","pendingKernels","pendingKernelInfo","kernelId","kernelInfo","kernelType","kernelName","programName","inputTensorViews","outputTensorViews","startTimeU64","endTimeU64","startTime","endTime","program","createKernelOutput","createIntermediateOutput","inputDatas","validatedOutputIndices","outputDatas","isTemporary","isPersistent","tensorView","persistentData","currentOffset","sizeOfElement","sizeOfVecOrMat","baseAlignment","elementPerVecOrMat","maxAlignmentOfField","uniformBufferData","uniform","actualType","actualLength","gpuDataId","src","dst","op","kernelEntry","useErrorScope","sessionInputOutputMapping","previousBuffer","bufferInfo","sessionCommandList","sessionPendingKernels","command","tensorGuid","createNewTensorId","webnnDataTypeToSize","calculateByteLength","TensorWrapper","TensorIdTracker","TensorManagerImpl","createTensorManager","init_tensor_manager","descriptor","dstBuffer","tensorManager","wrapper","copyOld","tensorId","tensorTracker","mlContext","writable","readable","tensorWrapper","onnxDataTypeToWebnnDataType","compareMLContextOptions","WebNNBackend","init_backend_webnn","aKeys","bKeys","optionsOrDevice","mlContextIndex","entry","sessionIds","onnxDataType","dimensions","webnnDataType","externalFilePath","builder","desc","mountedFiles","filePath","fileData","bufferView","init_exports","TensorViewImpl","ComputeContextImpl","init_init","_TensorViewImpl","elementCount","contextDataOffset","dataIndex","inputCount","inputsOutputsMapping","mappedInputs","createTemporaryOutput","gpuAdapter","jsepInit","isSourceGpu","sessionHandle","initOrt","activeSessions","getSessionInputOutputCount","prepareInputOutputTensor","loggingLevel","initJsep","powerPreference","forceFallbackAdapter","modelDataOffset","modelData","modelDataLength","ioBindingHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","loadingPromises","path","provider","webnnOptions","gpuDevice","enableGraphCapture","inputNames","outputNames","outputPreferredLocations","nameString","bindingState","buf","ioBindingState","tensorHandles","rawData","dataByteLength","registerBuffer","registerMLTensor","dimsOffset","outputTensors","inputOutputBound","runOptionsAllocs","inputTensorHandles","outputTensorHandles","inputOutputAllocs","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","handle","outputPreferredLocationsEncoded","beforeGetTensorDataStack","tensorDataOffset","keepOutputTensor","dimsLength","preferredLocation","stringData","nextOffset","maxBytesToRead","getBuffer","ensureTensor","profileFileName","tensors","isProxy","proxyWorker","temporaryObjectUrl","initWasmCallbacks","queuedCallbacks","enqueueCallbacks","ensureWorker","onProxyWorkerMessage","initializeWebAssemblyAndOrtRuntime","initializeOrtEp","init_proxy_wrapper","callbacks","queue","worker","transferable","serializableInputs","encodeTensorMetadata","decodeTensorMetadata","OnnxruntimeWebAssemblySessionHandler","init_session_handler_inference","getName","pathOrBuffer","inputArray","kvp","outputArray","resultMap","backend_wasm_exports","OnnxruntimeWebAssemblyBackend","initializeFlags","wasmBackend","init_backend_wasm","numCpuLogicalCores","lib_default"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Backend } from './backend.js';\nimport { InferenceSession } from './inference-session.js';\n\ninterface BackendInfo {\n  backend: Backend;\n  priority: number;\n\n  initPromise?: Promise<void>;\n  initialized?: boolean;\n  aborted?: boolean;\n  error?: string;\n}\n\nconst backends: Map<string, BackendInfo> = new Map();\nconst backendsSortedByPriority: string[] = [];\n\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\n  if (backend && typeof backend.init === 'function' && typeof backend.createInferenceSessionHandler === 'function') {\n    const currentBackend = backends.get(name);\n    if (currentBackend === undefined) {\n      backends.set(name, { backend, priority });\n    } else if (currentBackend.priority > priority) {\n      // same name is already registered with a higher priority. skip registeration.\n      return;\n    } else if (currentBackend.priority === priority) {\n      if (currentBackend.backend !== backend) {\n        throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n      }\n    }\n\n    if (priority >= 0) {\n      const i = backendsSortedByPriority.indexOf(name);\n      if (i !== -1) {\n        backendsSortedByPriority.splice(i, 1);\n      }\n\n      for (let i = 0; i < backendsSortedByPriority.length; i++) {\n        if (backends.get(backendsSortedByPriority[i])!.priority <= priority) {\n          backendsSortedByPriority.splice(i, 0, name);\n          return;\n        }\n      }\n      backendsSortedByPriority.push(name);\n    }\n    return;\n  }\n\n  throw new TypeError('not a valid backend');\n};\n\n/**\n * Try to resolve and initialize a backend.\n *\n * @param backendName - the name of the backend.\n * @returns the backend instance if resolved and initialized successfully, or an error message if failed.\n */\nconst tryResolveAndInitializeBackend = async (backendName: string): Promise<Backend | string> => {\n  const backendInfo = backends.get(backendName);\n  if (!backendInfo) {\n    return 'backend not found.';\n  }\n\n  if (backendInfo.initialized) {\n    return backendInfo.backend;\n  } else if (backendInfo.aborted) {\n    return backendInfo.error!;\n  } else {\n    const isInitializing = !!backendInfo.initPromise;\n    try {\n      if (!isInitializing) {\n        backendInfo.initPromise = backendInfo.backend.init(backendName);\n      }\n      await backendInfo.initPromise;\n      backendInfo.initialized = true;\n      return backendInfo.backend;\n    } catch (e) {\n      if (!isInitializing) {\n        backendInfo.error = `${e}`;\n        backendInfo.aborted = true;\n      }\n      return backendInfo.error!;\n    } finally {\n      delete backendInfo.initPromise;\n    }\n  }\n};\n\n/**\n * Resolve execution providers from the specific session options.\n *\n * @param options - the session options object.\n * @returns a promise that resolves to a tuple of an initialized backend instance and a session options object with\n * filtered EP list.\n *\n * @ignore\n */\nexport const resolveBackendAndExecutionProviders = async (\n  options: InferenceSession.SessionOptions,\n): Promise<[backend: Backend, options: InferenceSession.SessionOptions]> => {\n  // extract backend hints from session options\n  const eps = options.executionProviders || [];\n  const backendHints = eps.map((i) => (typeof i === 'string' ? i : i.name));\n  const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n\n  // try to resolve and initialize all requested backends\n  let backend: Backend | undefined;\n  const errors = [];\n  const availableBackendNames = new Set<string>();\n  for (const backendName of backendNames) {\n    const resolveResult = await tryResolveAndInitializeBackend(backendName);\n    if (typeof resolveResult === 'string') {\n      errors.push({ name: backendName, err: resolveResult });\n    } else {\n      if (!backend) {\n        backend = resolveResult;\n      }\n      if (backend === resolveResult) {\n        availableBackendNames.add(backendName);\n      }\n    }\n  }\n\n  // if no backend is available, throw error.\n  if (!backend) {\n    throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(', ')}`);\n  }\n\n  // for each explicitly requested backend, if it's not available, output warning message.\n  for (const { name, err } of errors) {\n    if (backendHints.includes(name)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `removing requested execution provider \"${name}\" from session options because it is not available: ${err}`,\n      );\n    }\n  }\n\n  const filteredEps = eps.filter((i) => availableBackendNames.has(typeof i === 'string' ? i : i.name));\n\n  return [\n    backend,\n    new Proxy(options, {\n      get: (target, prop) => {\n        if (prop === 'executionProviders') {\n          return filteredEps;\n        }\n        return Reflect.get(target, prop);\n      },\n    }),\n  ];\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\n\n/**\n * @ignore\n */\nexport declare namespace SessionHandler {\n  type FeedsType = { [name: string]: OnnxValue };\n  type FetchesType = { [name: string]: OnnxValue | null };\n  type ReturnType = { [name: string]: OnnxValue };\n}\n\n/**\n * Represents shared SessionHandler functionality\n *\n * @ignore\n */\ninterface SessionHandler {\n  dispose(): Promise<void>;\n\n  readonly inputNames: readonly string[];\n  readonly outputNames: readonly string[];\n}\n\n/**\n * Represent a handler instance of an inference session.\n *\n * @ignore\n */\nexport interface InferenceSessionHandler extends SessionHandler {\n  startProfiling(): void;\n  endProfiling(): void;\n\n  run(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType>;\n}\n\n/**\n * Represent a backend that provides implementation of model inferencing.\n *\n * @ignore\n */\nexport interface Backend {\n  /**\n   * Initialize the backend asynchronously. Should throw when failed.\n   */\n  init(backendName: string): Promise<void>;\n\n  createInferenceSessionHandler(\n    uriOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n}\n\nexport { registerBackend } from './backend-impl.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.21.0-dev.20250206-d981b153d3';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from './env.js';\nimport { version } from './version.js';\n\ntype LogLevelType = Env['logLevel'];\n\nlet logLevelValue: Required<LogLevelType> = 'warning';\n\nexport const env: Env = {\n  wasm: {} as Env.WebAssemblyFlags,\n  webgl: {} as Env.WebGLFlags,\n  webgpu: {} as Env.WebGpuFlags,\n  versions: { common: version },\n\n  set logLevel(value: LogLevelType) {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n    logLevelValue = value;\n  },\n  get logLevel(): Required<LogLevelType> {\n    return logLevelValue;\n  },\n};\n\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', { enumerable: true });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env as envImpl } from './env-impl.js';\nimport { TryGetGlobalType } from './type-helper.js';\n\nexport declare namespace Env {\n  export type WasmPathPrefix = string;\n  export interface WasmFilePaths {\n    /**\n     * Specify the override path for the main .wasm file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .wasm file is:\n     * - `ort-wasm-simd-threaded.wasm` for default build\n     * - `ort-wasm-simd-threaded.jsep.wasm` for JSEP build (with WebGPU and WebNN)\n     */\n    wasm?: URL | string;\n    /**\n     * Specify the override path for the main .mjs file.\n     *\n     * This path should be an absolute path.\n     *\n     * If not modified, the filename of the .mjs file is:\n     * - `ort-wasm-simd-threaded.mjs` for default build\n     * - `ort-wasm-simd-threaded.jsep.mjs` for JSEP build (with WebGPU and WebNN)\n     */\n    mjs?: URL | string;\n  }\n  export type WasmPrefixOrFilePaths = WasmPathPrefix | WasmFilePaths;\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @defaultValue `true`\n     *\n     * @deprecated This property is deprecated. Since SIMD is supported by all major JavaScript engines, non-SIMD\n     * build is no longer provided. This property will be removed in future release.\n     */\n    simd?: boolean;\n\n    /**\n     * set or get a boolean value indicating whether to enable trace.\n     *\n     * @defaultValue `false`\n     *\n     * @deprecated Use `env.trace` instead. If `env.trace` is set, this property will be ignored.\n     */\n    trace?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm/.mjs files, or an object of overrides for both .wasm/.mjs file. The override\n     * path should be an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set a custom buffer which contains the WebAssembly binary. If this property is set, the `wasmPaths` property will\n     * be ignored.\n     */\n    wasmBinary?: ArrayBufferLike | Uint8Array;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl' | 'webgl2';\n    /**\n     * Get the WebGL rendering context.\n     */\n    readonly context: WebGLRenderingContext;\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly' | 'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n\n  export interface WebGpuProfilingDataV1TensorMetadata {\n    dims: readonly number[];\n    dataType: string;\n  }\n  export interface WebGpuProfilingDataV1 {\n    version: 1;\n    inputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    outputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    kernelId: number;\n    kernelType: string;\n    kernelName: string;\n    programName: string;\n    startTime: number;\n    endTime: number;\n  }\n\n  export type WebGpuProfilingData = WebGpuProfilingDataV1;\n\n  export interface WebGpuFlags {\n    /**\n     * Set or get the profiling mode.\n     *\n     * @deprecated Use `env.webgpu.profiling.mode` instead. If `env.webgpu.profiling.mode` is set, this property will be\n     * ignored.\n     */\n    profilingMode?: 'off' | 'default';\n    /**\n     * Set or get the profiling configuration.\n     */\n    profiling: {\n      /**\n       * Set or get the profiling mode.\n       *\n       * @defaultValue `'off'`\n       */\n      mode?: 'off' | 'default';\n\n      /**\n       * Set or get a callback function when a profiling data is received. If not set, the profiling data will be\n       * printed to console.\n       */\n      ondata?: (data: WebGpuProfilingData) => void;\n    };\n    /**\n     * Set or get the power preference.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     *\n     * @deprecated Create your own GPUAdapter, use it to create a GPUDevice instance and set {@link device} property if\n     * you want to use a specific power preference.\n     */\n    powerPreference?: 'low-power' | 'high-performance';\n    /**\n     * Set or get the force fallback adapter flag.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     *\n     * @deprecated Create your own GPUAdapter, use it to create a GPUDevice instance and set {@link device} property if\n     * you want to use a specific fallback option.\n     */\n    forceFallbackAdapter?: boolean;\n    /**\n     * Set or get the adapter for WebGPU.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as the GPU adapter for the underlying WebGPU backend to create GPU device.\n     *\n     * If this property is not set, it will be available to get after the first WebGPU inference session is created. The\n     * value will be the GPU adapter that created by the underlying WebGPU backend.\n     *\n     * When use with TypeScript, the type of this property is `GPUAdapter` defined in \"@webgpu/types\".\n     *\n     * @deprecated It is no longer recommended to use this property. The latest WebGPU spec adds `GPUDevice.adapterInfo`\n     * (https://www.w3.org/TR/webgpu/#dom-gpudevice-adapterinfo), which allows to get the adapter information from the\n     * device. When it's available, there is no need to set/get the {@link adapter} property.\n     */\n    adapter: TryGetGlobalType<'GPUAdapter'>;\n    /**\n     * Set or get the GPU device for WebGPU.\n     *\n     * There are 3 valid scenarios of accessing this property:\n     * - Set a value before the first WebGPU inference session is created. The value will be used by the WebGPU backend\n     * to perform calculations. If the value is not a `GPUDevice` object, an error will be thrown.\n     * - Get the value before the first WebGPU inference session is created. This will try to create a new GPUDevice\n     * instance. Returns a `Promise` that resolves to a `GPUDevice` object.\n     * - Get the value after the first WebGPU inference session is created. Returns a resolved `Promise` to the\n     * `GPUDevice` object used by the WebGPU backend.\n     */\n    get device(): Promise<TryGetGlobalType<'GPUDevice'>>;\n    set device(value: TryGetGlobalType<'GPUDevice'>);\n    /**\n     * Set or get whether validate input content.\n     *\n     * @defaultValue `false`\n     */\n    validateInputContent?: boolean;\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose' | 'info' | 'warning' | 'error' | 'fatal';\n\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * set or get a boolean value indicating whether to enable trace.\n   *\n   * @defaultValue `false`\n   */\n  trace?: boolean;\n\n  /**\n   * Get version of the current package.\n   */\n  readonly versions: {\n    readonly common: string;\n    readonly web?: string;\n    readonly node?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    readonly 'react-native'?: string;\n  };\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  readonly wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  readonly webgl: Env.WebGLFlags;\n\n  /**\n   * Represent a set of flags for WebGPU\n   */\n  readonly webgpu: Env.WebGpuFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = envImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorToDataUrlOptions, TensorToImageDataOptions } from './tensor-conversion.js';\nimport { Tensor } from './tensor.js';\n\n/**\n * implementation of Tensor.toDataURL()\n */\nexport const tensorToDataURL = (tensor: Tensor, options?: TensorToDataUrlOptions): string => {\n  const canvas = typeof document !== 'undefined' ? document.createElement('canvas') : new OffscreenCanvas(1, 1);\n  canvas.width = tensor.dims[3];\n  canvas.height = tensor.dims[2];\n  const pixels2DContext = canvas.getContext('2d') as\n    | CanvasRenderingContext2D\n    | OffscreenCanvasRenderingContext2D\n    | null;\n\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[3];\n    } else {\n      // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n    }\n\n    const inputformat = options?.format !== undefined ? options.format : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof norm.mean === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof norm.bias === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    // Default pointer assignments\n    let rTensorPointer = 0,\n      gTensorPointer = stride,\n      bTensorPointer = stride * 2,\n      aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const R = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0]; // R value\n        const G = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1]; // G value\n        const B = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2]; // B value\n        const A = aTensorPointer === -1 ? 255 : ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3]; // A value\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n        pixels2DContext.fillRect(j, i, 1, 1);\n      }\n    }\n    if ('toDataURL' in canvas) {\n      return canvas.toDataURL();\n    } else {\n      throw new Error('toDataURL is not supported');\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n};\n\n/**\n * implementation of Tensor.toImageData()\n */\nexport const tensorToImageData = (tensor: Tensor, options?: TensorToImageDataOptions): ImageData => {\n  const pixels2DContext =\n    typeof document !== 'undefined'\n      ? document.createElement('canvas').getContext('2d')\n      : (new OffscreenCanvas(1, 1).getContext('2d') as OffscreenCanvasRenderingContext2D);\n  let image: ImageData;\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    let channels: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[1];\n      channels = tensor.dims[3];\n    } else {\n      // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n      channels = tensor.dims[1];\n    }\n    const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof norm.mean === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof norm.bias === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    if (options !== undefined) {\n      if (\n        (options.format !== undefined && channels === 4 && options.format !== 'RGBA') ||\n        (channels === 3 && options.format !== 'RGB' && options.format !== 'BGR')\n      ) {\n        throw new Error(\"Tensor format doesn't match input tensor dims\");\n      }\n    }\n\n    // Default pointer assignments\n    const step = 4;\n    let rImagePointer = 0,\n      gImagePointer = 1,\n      bImagePointer = 2,\n      aImagePointer = 3;\n    let rTensorPointer = 0,\n      gTensorPointer = stride,\n      bTensorPointer = stride * 2,\n      aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    image = pixels2DContext.createImageData(width, height);\n\n    for (\n      let i = 0;\n      i < height * width;\n      rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++\n    ) {\n      image.data[rImagePointer] = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0]; // R value\n      image.data[gImagePointer] = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1]; // G value\n      image.data[bImagePointer] = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2]; // B value\n      image.data[aImagePointer] =\n        aTensorPointer === -1 ? 255 : ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3]; // A value\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n  return image;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  OptionsDimensions,\n  OptionsFormat,\n  OptionsNormalizationParameters,\n  OptionsTensorFormat,\n  OptionsTensorLayout,\n  TensorFromGpuBufferOptions,\n  TensorFromImageBitmapOptions,\n  TensorFromImageDataOptions,\n  TensorFromImageElementOptions,\n  TensorFromMLTensorOptions,\n  TensorFromTextureOptions,\n  TensorFromUrlOptions,\n} from './tensor-factory.js';\nimport { Tensor } from './tensor-impl.js';\nimport { Tensor as TensorInterface } from './tensor.js';\n\ninterface BufferToTensorOptions\n  extends OptionsDimensions,\n    OptionsTensorLayout,\n    OptionsNormalizationParameters,\n    OptionsFormat,\n    OptionsTensorFormat {}\n\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor = (buffer: Uint8ClampedArray | undefined, options: BufferToTensorOptions): Tensor => {\n  if (buffer === undefined) {\n    throw new Error('Image buffer must be defined');\n  }\n  if (options.height === undefined || options.width === undefined) {\n    throw new Error('Image height and width must be defined');\n  }\n  if (options.tensorLayout === 'NHWC') {\n    throw new Error('NHWC Tensor layout is not supported yet');\n  }\n\n  const { height, width } = options;\n\n  const norm = options.norm ?? { mean: 255, bias: 0 };\n  let normMean: [number, number, number, number];\n  let normBias: [number, number, number, number];\n\n  if (typeof norm.mean === 'number') {\n    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n  } else {\n    normMean = [norm.mean![0], norm.mean![1], norm.mean![2], norm.mean![3] ?? 255];\n  }\n\n  if (typeof norm.bias === 'number') {\n    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n  } else {\n    normBias = [norm.bias![0], norm.bias![1], norm.bias![2], norm.bias![3] ?? 0];\n  }\n\n  const inputformat = options.format !== undefined ? options.format : 'RGBA';\n  // default value is RGBA since imagedata and HTMLImageElement uses it\n\n  const outputformat =\n    options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n  const stride = height * width;\n  const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n\n  // Default pointer assignments\n  let step = 4,\n    rImagePointer = 0,\n    gImagePointer = 1,\n    bImagePointer = 2,\n    aImagePointer = 3;\n  let rTensorPointer = 0,\n    gTensorPointer = stride,\n    bTensorPointer = stride * 2,\n    aTensorPointer = -1;\n\n  // Updating the pointer assignments based on the input image format\n  if (inputformat === 'RGB') {\n    step = 3;\n    rImagePointer = 0;\n    gImagePointer = 1;\n    bImagePointer = 2;\n    aImagePointer = -1;\n  }\n\n  // Updating the pointer assignments based on the output tensor format\n  if (outputformat === 'RGBA') {\n    aTensorPointer = stride * 3;\n  } else if (outputformat === 'RBG') {\n    rTensorPointer = 0;\n    bTensorPointer = stride;\n    gTensorPointer = stride * 2;\n  } else if (outputformat === 'BGR') {\n    bTensorPointer = 0;\n    gTensorPointer = stride;\n    rTensorPointer = stride * 2;\n  }\n\n  for (\n    let i = 0;\n    i < stride;\n    i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step\n  ) {\n    float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n    float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n    float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n    if (aTensorPointer !== -1 && aImagePointer !== -1) {\n      float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n    }\n  }\n\n  // Float32Array -> ort.Tensor\n  const outputTensor =\n    outputformat === 'RGBA'\n      ? new Tensor('float32', float32Data, [1, 4, height, width])\n      : new Tensor('float32', float32Data, [1, 3, height, width]);\n  return outputTensor;\n};\n\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async (\n  image: ImageData | HTMLImageElement | ImageBitmap | string,\n  options?:\n    | TensorFromImageDataOptions\n    | TensorFromImageElementOptions\n    | TensorFromImageBitmapOptions\n    | TensorFromUrlOptions,\n): Promise<Tensor> => {\n  // checking the type of image object\n  const isHTMLImageEle = typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement;\n  const isImageDataEle = typeof ImageData !== 'undefined' && image instanceof ImageData;\n  const isImageBitmap = typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap;\n  const isString = typeof image === 'string';\n\n  let data: Uint8ClampedArray | undefined;\n  let bufferToTensorOptions: BufferToTensorOptions = options ?? {};\n\n  const createCanvas = () => {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(1, 1);\n    } else {\n      throw new Error('Canvas is not supported');\n    }\n  };\n  const createCanvasContext = (canvas: HTMLCanvasElement | OffscreenCanvas) => {\n    if (typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement) {\n      return canvas.getContext('2d');\n    } else if (canvas instanceof OffscreenCanvas) {\n      return canvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    } else {\n      return null;\n    }\n  };\n  // filling and checking image configuration options\n  if (isHTMLImageEle) {\n    // HTMLImageElement - image object - format is RGBA by default\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      let height = image.height;\n      let width = image.width;\n      if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n        height = options.resizedHeight;\n        width = options.resizedWidth;\n      }\n\n      if (options !== undefined) {\n        bufferToTensorOptions = options;\n        if (options.tensorFormat !== undefined) {\n          throw new Error('Image input config format must be RGBA for HTMLImageElement');\n        } else {\n          bufferToTensorOptions.tensorFormat = 'RGBA';\n        }\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      } else {\n        bufferToTensorOptions.tensorFormat = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      }\n\n      pixels2DContext.drawImage(image, 0, 0);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isImageDataEle) {\n    let height: number;\n    let width: number;\n\n    if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n      height = options.resizedHeight;\n      width = options.resizedWidth;\n    } else {\n      height = image.height;\n      width = image.width;\n    }\n\n    if (options !== undefined) {\n      bufferToTensorOptions = options;\n    }\n    bufferToTensorOptions.format = 'RGBA';\n    bufferToTensorOptions.height = height;\n    bufferToTensorOptions.width = width;\n\n    if (options !== undefined) {\n      const tempCanvas = createCanvas();\n\n      tempCanvas.width = width;\n      tempCanvas.height = height;\n\n      const pixels2DContext = createCanvasContext(tempCanvas);\n\n      if (pixels2DContext != null) {\n        pixels2DContext.putImageData(image, 0, 0);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n      } else {\n        throw new Error('Can not access image data');\n      }\n    } else {\n      data = image.data;\n    }\n  } else if (isImageBitmap) {\n    // ImageBitmap - image object - format must be provided by user\n    if (options === undefined) {\n      throw new Error('Please provide image config with format for Imagebitmap');\n    }\n\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      const height = image.height;\n      const width = image.width;\n      pixels2DContext.drawImage(image, 0, 0, width, height);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n      bufferToTensorOptions.height = height;\n      bufferToTensorOptions.width = width;\n      return bufferToTensor(data, bufferToTensorOptions);\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isString) {\n    return new Promise((resolve, reject) => {\n      const canvas = createCanvas();\n      const context = createCanvasContext(canvas);\n      if (!image || !context) {\n        return reject();\n      }\n      const newImage = new Image();\n      newImage.crossOrigin = 'Anonymous';\n      newImage.src = image;\n      newImage.onload = () => {\n        canvas.width = newImage.width;\n        canvas.height = newImage.height;\n        context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n        const img = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        bufferToTensorOptions.height = canvas.height;\n        bufferToTensorOptions.width = canvas.width;\n        resolve(bufferToTensor(img.data, bufferToTensorOptions));\n      };\n    });\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n\n  if (data !== undefined) {\n    return bufferToTensor(data, bufferToTensorOptions);\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n};\n\n/**\n * implementation of Tensor.fromTexture().\n */\nexport const tensorFromTexture = <T extends TensorInterface.TextureDataTypes>(\n  texture: TensorInterface.TextureType,\n  options: TensorFromTextureOptions<T>,\n): Tensor => {\n  const { width, height, download, dispose } = options;\n  // Always assume RGBAF32. TODO: support different texture format\n  const dims = [1, height, width, 4];\n  return new Tensor({ location: 'texture', type: 'float32', texture, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nexport const tensorFromGpuBuffer = <T extends TensorInterface.GpuBufferDataTypes>(\n  gpuBuffer: TensorInterface.GpuBufferType,\n  options: TensorFromGpuBufferOptions<T>,\n): Tensor => {\n  const { dataType, dims, download, dispose } = options;\n  return new Tensor({ location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromMLTensor().\n */\nexport const tensorFromMLTensor = <T extends TensorInterface.MLTensorDataTypes>(\n  mlTensor: TensorInterface.MLTensorType,\n  options: TensorFromMLTensorOptions<T>,\n): Tensor => {\n  const { dataType, dims, download, dispose } = options;\n  return new Tensor({ location: 'ml-tensor', type: dataType ?? 'float32', mlTensor, dims, download, dispose });\n};\n\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nexport const tensorFromPinnedBuffer = <T extends TensorInterface.CpuPinnedDataTypes>(\n  type: T,\n  buffer: TensorInterface.DataTypeMap[T],\n  dims?: readonly number[],\n): Tensor => new Tensor({ location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length] });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from './tensor.js';\n\nexport type SupportedTypedArrayConstructors =\n  | Float32ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int8ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int16ArrayConstructor\n  | Int32ArrayConstructor\n  | BigInt64ArrayConstructor\n  | Uint8ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor\n  | BigUint64ArrayConstructor;\nexport type SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\n  ['float32', Float32Array],\n  ['uint8', Uint8Array],\n  ['int8', Int8Array],\n  ['uint16', Uint16Array],\n  ['int16', Int16Array],\n  ['int32', Int32Array],\n  ['bool', Uint8Array],\n  ['float64', Float64Array],\n  ['uint32', Uint32Array],\n  ['int4', Uint8Array],\n  ['uint4', Uint8Array],\n]);\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, Tensor.Type>([\n  [Float32Array, 'float32'],\n  [Uint8Array, 'uint8'],\n  [Int8Array, 'int8'],\n  [Uint16Array, 'uint16'],\n  [Int16Array, 'int16'],\n  [Int32Array, 'int32'],\n  [Float64Array, 'float64'],\n  [Uint32Array, 'uint32'],\n]);\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// the following code allows delaying execution of BigInt/Float16Array checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt/Float16Array\n// polyfill if available.\nlet isTypedArrayChecked = false;\nexport const checkTypedArray = () => {\n  if (!isTypedArrayChecked) {\n    isTypedArrayChecked = true;\n    const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && BigInt64Array.from;\n    const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && BigUint64Array.from;\n    const isFloat16ArrayAvailable = typeof Float16Array !== 'undefined' && Float16Array.from;\n\n    if (isBigInt64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n    }\n    if (isBigUint64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n    }\n    if (isFloat16ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Float16Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, 'float16');\n    } else {\n      // if Float16Array is not available, use 'Uint16Array' to store the data.\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Uint16Array);\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  CpuPinnedConstructorParameters,\n  GpuBufferConstructorParameters,\n  MLTensorConstructorParameters,\n  TextureConstructorParameters,\n} from './tensor-factory.js';\nimport { Tensor } from './tensor-impl.js';\n\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims: readonly unknown[]): number => {\n  let size = 1;\n  for (let i = 0; i < dims.length; i++) {\n    const dim = dims[i];\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n    }\n    if (dim < 0) {\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n    }\n    size *= dim;\n  }\n  return size;\n};\n\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor: Tensor, dims: readonly number[]): Tensor => {\n  switch (tensor.location) {\n    case 'cpu':\n      return new Tensor(tensor.type, tensor.data, dims);\n    case 'cpu-pinned':\n      return new Tensor({\n        location: 'cpu-pinned',\n        data: tensor.data as CpuPinnedConstructorParameters['data'],\n        type: tensor.type as CpuPinnedConstructorParameters['type'],\n        dims,\n      });\n    case 'texture':\n      return new Tensor({\n        location: 'texture',\n        texture: tensor.texture,\n        type: tensor.type as TextureConstructorParameters['type'],\n        dims,\n      });\n    case 'gpu-buffer':\n      return new Tensor({\n        location: 'gpu-buffer',\n        gpuBuffer: tensor.gpuBuffer,\n        type: tensor.type as GpuBufferConstructorParameters['type'],\n        dims,\n      });\n    case 'ml-tensor':\n      return new Tensor({\n        location: 'ml-tensor',\n        mlTensor: tensor.mlTensor,\n        type: tensor.type as MLTensorConstructorParameters['type'],\n        dims,\n      });\n    default:\n      throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { tensorToDataURL, tensorToImageData } from './tensor-conversion-impl.js';\nimport { TensorToDataUrlOptions, TensorToImageDataOptions } from './tensor-conversion.js';\nimport {\n  tensorFromGpuBuffer,\n  tensorFromImage,\n  tensorFromMLTensor,\n  tensorFromPinnedBuffer,\n  tensorFromTexture,\n} from './tensor-factory-impl.js';\nimport {\n  CpuPinnedConstructorParameters,\n  GpuBufferConstructorParameters,\n  MLTensorConstructorParameters,\n  TensorFromGpuBufferOptions,\n  TensorFromImageBitmapOptions,\n  TensorFromImageDataOptions,\n  TensorFromImageElementOptions,\n  TensorFromMLTensorOptions,\n  TensorFromTextureOptions,\n  TensorFromUrlOptions,\n  TextureConstructorParameters,\n} from './tensor-factory.js';\nimport {\n  checkTypedArray,\n  NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP,\n  NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP,\n  SupportedTypedArray,\n  SupportedTypedArrayConstructors,\n} from './tensor-impl-type-mapping.js';\nimport { calculateSize, tensorReshape } from './tensor-utils-impl.js';\nimport { Tensor as TensorInterface } from './tensor.js';\n\n// type aliases for those exported from Tensor interface\n\ntype TensorType = TensorInterface.Type;\ntype TensorDataType = TensorInterface.DataType;\ntype TensorDataLocation = TensorInterface.DataLocation;\ntype TensorTextureType = TensorInterface.TextureType;\ntype TensorGpuBufferType = TensorInterface.GpuBufferType;\ntype TensorMLTensorType = TensorInterface.MLTensorType;\n\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nexport class Tensor implements TensorInterface {\n  // #region constructors\n\n  /**\n   * Construct a new CPU tensor object from the given type, data and dims.\n   */\n  constructor(\n    type: TensorType,\n    data: TensorDataType | Uint8ClampedArray | readonly string[] | readonly number[] | readonly boolean[],\n    dims?: readonly number[],\n  );\n  /**\n   * Construct a new CPU tensor object from the given data and dims. Type is inferred from data.\n   */\n  constructor(\n    data: TensorDataType | Uint8ClampedArray | readonly string[] | readonly boolean[],\n    dims?: readonly number[],\n  );\n  /**\n   * Construct a new tensor object from the pinned CPU data with the given type and dims.\n   *\n   * Tensor's location will be set to 'cpu-pinned'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: CpuPinnedConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGL texture with the given type and dims.\n   *\n   * Tensor's location will be set to 'texture'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: TextureConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGPU buffer with the given type and dims.\n   *\n   * Tensor's location will be set to 'gpu-buffer'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: GpuBufferConstructorParameters);\n\n  /**\n   * Construct a new tensor object from the WebNN MLTensor with the given type and dims.\n   *\n   * Tensor's location will be set to 'ml-tensor'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: MLTensorConstructorParameters);\n\n  /**\n   * implementation.\n   */\n  constructor(\n    arg0:\n      | TensorType\n      | TensorDataType\n      | Uint8ClampedArray\n      | readonly string[]\n      | readonly boolean[]\n      | CpuPinnedConstructorParameters\n      | TextureConstructorParameters\n      | GpuBufferConstructorParameters\n      | MLTensorConstructorParameters,\n    arg1?: TensorDataType | Uint8ClampedArray | readonly number[] | readonly string[] | readonly boolean[],\n    arg2?: readonly number[],\n  ) {\n    // perform one-time check for BigInt/Float16Array support\n    checkTypedArray();\n\n    let type: TensorType;\n    let dims: readonly number[];\n\n    if (typeof arg0 === 'object' && 'location' in arg0) {\n      //\n      // constructing tensor from specific location\n      //\n      this.dataLocation = arg0.location;\n      type = arg0.type;\n      dims = arg0.dims;\n      switch (arg0.location) {\n        case 'cpu-pinned': {\n          const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n          if (!expectedTypedArrayConstructor) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n          }\n          if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n            throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n          }\n          this.cpuData = arg0.data;\n          break;\n        }\n        case 'texture': {\n          if (type !== 'float32') {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n          }\n          this.gpuTextureData = arg0.texture;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'gpu-buffer': {\n          if (\n            type !== 'float32' &&\n            type !== 'float16' &&\n            type !== 'int32' &&\n            type !== 'int64' &&\n            type !== 'uint32' &&\n            type !== 'uint8' &&\n            type !== 'bool' &&\n            type !== 'uint4' &&\n            type !== 'int4'\n          ) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n          }\n          this.gpuBufferData = arg0.gpuBuffer;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'ml-tensor': {\n          if (\n            type !== 'float32' &&\n            type !== 'float16' &&\n            type !== 'int32' &&\n            type !== 'int64' &&\n            type !== 'uint32' &&\n            type !== 'uint64' &&\n            type !== 'int8' &&\n            type !== 'uint8' &&\n            type !== 'bool' &&\n            type !== 'uint4' &&\n            type !== 'int4'\n          ) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from MLTensor`);\n          }\n          this.mlTensorData = arg0.mlTensor;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        default:\n          throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n      }\n    } else {\n      //\n      // constructing tensor of location 'cpu'\n      //\n      let data: TensorDataType;\n      let maybeDims: typeof arg1 | typeof arg2;\n      // check whether arg0 is type or data\n      if (typeof arg0 === 'string') {\n        //\n        // Override: constructor(type, data, ...)\n        //\n        type = arg0;\n        maybeDims = arg2;\n        if (arg0 === 'string') {\n          // string tensor\n          if (!Array.isArray(arg1)) {\n            throw new TypeError(\"A string tensor's data must be a string array.\");\n          }\n          // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n          // error will be populated at inference\n          data = arg1;\n        } else {\n          // numeric tensor\n          const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n          if (typedArrayConstructor === undefined) {\n            throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n          }\n          if (Array.isArray(arg1)) {\n            if ((arg0 === 'float16' && typedArrayConstructor === Uint16Array) || arg0 === 'uint4' || arg0 === 'int4') {\n              // - 'float16':\n              //   When no Float16Array polyfill is used, we cannot create 'float16' tensor from number array.\n              //\n              //   Throw error here because when user try to use number array as data,\n              //   e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n              //   Uint16Array.from(arg1) which generates wrong data.\n              //\n              // - 'uint4' and 'int4':\n              //   Uint8Array.from(arg1) will generate wrong data for 'uint4' and 'int4' tensor.\n              //\n              throw new TypeError(\n                `Creating a ${arg0} tensor from number array is not supported. Please use ${typedArrayConstructor.name} as data.`,\n              );\n            } else if (arg0 === 'uint64' || arg0 === 'int64') {\n              // use 'as any' here because:\n              // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n              // see https://github.com/microsoft/TypeScript/issues/17002\n              // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n              // does not accept parameter mapFn.\n              // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n              // type.\n\n              // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1, BigInt);\n            } else {\n              // assume 'arg1' is of type \"readonly number[]\" here.\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1);\n            }\n          } else if (arg1 instanceof typedArrayConstructor) {\n            data = arg1;\n          } else if (arg1 instanceof Uint8ClampedArray) {\n            if (arg0 === 'uint8') {\n              data = Uint8Array.from(arg1);\n            } else {\n              throw new TypeError(`A Uint8ClampedArray tensor's data must be type of uint8`);\n            }\n          } else {\n            throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n          }\n        }\n      } else {\n        //\n        // Override: constructor(data, ...)\n        //\n        maybeDims = arg1;\n        if (Array.isArray(arg0)) {\n          // only boolean[] and string[] is supported\n          if (arg0.length === 0) {\n            throw new TypeError('Tensor type cannot be inferred from an empty array.');\n          }\n          const firstElementType = typeof arg0[0];\n          if (firstElementType === 'string') {\n            type = 'string';\n            data = arg0;\n          } else if (firstElementType === 'boolean') {\n            type = 'bool';\n            // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n            // wrong type. We use 'as any' to make it happy.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data = Uint8Array.from(arg0 as any[]);\n          } else {\n            throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n          }\n        } else if (arg0 instanceof Uint8ClampedArray) {\n          type = 'uint8';\n          data = Uint8Array.from(arg0);\n        } else {\n          // get tensor type from TypedArray\n          const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(\n            arg0.constructor as SupportedTypedArrayConstructors,\n          );\n          if (mappedType === undefined) {\n            throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n          }\n          type = mappedType;\n          data = arg0 as SupportedTypedArray;\n        }\n      }\n\n      // type and data is processed, now processing dims\n      if (maybeDims === undefined) {\n        // assume 1-D tensor if dims omitted\n        maybeDims = [data.length];\n      } else if (!Array.isArray(maybeDims)) {\n        throw new TypeError(\"A tensor's dims must be a number array\");\n      }\n      dims = maybeDims as readonly number[];\n\n      this.cpuData = data;\n      this.dataLocation = 'cpu';\n    }\n\n    // perform check on dims\n    const size = calculateSize(dims);\n    // if data is on CPU, check whether data length matches tensor size\n    if (this.cpuData && size !== this.cpuData.length) {\n      if ((type === 'uint4' || type === 'int4') && Math.ceil(size / 2) === this.cpuData.length) {\n        // for (u)int4, the data length is half of the tensor size. So we check this special case when size is odd.\n      } else {\n        throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n      }\n    }\n\n    this.type = type;\n    this.dims = dims;\n    this.size = size;\n  }\n  // #endregion\n\n  // #region factory\n  static async fromImage(\n    image: ImageData | HTMLImageElement | ImageBitmap | string,\n    options?:\n      | TensorFromImageDataOptions\n      | TensorFromImageElementOptions\n      | TensorFromImageBitmapOptions\n      | TensorFromUrlOptions,\n  ): Promise<TensorInterface> {\n    return tensorFromImage(image, options);\n  }\n\n  static fromTexture<T extends TensorInterface.TextureDataTypes>(\n    texture: TensorTextureType,\n    options: TensorFromTextureOptions<T>,\n  ): TensorInterface {\n    return tensorFromTexture(texture, options);\n  }\n\n  static fromGpuBuffer<T extends TensorInterface.GpuBufferDataTypes>(\n    gpuBuffer: TensorGpuBufferType,\n    options: TensorFromGpuBufferOptions<T>,\n  ): TensorInterface {\n    return tensorFromGpuBuffer(gpuBuffer, options);\n  }\n\n  static fromMLTensor<T extends TensorInterface.MLTensorDataTypes>(\n    mlTensor: TensorMLTensorType,\n    options: TensorFromMLTensorOptions<T>,\n  ): TensorInterface {\n    return tensorFromMLTensor(mlTensor, options);\n  }\n\n  static fromPinnedBuffer<T extends TensorInterface.CpuPinnedDataTypes>(\n    type: T,\n    buffer: TensorInterface.DataTypeMap[T],\n    dims?: readonly number[],\n  ): Tensor {\n    return tensorFromPinnedBuffer(type, buffer, dims);\n  }\n\n  // #endregion\n\n  // #region conversions\n  toDataURL(options?: TensorToDataUrlOptions): string {\n    return tensorToDataURL(this, options);\n  }\n\n  toImageData(options?: TensorToImageDataOptions): ImageData {\n    return tensorToImageData(this, options);\n  }\n  // #endregion\n\n  // #region public fields\n  readonly dims: readonly number[];\n  readonly type: TensorType;\n  readonly size: number;\n  // #endregion\n\n  // #region private fields\n\n  /**\n   * stores the location of the data.\n   */\n  private dataLocation: TensorDataLocation;\n\n  /**\n   * stores the data on CPU, if location is 'cpu' or 'cpu-pinned'. otherwise empty.\n   */\n  private cpuData?: TensorDataType;\n\n  /**\n   * stores the underlying texture when location is 'texture'. otherwise empty.\n   */\n  private gpuTextureData?: TensorTextureType;\n\n  /**\n   * stores the underlying GPU buffer when location is 'gpu-buffer'. otherwise empty.\n   */\n  private gpuBufferData?: TensorGpuBufferType;\n\n  /**\n   * stores the underlying WebNN MLTensor when location is 'ml-tensor'. otherwise empty.\n   */\n  private mlTensorData?: TensorMLTensorType;\n\n  /**\n   * stores an optional downloader function to download data from GPU to CPU.\n   */\n  private downloader?(): Promise<TensorDataType>;\n\n  /**\n   * a flag indicating whether the data is being downloaded from GPU to CPU.\n   */\n  private isDownloading?: boolean;\n\n  /**\n   * stores an optional disposer function to dispose the underlying data.\n   */\n  private disposer?(): void;\n  // #endregion\n\n  // #region properties\n  get data(): TensorDataType {\n    this.ensureValid();\n    if (!this.cpuData) {\n      throw new Error(\n        'The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n          'or use `texture` or `gpuBuffer` property to access the GPU data directly.',\n      );\n    }\n    return this.cpuData;\n  }\n\n  get location(): TensorDataLocation {\n    return this.dataLocation;\n  }\n\n  get texture(): TensorTextureType {\n    this.ensureValid();\n    if (!this.gpuTextureData) {\n      throw new Error('The data is not stored as a WebGL texture.');\n    }\n    return this.gpuTextureData;\n  }\n\n  get gpuBuffer(): TensorGpuBufferType {\n    this.ensureValid();\n    if (!this.gpuBufferData) {\n      throw new Error('The data is not stored as a WebGPU buffer.');\n    }\n    return this.gpuBufferData;\n  }\n\n  get mlTensor(): TensorMLTensorType {\n    this.ensureValid();\n    if (!this.mlTensorData) {\n      throw new Error('The data is not stored as a WebNN MLTensor.');\n    }\n    return this.mlTensorData;\n  }\n  // #endregion\n\n  // #region methods\n\n  async getData(releaseData?: boolean): Promise<TensorDataType> {\n    this.ensureValid();\n    switch (this.dataLocation) {\n      case 'cpu':\n      case 'cpu-pinned':\n        return this.data;\n      case 'texture':\n      case 'gpu-buffer':\n      case 'ml-tensor': {\n        if (!this.downloader) {\n          throw new Error('The current tensor is not created with a specified data downloader.');\n        }\n        if (this.isDownloading) {\n          throw new Error('The current tensor is being downloaded.');\n        }\n        try {\n          this.isDownloading = true;\n          const data = await this.downloader();\n          this.downloader = undefined;\n          this.dataLocation = 'cpu';\n          this.cpuData = data;\n\n          if (releaseData && this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n          }\n\n          return data;\n        } finally {\n          this.isDownloading = false;\n        }\n      }\n      default:\n        throw new Error(`cannot get data from location: ${this.dataLocation}`);\n    }\n  }\n\n  dispose(): void {\n    if (this.isDownloading) {\n      throw new Error('The current tensor is being downloaded.');\n    }\n\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    this.cpuData = undefined;\n    this.gpuTextureData = undefined;\n    this.gpuBufferData = undefined;\n    this.mlTensorData = undefined;\n    this.downloader = undefined;\n    this.isDownloading = undefined;\n\n    this.dataLocation = 'none';\n  }\n\n  // #endregion\n\n  // #region tensor utilities\n  private ensureValid(): void {\n    if (this.dataLocation === 'none') {\n      throw new Error('The tensor is disposed.');\n    }\n  }\n\n  reshape(dims: readonly number[]): TensorInterface {\n    this.ensureValid();\n    if (this.downloader || this.disposer) {\n      throw new Error('Cannot reshape a tensor that owns GPU resource.');\n    }\n    return tensorReshape(this, dims);\n  }\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorFactory } from './tensor-factory.js';\nimport { Tensor as TensorImpl } from './tensor-impl.js';\nimport { TypedTensorUtils } from './tensor-utils.js';\nimport { TryGetGlobalType } from './type-helper.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/**\n * represent a basic tensor with specified dimensions and data type.\n */\ninterface TypedTensorBase<T extends Tensor.Type> {\n  /**\n   * Get the dimensions of the tensor.\n   */\n  readonly dims: readonly number[];\n  /**\n   * Get the data type of the tensor.\n   */\n  readonly type: T;\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is not on CPU (eg. it's in the form of WebGL texture or WebGPU buffer), throw error.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n  /**\n   * Get the location of the data.\n   */\n  readonly location: Tensor.DataLocation;\n  /**\n   * Get the WebGL texture that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGL texture, throw error.\n   */\n  readonly texture: Tensor.TextureType;\n  /**\n   * Get the WebGPU buffer that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGPU buffer, throw error.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n\n  /**\n   * Get the WebNN MLTensor that holds the tensor data.\n   *\n   * If the data is not in a WebNN MLTensor, throw error.\n   */\n  readonly mlTensor: Tensor.MLTensorType;\n\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is on CPU, returns the data immediately.\n   * If the data is on GPU, downloads the data and returns the promise.\n   *\n   * @param releaseData - whether release the data on GPU. Ignore if data is already on CPU.\n   */\n  getData(releaseData?: boolean): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * Dispose the tensor data.\n   *\n   * If the data is on CPU, remove its internal reference to the underlying data.\n   * If the data is on GPU, release the data on GPU.\n   *\n   * After calling this function, the tensor is considered no longer valid. Its location will be set to 'none'.\n   */\n  dispose(): void;\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    float32: Float32Array;\n    uint8: Uint8Array;\n    int8: Int8Array;\n    uint16: Uint16Array;\n    int16: Int16Array;\n    int32: Int32Array;\n    int64: BigInt64Array;\n    string: string[];\n    bool: Uint8Array;\n    float16: Uint16Array; // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: Float64Array;\n    uint32: Uint32Array;\n    uint64: BigUint64Array;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n    uint4: Uint8Array;\n    int4: Int8Array;\n  }\n\n  interface ElementTypeMap {\n    float32: number;\n    uint8: number;\n    int8: number;\n    uint16: number;\n    int16: number;\n    int32: number;\n    int64: bigint;\n    string: string;\n    bool: boolean;\n    float16: number; // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: number;\n    uint32: number;\n    uint64: bigint;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n    uint4: number;\n    int4: number;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * supported data types for constructing a tensor from a pinned CPU buffer\n   */\n  export type CpuPinnedDataTypes = Exclude<Tensor.Type, 'string'>;\n\n  /**\n   * type alias for WebGL texture\n   */\n  export type TextureType = WebGLTexture;\n\n  /**\n   * supported data types for constructing a tensor from a WebGL texture\n   */\n  export type TextureDataTypes = 'float32';\n\n  type GpuBufferTypeFallback = { size: number; mapState: 'unmapped' | 'pending' | 'mapped' };\n  /**\n   * type alias for WebGPU buffer\n   */\n  export type GpuBufferType = TryGetGlobalType<'GPUBuffer', GpuBufferTypeFallback>;\n\n  type MLTensorTypeFallback = { destroy(): void };\n  /**\n   * type alias for WebNN MLTensor\n   *\n   * The specification for WebNN's MLTensor is currently in flux.\n   */\n  export type MLTensorType = TryGetGlobalType<'MLTensor', MLTensorTypeFallback>;\n\n  /**\n   * supported data types for constructing a tensor from a WebGPU buffer\n   */\n  export type GpuBufferDataTypes = 'float32' | 'float16' | 'int32' | 'int64' | 'uint32' | 'uint8' | 'bool';\n\n  /**\n   * supported data types for constructing a tensor from a WebNN MLTensor\n   */\n  export type MLTensorDataTypes =\n    | 'float32'\n    | 'float16'\n    | 'int8'\n    | 'uint8'\n    | 'int32'\n    | 'uint32'\n    | 'int64'\n    | 'uint64'\n    | 'bool'\n    | 'uint4'\n    | 'int4';\n\n  /**\n   * represent where the tensor data is stored\n   */\n  export type DataLocation = 'none' | 'cpu' | 'cpu-pinned' | 'texture' | 'gpu-buffer' | 'ml-tensor';\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\n\n/**\n * type TensorConstructor defines the constructors of 'Tensor' to create CPU tensor instances.\n */\nexport interface TensorConstructor extends TensorFactory {\n  // #region CPU tensor - specify element type\n  /**\n   * Construct a new string tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: 'string',\n    data: Tensor.DataTypeMap['string'] | readonly string[],\n    dims?: readonly number[],\n  ): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: 'bool',\n    data: Tensor.DataTypeMap['bool'] | readonly boolean[],\n    dims?: readonly number[],\n  ): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new uint8 tensor object from a Uint8ClampedArray, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (type: 'uint8', data: Uint8ClampedArray, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new 64-bit integer typed tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new <T extends 'uint64' | 'int64'>(\n    type: T,\n    data: Tensor.DataTypeMap[T] | readonly bigint[] | readonly number[],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n\n  /**\n   * Construct a new numeric tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new <T extends Exclude<Tensor.Type, 'string' | 'bool' | 'uint64' | 'int64'>>(\n    type: T,\n    data: Tensor.DataTypeMap[T] | readonly number[],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n  // #endregion\n\n  // #region CPU tensor - infer element types\n\n  /**\n   * Construct a new float32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\n\n  /**\n   * Construct a new int8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint8ClampedArray, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\n\n  /**\n   * Construct a new int16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\n\n  /**\n   * Construct a new int32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\n\n  /**\n   * Construct a new int64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\n\n  /**\n   * Construct a new string tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new float64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\n\n  /**\n   * Construct a new uint32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\n\n  /**\n   * Construct a new uint64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\n\n  // #endregion\n\n  // #region CPU tensor - fall back to non-generic tensor type declaration\n\n  /**\n   * Construct a new tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (\n    type: Tensor.Type,\n    data: Tensor.DataType | readonly number[] | readonly string[] | readonly bigint[] | readonly boolean[],\n    dims?: readonly number[],\n  ): Tensor;\n\n  /**\n   * Construct a new tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new (data: Tensor.DataType, dims?: readonly number[]): Tensor;\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl as TensorConstructor;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from './env-impl.js';\n\n/**\n * @ignore\n */\nexport const TRACE = (deviceType: string, label: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  // eslint-disable-next-line no-console\n  console.timeStamp(`${deviceType}::ORT::${label}`);\n};\n\nconst TRACE_FUNC = (msg: string, extraMsg?: string) => {\n  const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n  let hasTraceFunc = false;\n  for (let i = 0; i < stack.length; i++) {\n    if (hasTraceFunc && !stack[i].includes('TRACE_FUNC')) {\n      let label = `FUNC_${msg}::${stack[i].trim().split(' ')[1]}`;\n      if (extraMsg) {\n        label += `::${extraMsg}`;\n      }\n      TRACE('CPU', label);\n      return;\n    }\n    if (stack[i].includes('TRACE_FUNC')) {\n      hasTraceFunc = true;\n    }\n  }\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_BEGIN = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('BEGIN', extraMsg);\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_END = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('END', extraMsg);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { InferenceSessionHandler } from './backend.js';\nimport { InferenceSession as InferenceSessionInterface } from './inference-session.js';\nimport { OnnxValue } from './onnx-value.js';\nimport { Tensor } from './tensor.js';\nimport { TRACE_FUNC_BEGIN, TRACE_FUNC_END } from './trace.js';\n\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype FeedsType = InferenceSessionInterface.FeedsType;\ntype FetchesType = InferenceSessionInterface.FetchesType;\ntype ReturnType = InferenceSessionInterface.ReturnType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  private constructor(handler: InferenceSessionHandler) {\n    this.handler = handler;\n  }\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async run(feeds: FeedsType, arg1?: FetchesType | RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const fetches: { [name: string]: OnnxValue | null } = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n        \"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\",\n      );\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError(\"'fetches' cannot be a Tensor\");\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError(\"'fetches' cannot be an empty array.\");\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError(\"'fetches' must be a string array or an object.\");\n          }\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'options' must be an object.\");\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n    }\n\n    // check if all inputs are in feed\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    // feeds, fetches and options are prepared\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue: { [name: string]: OnnxValue } = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    TRACE_FUNC_END();\n    return returnValue;\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(\n    buffer: ArrayBufferLike,\n    byteOffset: number,\n    byteLength?: number,\n    options?: SessionOptions,\n  ): Promise<InferenceSessionInterface>;\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static async create(\n    arg0: string | ArrayBufferLike | Uint8Array,\n    arg1?: SessionOptions | number,\n    arg2?: number,\n    arg3?: SessionOptions,\n  ): Promise<InferenceSessionInterface> {\n    TRACE_FUNC_BEGIN();\n    // either load from a file or buffer\n    let filePathOrUint8Array: string | Uint8Array;\n    let options: SessionOptions = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n    } else if (\n      arg0 instanceof ArrayBuffer ||\n      (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)\n    ) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError(\"'byteOffset' must be an integer.\");\n        }\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n        byteLength = arg0.byteLength - byteOffset;\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError(\"'byteLength' must be an integer.\");\n          }\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError(\"'options' must be an object.\");\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError(\"'byteLength' must be a number.\");\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError(\"'options' must be an object.\");\n      }\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");\n    }\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n    TRACE_FUNC_END();\n    return new InferenceSession(handler);\n  }\n\n  startProfiling(): void {\n    this.handler.startProfiling();\n  }\n  endProfiling(): void {\n    this.handler.endProfiling();\n  }\n\n  get inputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get outputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  private handler: InferenceSessionHandler;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl.js';\nimport { OnnxModelOptions } from './onnx-model.js';\nimport { OnnxValue, OnnxValueDataLocation } from './onnx-value.js';\nimport { TryGetGlobalType } from './type-helper.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace InferenceSession {\n  // #region input/output types\n\n  type OnnxValueMapType = { readonly [name: string]: OnnxValue };\n  type NullableOnnxValueMapType = { readonly [name: string]: OnnxValue | null };\n\n  /**\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\n   */\n  type FeedsType = OnnxValueMapType;\n\n  /**\n   * A fetches (model outputs) could be one of the following:\n   *\n   * - Omitted. Use model's output names definition.\n   * - An array of string indicating the output names.\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\n   *\n   * @remark\n   * different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\n   * internally.\n   */\n  type FetchesType = readonly string[] | NullableOnnxValueMapType;\n\n  /**\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\n   */\n  type ReturnType = OnnxValueMapType;\n\n  // #endregion\n\n  // #region session options\n\n  /**\n   * A set of configurations for session behavior.\n   */\n  export interface SessionOptions extends OnnxModelOptions {\n    /**\n     * An array of execution provider options.\n     *\n     * An execution provider option can be a string indicating the name of the execution provider,\n     * or an object of corresponding type.\n     */\n    executionProviders?: readonly ExecutionProviderConfig[];\n\n    /**\n     * The intra OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    intraOpNumThreads?: number;\n\n    /**\n     * The inter OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    interOpNumThreads?: number;\n\n    /**\n     * The free dimension override.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    freeDimensionOverrides?: { readonly [dimensionName: string]: number };\n\n    /**\n     * The optimization level.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    graphOptimizationLevel?: 'disabled' | 'basic' | 'extended' | 'all';\n\n    /**\n     * Whether enable CPU memory arena.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableCpuMemArena?: boolean;\n\n    /**\n     * Whether enable memory pattern.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableMemPattern?: boolean;\n\n    /**\n     * Execution mode.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    executionMode?: 'sequential' | 'parallel';\n\n    /**\n     * Optimized model file path.\n     *\n     * If this setting is specified, the optimized model will be dumped. In browser, a blob will be created\n     * with a pop-up window.\n     */\n    optimizedModelFilePath?: string;\n\n    /**\n     * Whether enable profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    enableProfiling?: boolean;\n\n    /**\n     * File prefix for profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    profileFilePrefix?: string;\n\n    /**\n     * Log ID.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logId?: string;\n\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0 | 1 | 2 | 3 | 4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Specify string as a preferred data location for all outputs, or an object that use output names as keys and a\n     * preferred data location as corresponding values.\n     *\n     * This setting is available only in ONNXRuntime Web for WebGL and WebGPU EP.\n     */\n    preferredOutputLocation?: OnnxValueDataLocation | { readonly [outputName: string]: OnnxValueDataLocation };\n\n    /**\n     * Whether enable graph capture.\n     * This setting is available only in ONNXRuntime Web for WebGPU EP.\n     */\n    enableGraphCapture?: boolean;\n\n    /**\n     * Store configurations for a session. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_session_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     * ```js\n     * extra: {\n     *   session: {\n     *     set_denormal_as_zero: \"1\",\n     *     disable_prepacking: \"1\"\n     *   },\n     *   optimization: {\n     *     enable_gelu_approximation: \"1\"\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #region execution providers\n\n  // Currently, we have the following backends to support execution providers:\n  // Backend Node.js binding: supports 'cpu', 'dml' (win32), 'coreml' (macOS) and 'cuda' (linux).\n  // Backend WebAssembly: supports 'cpu', 'wasm', 'webgpu' and 'webnn'.\n  // Backend ONNX.js: supports 'webgl'.\n  // Backend React Native: supports 'cpu', 'xnnpack', 'coreml' (iOS), 'nnapi' (Android).\n  interface ExecutionProviderOptionMap {\n    coreml: CoreMLExecutionProviderOption;\n    cpu: CpuExecutionProviderOption;\n    cuda: CudaExecutionProviderOption;\n    dml: DmlExecutionProviderOption;\n    nnapi: NnapiExecutionProviderOption;\n    tensorrt: TensorRtExecutionProviderOption;\n    wasm: WebAssemblyExecutionProviderOption;\n    webgl: WebGLExecutionProviderOption;\n    webgpu: WebGpuExecutionProviderOption;\n    webnn: WebNNExecutionProviderOption;\n    qnn: QnnExecutionProviderOption;\n    xnnpack: XnnpackExecutionProviderOption;\n  }\n\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\n  type ExecutionProviderConfig =\n    | ExecutionProviderOptionMap[ExecutionProviderName]\n    | ExecutionProviderOption\n    | ExecutionProviderName\n    | string;\n\n  export interface ExecutionProviderOption {\n    readonly name: string;\n  }\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cpu';\n    useArena?: boolean;\n  }\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cuda';\n    deviceId?: number;\n  }\n  export interface DmlExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'dml';\n    deviceId?: number;\n  }\n  export interface TensorRtExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'tensorrt';\n    deviceId?: number;\n  }\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'wasm';\n  }\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgl';\n    // TODO: add flags\n  }\n  export interface XnnpackExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'xnnpack';\n  }\n  export interface WebGpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgpu';\n    preferredLayout?: 'NCHW' | 'NHWC';\n  }\n\n  // #region WebNN options\n\n  interface WebNNExecutionProviderName extends ExecutionProviderOption {\n    readonly name: 'webnn';\n  }\n\n  /**\n   * Represents a set of options for creating a WebNN MLContext.\n   *\n   * @see https://www.w3.org/TR/webnn/#dictdef-mlcontextoptions\n   */\n  export interface WebNNContextOptions {\n    deviceType?: 'cpu' | 'gpu' | 'npu';\n    numThreads?: number;\n    powerPreference?: 'default' | 'low-power' | 'high-performance';\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider without MLContext.\n   */\n  export interface WebNNOptionsWithoutMLContext extends WebNNExecutionProviderName, WebNNContextOptions {\n    context?: never;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext.\n   *\n   * When MLContext is provided, the deviceType is also required so that the WebNN EP can determine the preferred\n   * channel layout.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext\n   */\n  export interface WebNNOptionsWithMLContext\n    extends WebNNExecutionProviderName,\n      Omit<WebNNContextOptions, 'deviceType'>,\n      Required<Pick<WebNNContextOptions, 'deviceType'>> {\n    context: TryGetGlobalType<'MLContext'>;\n  }\n\n  /**\n   * Represents a set of options for WebNN execution provider with MLContext which is created from GPUDevice.\n   *\n   * @see https://www.w3.org/TR/webnn/#dom-ml-createcontext-gpudevice\n   */\n  export interface WebNNOptionsWebGpu extends WebNNExecutionProviderName {\n    context: TryGetGlobalType<'MLContext'>;\n    gpuDevice: TryGetGlobalType<'GPUDevice'>;\n  }\n\n  /**\n   * Options for WebNN execution provider.\n   */\n  export type WebNNExecutionProviderOption =\n    | WebNNOptionsWithoutMLContext\n    | WebNNOptionsWithMLContext\n    | WebNNOptionsWebGpu;\n\n  // #endregion\n\n  export interface QnnExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'qnn';\n    /**\n     * Specify a path to the QnnHtp.dll file.\n     *\n     * @default 'QnnHtp.dll'\n     */\n    backendPath?: string;\n    /**\n     * Specify whether to enable HTP FP16 precision.\n     *\n     * @default true\n     */\n    enableFp16Precision?: boolean;\n  }\n  export interface CoreMLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'coreml';\n    /**\n     * The bit flags for CoreML execution provider.\n     *\n     * ```\n     * COREML_FLAG_USE_CPU_ONLY = 0x001\n     * COREML_FLAG_ENABLE_ON_SUBGRAPH = 0x002\n     * COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 0x004\n     * COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 0x008\n     * COREML_FLAG_CREATE_MLPROGRAM = 0x010\n     * COREML_FLAG_USE_CPU_AND_GPU = 0x020\n     * ```\n     *\n     * See include/onnxruntime/core/providers/coreml/coreml_provider_factory.h for more details.\n     *\n     * This flag is available only in ONNXRuntime (Node.js binding).\n     */\n    coreMlFlags?: number;\n    /**\n     * Specify whether to use CPU only in CoreML EP.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    useCPUOnly?: boolean;\n    useCPUAndGPU?: boolean;\n    /**\n     * Specify whether to enable CoreML EP on subgraph.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    enableOnSubgraph?: boolean;\n    /**\n     * Specify whether to only enable CoreML EP for Apple devices with ANE (Apple Neural Engine).\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    onlyEnableDeviceWithANE?: boolean;\n  }\n  export interface NnapiExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'nnapi';\n    useFP16?: boolean;\n    useNCHW?: boolean;\n    cpuDisabled?: boolean;\n    cpuOnly?: boolean;\n  }\n  // #endregion\n\n  // #endregion\n\n  // #region run options\n\n  /**\n   * A set of configurations for inference run behavior\n   */\n  export interface RunOptions {\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0 | 1 | 2 | 3 | 4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Terminate all incomplete OrtRun calls as soon as possible if true\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    terminate?: boolean;\n\n    /**\n     * A tag for the Run() calls using this\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    tag?: string;\n\n    /**\n     * Set a single run configuration entry. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_run_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     *\n     * ```js\n     * extra: {\n     *   memory: {\n     *     enable_memory_arena_shrinkage: \"1\",\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #endregion\n\n  // #region value metadata\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface ValueMetadata {\n    // TBD\n  }\n\n  // #endregion\n}\n\n/**\n * Represent a runtime instance of an ONNX model.\n */\nexport interface InferenceSession {\n  // #region run()\n\n  /**\n   * Execute the model asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Execute the model asynchronously with the given feeds, fetches and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(\n    feeds: InferenceSession.FeedsType,\n    fetches: InferenceSession.FetchesType,\n    options?: InferenceSession.RunOptions,\n  ): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n\n  // #endregion\n\n  // #region profiling\n\n  /**\n   * Start profiling.\n   */\n  startProfiling(): void;\n\n  /**\n   * End profiling.\n   */\n  endProfiling(): void;\n\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded model.\n   */\n  readonly inputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded model.\n   */\n  readonly outputNames: readonly string[];\n\n  // /**\n  //  * Get input metadata of the loaded model.\n  //  */\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // /**\n  //  * Get output metadata of the loaded model.\n  //  */\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // #endregion\n}\n\nexport interface InferenceSessionFactory {\n  // #region create()\n\n  /**\n   * Create a new inference session and load model asynchronously from an ONNX model file.\n   *\n   * @param uri - The URI or file path of the model to load.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\n   * @param byteLength - The length in bytes of the array buffer.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(\n    buffer: ArrayBufferLike,\n    byteOffset: number,\n    byteLength?: number,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from a Uint8Array.\n   *\n   * @param buffer - A Uint8Array representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { OptionsFormat, OptionsNormalizationParameters, OptionsTensorLayout } from './tensor-factory.js';\n\nexport interface TensorToDataUrlOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface TensorToImageDataOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface ConversionUtils {\n  /**\n   * creates a DataURL instance from tensor\n   *\n   * @param options - An optional object representing options for creating a DataURL instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns a DataURL string representing the image converted from tensor data\n   */\n  toDataURL(options?: TensorToDataUrlOptions): string;\n\n  /**\n   * creates an ImageData instance from tensor\n   *\n   * @param options - An optional object representing options for creating an ImageData instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns an ImageData instance representing the image converted from tensor data\n   */\n  toImageData(options?: TensorToImageDataOptions): ImageData;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor, TypedTensor } from './tensor.js';\n\nexport type ImageFormat = 'RGB' | 'RGBA' | 'BGR' | 'RBG';\nexport type ImageTensorLayout = 'NHWC' | 'NCHW';\n\n// the following region contains type definitions for constructing tensor from a specific location.\n\n// #region types for constructing a tensor from a specific location\n\n/**\n * represent common properties of the parameter for constructing a tensor from a specific location.\n */\ninterface CommonConstructorParameters<T> extends Pick<Tensor, 'dims'> {\n  /**\n   * Specify the data type of the tensor.\n   */\n  readonly type: T;\n}\n\n/**\n * represent the parameter for constructing a tensor from a GPU resource.\n */\ninterface GpuResourceConstructorParameters<T extends Tensor.Type> {\n  /**\n   * an optional callback function to download data from GPU to CPU.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  download?(): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * an optional callback function that will be called when the tensor is disposed.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  dispose?(): void;\n}\n\n/**\n * represent the parameter for constructing a tensor from a pinned CPU buffer\n */\nexport interface CpuPinnedConstructorParameters<T extends Tensor.CpuPinnedDataTypes = Tensor.CpuPinnedDataTypes>\n  extends CommonConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'cpu-pinned'.\n   */\n  readonly location: 'cpu-pinned';\n  /**\n   * Specify the CPU pinned buffer that holds the tensor data.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGL texture\n */\nexport interface TextureConstructorParameters<T extends Tensor.TextureDataTypes = Tensor.TextureDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'texture'.\n   */\n  readonly location: 'texture';\n  /**\n   * Specify the WebGL texture that holds the tensor data.\n   */\n  readonly texture: Tensor.TextureType;\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGPU buffer\n */\nexport interface GpuBufferConstructorParameters<T extends Tensor.GpuBufferDataTypes = Tensor.GpuBufferDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'gpu-buffer'.\n   */\n  readonly location: 'gpu-buffer';\n  /**\n   * Specify the WebGPU buffer that holds the tensor data.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n}\n\nexport interface MLTensorConstructorParameters<T extends Tensor.MLTensorDataTypes = Tensor.MLTensorDataTypes>\n  extends CommonConstructorParameters<T>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'ml-tensor'.\n   */\n  readonly location: 'ml-tensor';\n\n  /**\n   * Specify the WebNN MLTensor that holds the tensor data.\n   */\n  readonly mlTensor: Tensor.MLTensorType;\n}\n\n// #endregion\n\n// the following region contains type definitions of each individual options.\n// the tensor factory functions use a composition of those options as the parameter type.\n\n// #region Options fields\n\nexport interface OptionsFormat {\n  /**\n   * Describes the image format represented in RGBA color space.\n   */\n  format?: ImageFormat;\n}\n\nexport interface OptionsTensorFormat {\n  /**\n   * Describes the image format of the tensor.\n   *\n   * NOTE: this is different from option 'format'. While option 'format' represents the original image, 'tensorFormat'\n   * represents the target format of the tensor. A transpose will be performed if they are different.\n   */\n  tensorFormat?: ImageFormat;\n}\n\nexport interface OptionsTensorDataType {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: 'float32' | 'uint8';\n}\n\nexport interface OptionsTensorLayout {\n  /**\n   * Describes the tensor layout when representing data of one or more image(s).\n   */\n  tensorLayout?: ImageTensorLayout;\n}\n\nexport interface OptionsDimensions {\n  /**\n   * Describes the image height in pixel\n   */\n  height?: number;\n  /**\n   * Describes the image width in pixel\n   */\n  width?: number;\n}\n\nexport interface OptionResizedDimensions {\n  /**\n   * Describes the resized height. If omitted, original height will be used.\n   */\n  resizedHeight?: number;\n  /**\n   * Describes resized width - can be accessed via tensor dimensions as well\n   */\n  resizedWidth?: number;\n}\n\nexport interface OptionsNormalizationParameters {\n  /**\n   * Describes normalization parameters when preprocessing the image as model input.\n   *\n   * Data element are ranged from 0 to 255.\n   */\n  norm?: {\n    /**\n     * The 'bias' value for image normalization.\n     * - If omitted, use default value 0.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    bias?: number | [number, number, number] | [number, number, number, number];\n    /**\n     * The 'mean' value for image normalization.\n     * - If omitted, use default value 255.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    mean?: number | [number, number, number] | [number, number, number, number];\n  };\n}\n\n// #endregion\n\n// #region Options composition\n\nexport interface TensorFromImageDataOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromImageElementOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromUrlOptions\n  extends OptionsDimensions,\n    OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromImageBitmapOptions\n  extends OptionResizedDimensions,\n    OptionsTensorFormat,\n    OptionsTensorLayout,\n    OptionsTensorDataType,\n    OptionsNormalizationParameters {}\n\nexport interface TensorFromTextureOptions<T extends Tensor.TextureDataTypes>\n  extends Required<OptionsDimensions>,\n    OptionsFormat,\n    GpuResourceConstructorParameters<T> /* TODO: add more */ {}\n\nexport interface TensorFromGpuBufferOptions<T extends Tensor.GpuBufferDataTypes>\n  extends Pick<Tensor, 'dims'>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\nexport interface TensorFromMLTensorOptions<T extends Tensor.MLTensorDataTypes>\n  extends Pick<Tensor, 'dims'>,\n    GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\n// #endregion\n\n/**\n * type TensorFactory defines the factory functions of 'Tensor' to create tensor instances from existing data or\n * resources.\n */\nexport interface TensorFactory {\n  /**\n   * create a tensor from an ImageData object\n   *\n   * @param imageData - the ImageData object to create tensor from\n   * @param options - An optional object representing options for creating tensor from ImageData.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    imageData: ImageData,\n    options?: TensorFromImageDataOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a HTMLImageElement object\n   *\n   * @param imageElement - the HTMLImageElement object to create tensor from\n   * @param options - An optional object representing options for creating tensor from HTMLImageElement.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    imageElement: HTMLImageElement,\n    options?: TensorFromImageElementOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from URL\n   *\n   * @param urlSource - a string as a URL to the image or a data URL containing the image data.\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(urlSource: string, options?: TensorFromUrlOptions): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from an ImageBitmap object\n   *\n   * @param bitmap - the ImageBitmap object to create tensor from\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(\n    bitmap: ImageBitmap,\n    options: TensorFromImageBitmapOptions,\n  ): Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a WebGL texture\n   *\n   * @param texture - the WebGLTexture object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGL texture.\n   *\n   * The options include following properties:\n   * - `width`: the width of the texture. Required.\n   * - `height`: the height of the texture. Required.\n   * - `format`: the format of the texture. If omitted, assume 'RGBA'.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromTexture<T extends Tensor.TextureDataTypes = 'float32'>(\n    texture: Tensor.TextureType,\n    options: TensorFromTextureOptions<T>,\n  ): TypedTensor<'float32'>;\n\n  /**\n   * create a tensor from a WebGPU buffer\n   *\n   * @param buffer - the GPUBuffer object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGPU buffer.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromGpuBuffer<T extends Tensor.GpuBufferDataTypes>(\n    buffer: Tensor.GpuBufferType,\n    options: TensorFromGpuBufferOptions<T>,\n  ): TypedTensor<T>;\n\n  /**\n   * create a tensor from a WebNN MLTensor\n   *\n   * @param tensor - the MLTensor object to create tensor from\n   * @param options - An optional object representing options for creating tensor from a WebNN MLTensor.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from the MLTensor to CPU. If omitted, the MLTensor\n   * data will not be able to download. Usually, this is provided by the WebNN backend for the inference outputs.\n   * Users don't need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on the WebNN MLTensor. If omitted, the MLTensor will\n   * not be disposed. Usually, this is provided by the WebNN backend for the inference outputs. Users don't need to\n   * provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromMLTensor<T extends Tensor.MLTensorDataTypes>(\n    tensor: Tensor.MLTensorType,\n    options: TensorFromMLTensorOptions<T>,\n  ): TypedTensor<T>;\n\n  /**\n   * create a tensor from a pre-allocated buffer. The buffer will be used as a pinned buffer.\n   *\n   * @param type - the tensor element type.\n   * @param buffer - a TypedArray corresponding to the type.\n   * @param dims - specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   *\n   * @returns a tensor object\n   */\n  fromPinnedBuffer<T extends Exclude<Tensor.Type, 'string'>>(\n    type: T,\n    buffer: Tensor.DataTypeMap[T],\n    dims?: readonly number[],\n  ): TypedTensor<T>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * A string that represents a file's URL or path.\n *\n * Path is vailable only in onnxruntime-node or onnxruntime-web running in Node.js.\n */\nexport type FileUrlOrPath = string;\n\n/**\n * A Blob object that represents a file.\n */\nexport type FileBlob = Blob;\n\n/**\n * A Uint8Array, ArrayBuffer or SharedArrayBuffer object that represents a file content.\n *\n * When it is an ArrayBuffer or SharedArrayBuffer, the whole buffer is assumed to be the file content.\n */\nexport type FileData = Uint8Array | ArrayBufferLike;\n\n/**\n * Represents a file that can be loaded by the ONNX Runtime JavaScript API.\n */\nexport type FileType = FileUrlOrPath | FileBlob | FileData;\n\n/**\n * Represents an external data file.\n */\nexport interface ExternalDataFileDescription {\n  /**\n   * Specify the external data file.\n   */\n  data: FileType;\n  /**\n   * Specify the file path.\n   */\n  path: string;\n}\n\n/**\n * Represents an external data file.\n *\n * When using a string, it should be a file URL or path that in the same directory as the model file.\n */\nexport type ExternalDataFileType = ExternalDataFileDescription | FileUrlOrPath;\n\n/**\n * Options for model loading.\n */\nexport interface OnnxModelOptions {\n  /**\n   * Specifying a list of files that represents the external data.\n   */\n  externalData?: readonly ExternalDataFileType[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from './tensor.js';\n\nexport type NonTensorType = never;\n\n/**\n * Type OnnxValue Represents both tensors and non-tensors value for model's inputs/outputs.\n *\n * NOTE: currently not support non-tensor\n */\nexport type OnnxValue = Tensor | NonTensorType;\n\n/**\n * Type OnnxValueDataLocation represents the location of the data of an OnnxValue.\n */\nexport type OnnxValueDataLocation = Tensor.DataLocation;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript/)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n\nexport * from './backend.js';\nexport * from './env.js';\nexport * from './inference-session.js';\nexport * from './tensor.js';\nexport * from './tensor-conversion.js';\nexport * from './tensor-factory.js';\nexport * from './trace.js';\nexport * from './onnx-model.js';\nexport * from './onnx-value.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const isNode = !!(typeof process !== 'undefined' && process.versions && process.versions.node);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/// <reference lib=\"webworker\" />\n\n//\n// * type hack for \"HTMLImageElement\"\n//\n// in typescript, the type of \"HTMLImageElement\" is defined in lib.dom.d.ts, which is conflict with lib.webworker.d.ts.\n// when we use webworker, the lib.webworker.d.ts will be used, which does not have HTMLImageElement defined.\n//\n// we will get the following errors complaining that HTMLImageElement is not defined:\n//\n// ====================================================================================================================\n//\n// ../common/dist/cjs/tensor-factory.d.ts:187:29 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 187     fromImage(imageElement: HTMLImageElement, options?: TensorFromImageElementOptions):\n// Promise<TypedTensor<'float32'> | TypedTensor<'uint8'>>;\n//                                 ~~~~~~~~~~~~~~~~\n//\n// node_modules/@webgpu/types/dist/index.d.ts:83:7 - error TS2552: Cannot find name 'HTMLImageElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 83     | HTMLImageElement\n//          ~~~~~~~~~~~~~~~~\n//\n// ====================================================================================================================\n//\n// `HTMLImageElement` is only used in type declaration and not in real code. So we define it as `unknown` here to\n// bypass the type check.\n\n//\n// * type hack for \"document\"\n//\n// in typescript, the type of \"document\" is defined in lib.dom.d.ts, so it's not available in webworker.\n//\n// we will get the following errors complaining that document is not defined:\n//\n// ====================================================================================================================\n//\n// lib/wasm/wasm-utils-import.ts:7:33 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                   ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:61 - error TS2584: Cannot find name 'document'. Do you need to change your target\n// library? Try changing the 'lib' compiler option to include 'dom'.\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                               ~~~~~~~~\n//\n// lib/wasm/wasm-utils-import.ts:7:88 - error TS2552: Cannot find name 'HTMLScriptElement'. Did you mean\n// 'HTMLLIElement'?\n//\n// 7 export const scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src :\n//                                                                                          ~~~~~~~~~~~~~~~~~\n// ====================================================================================================================\n//\n// `document` is used to get the current script URL, which is not available in webworker. This file is served as a\n// \"dual\" file for entries of both webworker and the esm module.\n//\ndeclare global {\n  type HTMLImageElement = unknown;\n  type HTMLScriptElement = { src?: string };\n  const document: undefined | { currentScript?: HTMLScriptElement };\n}\n\n/**\n * @summary\n *\n * This file is served as a \"dual\" file for both entries of the following:\n * - The proxy worker itself.\n *   - When used as a worker, it listens to the messages from the main thread and performs the corresponding operations.\n *   - Should be imported directly using `new Worker()` in the main thread.\n *\n * - The ESM module that creates the proxy worker (as a worker launcher).\n *   - When used as a worker launcher, it creates the proxy worker and returns it.\n *   - Should be imported using `import()` in the main thread, with the query parameter `import=1`.\n *\n * This file will be always compiling into ESM format.\n */\n\nimport type { OrtWasmMessage, SerializableTensorMetadata } from '../proxy-messages.js';\nimport {\n  createSession,\n  copyFromExternalBuffer,\n  endProfiling,\n  extractTransferableBuffers,\n  initEp,\n  initRuntime,\n  releaseSession,\n  run,\n} from '../wasm-core-impl.js';\nimport { initializeWebAssembly } from '../wasm-factory.js';\nimport { scriptSrc } from '../wasm-utils-import.js';\n\nconst WORKER_NAME = 'ort-wasm-proxy-worker';\nconst isProxyWorker = globalThis.self?.name === WORKER_NAME;\n\nif (isProxyWorker) {\n  // Worker thread\n  self.onmessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case 'init-wasm':\n          initializeWebAssembly(message!.wasm).then(\n            () => {\n              initRuntime(message!).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                },\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        case 'init-ep': {\n          const { epName, env } = message!;\n          initEp(env, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'copy-from': {\n          const { buffer } = message!;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData } as OrtWasmMessage);\n          break;\n        }\n        case 'create': {\n          const { model, options } = message!;\n          createSession(model, options).then(\n            (sessionMetadata) => {\n              postMessage({ type, out: sessionMetadata } as OrtWasmMessage);\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'release':\n          releaseSession(message!);\n          postMessage({ type });\n          break;\n        case 'run': {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message!;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== 'cpu')) {\n                postMessage({ type, err: 'Proxy does not support non-cpu tensor location.' });\n              } else {\n                postMessage(\n                  { type, out: outputs } as OrtWasmMessage,\n                  extractTransferableBuffers([...inputs, ...outputs] as SerializableTensorMetadata[]),\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            },\n          );\n          break;\n        }\n        case 'end-profiling':\n          endProfiling(message!);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err } as OrtWasmMessage);\n    }\n  };\n}\n\nexport default isProxyWorker\n  ? null\n  : (urlOverride?: string) =>\n      new Worker(urlOverride ?? scriptSrc!, { type: BUILD_DEFS.IS_ESM ? 'module' : 'classic', name: WORKER_NAME });\n","var r,e=(r=import.meta.url,async function(e={}){function t(){return M.buffer!=R.buffer&&Y(),R}function a(){return M.buffer!=R.buffer&&Y(),H}function n(){return M.buffer!=R.buffer&&Y(),F}function o(){return M.buffer!=R.buffer&&Y(),P}function i(){return M.buffer!=R.buffer&&Y(),B}function u(){return M.buffer!=R.buffer&&Y(),I}function s(){return M.buffer!=R.buffer&&Y(),j}function f(){return M.buffer!=R.buffer&&Y(),G}var b,l,m=Object.assign({},e),c=new Promise(((r,e)=>{b=r,l=e})),d=\"object\"==typeof window,p=\"function\"==typeof importScripts,h=p&&\"em-pthread\"==self.name;m.mountExternalData=(r,e)=>{r.startsWith(\"./\")&&(r=r.substring(2)),(m.Fb||(m.Fb=new Map)).set(r,e)},m.unmountExternalData=()=>{delete m.Fb};var y=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let v=()=>{const r=(r,e,t)=>(...a)=>{const n=Ve,o=e?.();a=r(...a);const i=e?.();return o!==i&&(r=i,t(o),e=t=null),Ve!=n?new Promise(((r,e)=>{Ke={resolve:r,reject:e}})):a},e=r=>async(...e)=>{try{if(m.Gb)throw Error(\"Session already started\");const t=m.Gb={hc:e[0],errors:[]},a=await r(...e);if(m.Gb!==t)throw Error(\"Session mismatch\");m.Hb?.flush();const n=t.errors;if(0<n.length){let r=await Promise.all(n);if(r=r.filter((r=>r)),0<r.length)throw Error(r.join(\"\\n\"))}return a}finally{m.Gb=null}};m._OrtCreateSession=r(m._OrtCreateSession,(()=>m._OrtCreateSession),(r=>m._OrtCreateSession=r)),m._OrtRun=e(r(m._OrtRun,(()=>m._OrtRun),(r=>m._OrtRun=r))),m._OrtRunWithBinding=e(r(m._OrtRunWithBinding,(()=>m._OrtRunWithBinding),(r=>m._OrtRunWithBinding=r))),m._OrtBindInput=r(m._OrtBindInput,(()=>m._OrtBindInput),(r=>m._OrtBindInput=r)),v=void 0};m.jsepInit=(r,e)=>{if(v?.(),\"webgpu\"===r){[m.Hb,m.Vb,m.Zb,m.Ob,m.Yb,m.kb,m.$b,m.cc,m.Wb,m.Xb,m.ac]=e;const r=m.Hb;m.jsepRegisterBuffer=(e,t,a,n)=>r.registerBuffer(e,t,a,n),m.jsepGetBuffer=e=>r.getBuffer(e),m.jsepCreateDownloader=(e,t,a)=>r.createDownloader(e,t,a),m.jsepOnCreateSession=e=>{r.onCreateSession(e)},m.jsepOnReleaseSession=e=>{r.onReleaseSession(e)},m.jsepOnRunStart=e=>r.onRunStart(e),m.dc=(e,t)=>{r.upload(e,t)}}else if(\"webnn\"===r){[m.Hb,m.bc,m.Pb,m.jsepEnsureTensor,m.ec,m.jsepDownloadTensor]=e,m.jsepReleaseTensorId=m.Pb;const r=m.Hb;m.jsepOnRunStart=e=>r.onRunStart(e),m.jsepRegisterMLContext=(e,t)=>{r.registerMLContext(e,t)},m.jsepOnReleaseSession=e=>{r.onReleaseSession(e)},m.jsepCreateMLTensorDownloader=(e,t)=>r.createMLTensorDownloader(e,t),m.jsepRegisterMLTensor=(e,t,a)=>r.registerMLTensor(e,t,a),m.jsepCreateMLContext=e=>r.createMLContext(e),m.jsepRegisterMLConstant=(e,t,a,n,o)=>r.registerMLConstant(e,t,a,n,o,m.Fb)}};var g,N,k=Object.assign({},m),w=(r,e)=>{throw e},A=\"\";(d||p)&&(p?A=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(A=document.currentScript.src),r&&(A=r),A=A.startsWith(\"blob:\")?\"\":A.substr(0,A.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1),p&&(N=r=>{var e=new XMLHttpRequest;return e.open(\"GET\",r,!1),e.responseType=\"arraybuffer\",e.send(null),new Uint8Array(e.response)}),g=(r,e,t)=>{var a=new XMLHttpRequest;a.open(\"GET\",r,!0),a.responseType=\"arraybuffer\",a.onload=()=>{200==a.status||0==a.status&&a.response?e(a.response):t()},a.onerror=t,a.send(null)});var C,_=console.log.bind(console),O=console.error.bind(console),T=_,S=O;if(Object.assign(m,k),k=null,h){var W,E=!1;function Ba(r){try{var e=r.data,t=e.cmd;if(\"load\"===t){let r=[];self.onmessage=e=>r.push(e),self.startWorker=()=>{postMessage({cmd:\"loaded\"});for(let e of r)Ba(e);self.onmessage=Ba};for(const r of e.handlers)m[r]&&!m[r].proxy||(m[r]=(...e)=>{postMessage({Nb:\"callHandler\",pc:r,args:e})},\"print\"==r&&(T=m[r]),\"printErr\"==r&&(S=m[r]));M=e.wasmMemory,Y(),W(e.wasmModule)}else if(\"run\"===t){wa(e.pthread_ptr,0,0,1,0,0),Re(e.pthread_ptr),Or(),wr(),E||(ya(),E=!0);try{Tr(e.start_routine,e.arg)}catch(r){if(\"unwind\"!=r)throw r}}else\"cancel\"===t?ga()&&Oa(-1):\"setimmediate\"!==e.target&&(\"checkMailbox\"===t?E&&He():t&&(S(`worker: received unknown command ${t}`),S(e)))}catch(r){throw Aa(),r}}S=function(...r){r=r.join(\" \"),console.error(r)},self.alert=function(...r){postMessage({Nb:\"alert\",text:r.join(\" \"),rc:ga()})},m.instantiateWasm=(r,e)=>new Promise((r=>{W=t=>{t=new WebAssembly.Instance(t,or()),e(t),r()}})),self.onunhandledrejection=r=>{throw r.reason||r},self.onmessage=Ba}m.wasmBinary&&(C=m.wasmBinary);var M,x,D,R,H,F,P,B,I,j,U,L,G,$=!1;function Y(){var r=M.buffer;m.HEAP8=R=new Int8Array(r),m.HEAP16=F=new Int16Array(r),m.HEAPU8=H=new Uint8Array(r),m.HEAPU16=P=new Uint16Array(r),m.HEAP32=B=new Int32Array(r),m.HEAPU32=I=new Uint32Array(r),m.HEAPF32=j=new Float32Array(r),m.HEAPF64=G=new Float64Array(r),m.HEAP64=U=new BigInt64Array(r),m.HEAPU64=L=new BigUint64Array(r)}if(!h){if(!((M=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof y))throw S(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),Error(\"bad memory\");Y()}var z=[],V=[],q=[],J=0,Q=null,X=null;function Z(){if(0==--J&&(null!==Q&&(clearInterval(Q),Q=null),X)){var r=X;X=null,r()}}function K(r){throw S(r=\"Aborted(\"+r+\")\"),$=!0,D=1,r=new WebAssembly.RuntimeError(r+\". Build with -sASSERTIONS for more info.\"),l(r),r}var rr,er=r=>r.startsWith(\"data:application/octet-stream;base64,\"),tr=r=>r.startsWith(\"file://\");function ar(r){if(r==rr&&C)return new Uint8Array(C);if(N)return N(r);throw\"both async and sync fetching of the wasm failed\"}function nr(r,e,t){return function(r){if(!C&&(d||p)){if(\"function\"==typeof fetch&&!tr(r))return fetch(r,{credentials:\"same-origin\"}).then((e=>{if(!e.ok)throw`failed to load wasm binary file at '${r}'`;return e.arrayBuffer()})).catch((()=>ar(r)));if(g)return new Promise(((e,t)=>{g(r,(r=>e(new Uint8Array(r))),t)}))}return Promise.resolve().then((()=>ar(r)))}(r).then((r=>WebAssembly.instantiate(r,e))).then(t,(r=>{S(`failed to asynchronously prepare wasm: ${r}`),K(r)}))}function or(){return{a:{O:sr,Aa:ur,b:Wr,aa:Mr,B:Hr,qa:Fr,Y:jr,_:Ur,ra:Lr,oa:Gr,ha:$r,na:Yr,L:zr,Z:Vr,W:qr,pa:Jr,X:Qr,va:Kr,F:ie,Q:se,P:he,E:ve,u:ge,q:Ne,G:ke,A:We,R:Ee,ua:Me,ka:xe,U:Fe,ba:Be,H:Ie,ja:Re,ta:je,t:Ge,Ba:$e,x:tt,o:nt,m:ut,c:le,n:ft,k:ct,w:dt,p:pt,f:ht,s:yt,l:vt,e:gt,j:Nt,i:kt,g:wt,d:At,ea:Ct,fa:St,ga:Wt,ca:Et,da:Mt,T:xt,h:Ht,D:Ft,I:Pt,M:Bt,y:It,sa:Ut,V:Lt,v:jt,z:Gt,N:$t,S:Yt,za:Jt,ya:Qt,la:ra,ma:ea,$:hr,C:ta,K:aa,ia:na,J:ia,a:M,xa:dr,wa:ba,r:la}}}var ir={916868:(r,e,t,n,o)=>{if(void 0===m||!m.Fb)return 1;if((r=Rr(Number(r>>>0))).startsWith(\"./\")&&(r=r.substring(2)),!(r=m.Fb.get(r)))return 2;if(e=Number(e>>>0),t=Number(t>>>0),n=Number(n>>>0),e+t>r.byteLength)return 3;try{const i=r.subarray(e,e+t);switch(o){case 0:a().set(i,n>>>0);break;case 1:m.dc(n,i);break;default:return 4}return 0}catch{return 4}},917583:(r,e,t)=>{m.ec(r,a().subarray(e>>>0,e+t>>>0))},917646:()=>m.bc(),917687:r=>{m.Pb(r)},917723:()=>{m.Wb()},917754:()=>{m.Xb()},917783:()=>{m.ac()},917808:r=>m.Vb(r),917841:r=>m.Zb(r),917873:(r,e,t)=>{m.Ob(Number(r),Number(e),Number(t),!0)},917936:(r,e,t)=>{m.Ob(Number(r),Number(e),Number(t))},917993:()=>\"undefined\"!=typeof wasmOffsetConverter,918050:r=>{m.kb(\"Abs\",r,void 0)},918101:r=>{m.kb(\"Neg\",r,void 0)},918152:r=>{m.kb(\"Floor\",r,void 0)},918205:r=>{m.kb(\"Ceil\",r,void 0)},918257:r=>{m.kb(\"Reciprocal\",r,void 0)},918315:r=>{m.kb(\"Sqrt\",r,void 0)},918367:r=>{m.kb(\"Exp\",r,void 0)},918418:r=>{m.kb(\"Erf\",r,void 0)},918469:r=>{m.kb(\"Sigmoid\",r,void 0)},918524:(r,e,t)=>{m.kb(\"HardSigmoid\",r,{alpha:e,beta:t})},918603:r=>{m.kb(\"Log\",r,void 0)},918654:r=>{m.kb(\"Sin\",r,void 0)},918705:r=>{m.kb(\"Cos\",r,void 0)},918756:r=>{m.kb(\"Tan\",r,void 0)},918807:r=>{m.kb(\"Asin\",r,void 0)},918859:r=>{m.kb(\"Acos\",r,void 0)},918911:r=>{m.kb(\"Atan\",r,void 0)},918963:r=>{m.kb(\"Sinh\",r,void 0)},919015:r=>{m.kb(\"Cosh\",r,void 0)},919067:r=>{m.kb(\"Asinh\",r,void 0)},919120:r=>{m.kb(\"Acosh\",r,void 0)},919173:r=>{m.kb(\"Atanh\",r,void 0)},919226:r=>{m.kb(\"Tanh\",r,void 0)},919278:r=>{m.kb(\"Not\",r,void 0)},919329:(r,e,t)=>{m.kb(\"Clip\",r,{min:e,max:t})},919398:r=>{m.kb(\"Clip\",r,void 0)},919450:(r,e)=>{m.kb(\"Elu\",r,{alpha:e})},919508:r=>{m.kb(\"Gelu\",r,void 0)},919560:r=>{m.kb(\"Relu\",r,void 0)},919612:(r,e)=>{m.kb(\"LeakyRelu\",r,{alpha:e})},919676:(r,e)=>{m.kb(\"ThresholdedRelu\",r,{alpha:e})},919746:(r,e)=>{m.kb(\"Cast\",r,{to:e})},919804:r=>{m.kb(\"Add\",r,void 0)},919855:r=>{m.kb(\"Sub\",r,void 0)},919906:r=>{m.kb(\"Mul\",r,void 0)},919957:r=>{m.kb(\"Div\",r,void 0)},920008:r=>{m.kb(\"Pow\",r,void 0)},920059:r=>{m.kb(\"Equal\",r,void 0)},920112:r=>{m.kb(\"Greater\",r,void 0)},920167:r=>{m.kb(\"GreaterOrEqual\",r,void 0)},920229:r=>{m.kb(\"Less\",r,void 0)},920281:r=>{m.kb(\"LessOrEqual\",r,void 0)},920340:(r,e,t,a,n)=>{m.kb(\"ReduceMean\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},920515:(r,e,t,a,n)=>{m.kb(\"ReduceMax\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},920689:(r,e,t,a,n)=>{m.kb(\"ReduceMin\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},920863:(r,e,t,a,n)=>{m.kb(\"ReduceProd\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},921038:(r,e,t,a,n)=>{m.kb(\"ReduceSum\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},921212:(r,e,t,a,n)=>{m.kb(\"ReduceL1\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},921385:(r,e,t,a,n)=>{m.kb(\"ReduceL2\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},921558:(r,e,t,a,n)=>{m.kb(\"ReduceLogSum\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},921735:(r,e,t,a,n)=>{m.kb(\"ReduceSumSquare\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},921915:(r,e,t,a,n)=>{m.kb(\"ReduceLogSumExp\",r,{keepDims:!!e,noopWithEmptyAxes:!!t,axes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},922095:r=>{m.kb(\"Where\",r,void 0)},922148:(r,e,t)=>{m.kb(\"Transpose\",r,{perm:e?Array.from(i().subarray(Number(e)>>>0,Number(t)>>>0)):[]})},922272:(r,e,t,a)=>{m.kb(\"DepthToSpace\",r,{blocksize:e,mode:Rr(t),format:a?\"NHWC\":\"NCHW\"})},922405:(r,e,t,a)=>{m.kb(\"DepthToSpace\",r,{blocksize:e,mode:Rr(t),format:a?\"NHWC\":\"NCHW\"})},922538:(r,e,a,n,o,u,s,f,b,l,c,d,p,h,y)=>{m.kb(\"ConvTranspose\",r,{format:b?\"NHWC\":\"NCHW\",autoPad:e,dilations:[a],group:n,kernelShape:[o],pads:[u,s],strides:[f],wIsConst:()=>!!t()[l>>>0],outputPadding:c?Array.from(i().subarray(Number(c)>>>0,Number(d)>>>0)):[],outputShape:p?Array.from(i().subarray(Number(p)>>>0,Number(h)>>>0)):[],activation:Rr(y)})},922971:(r,e,a,n,o,u,s,f,b,l,c,d,p,h)=>{m.kb(\"ConvTranspose\",r,{format:f?\"NHWC\":\"NCHW\",autoPad:e,dilations:Array.from(i().subarray(Number(a)>>>0,2+(Number(a)>>>0)>>>0)),group:n,kernelShape:Array.from(i().subarray(Number(o)>>>0,2+(Number(o)>>>0)>>>0)),pads:Array.from(i().subarray(Number(u)>>>0,4+(Number(u)>>>0)>>>0)),strides:Array.from(i().subarray(Number(s)>>>0,2+(Number(s)>>>0)>>>0)),wIsConst:()=>!!t()[b>>>0],outputPadding:l?Array.from(i().subarray(Number(l)>>>0,Number(c)>>>0)):[],outputShape:d?Array.from(i().subarray(Number(d)>>>0,Number(p)>>>0)):[],activation:Rr(h)})},923632:(r,e,a,n,o,u,s,f,b,l,c,d,p,h,y)=>{m.kb(\"ConvTranspose\",r,{format:b?\"NHWC\":\"NCHW\",autoPad:e,dilations:[a],group:n,kernelShape:[o],pads:[u,s],strides:[f],wIsConst:()=>!!t()[l>>>0],outputPadding:c?Array.from(i().subarray(Number(c)>>>0,Number(d)>>>0)):[],outputShape:p?Array.from(i().subarray(Number(p)>>>0,Number(h)>>>0)):[],activation:Rr(y)})},924065:(r,e,a,n,o,u,s,f,b,l,c,d,p,h)=>{m.kb(\"ConvTranspose\",r,{format:f?\"NHWC\":\"NCHW\",autoPad:e,dilations:Array.from(i().subarray(Number(a)>>>0,2+(Number(a)>>>0)>>>0)),group:n,kernelShape:Array.from(i().subarray(Number(o)>>>0,2+(Number(o)>>>0)>>>0)),pads:Array.from(i().subarray(Number(u)>>>0,4+(Number(u)>>>0)>>>0)),strides:Array.from(i().subarray(Number(s)>>>0,2+(Number(s)>>>0)>>>0)),wIsConst:()=>!!t()[b>>>0],outputPadding:l?Array.from(i().subarray(Number(l)>>>0,Number(c)>>>0)):[],outputShape:d?Array.from(i().subarray(Number(d)>>>0,Number(p)>>>0)):[],activation:Rr(h)})},924726:(r,e)=>{m.kb(\"GlobalAveragePool\",r,{format:e?\"NHWC\":\"NCHW\"})},924817:(r,e,t,a,n,o,u,s,f,b,l,c,d,p)=>{m.kb(\"AveragePool\",r,{format:p?\"NHWC\":\"NCHW\",auto_pad:e,ceil_mode:t,count_include_pad:a,storage_order:n,dilations:o?Array.from(i().subarray(Number(o)>>>0,Number(u)>>>0)):[],kernel_shape:s?Array.from(i().subarray(Number(s)>>>0,Number(f)>>>0)):[],pads:b?Array.from(i().subarray(Number(b)>>>0,Number(l)>>>0)):[],strides:c?Array.from(i().subarray(Number(c)>>>0,Number(d)>>>0)):[]})},925296:(r,e)=>{m.kb(\"GlobalAveragePool\",r,{format:e?\"NHWC\":\"NCHW\"})},925387:(r,e,t,a,n,o,u,s,f,b,l,c,d,p)=>{m.kb(\"AveragePool\",r,{format:p?\"NHWC\":\"NCHW\",auto_pad:e,ceil_mode:t,count_include_pad:a,storage_order:n,dilations:o?Array.from(i().subarray(Number(o)>>>0,Number(u)>>>0)):[],kernel_shape:s?Array.from(i().subarray(Number(s)>>>0,Number(f)>>>0)):[],pads:b?Array.from(i().subarray(Number(b)>>>0,Number(l)>>>0)):[],strides:c?Array.from(i().subarray(Number(c)>>>0,Number(d)>>>0)):[]})},925866:(r,e)=>{m.kb(\"GlobalMaxPool\",r,{format:e?\"NHWC\":\"NCHW\"})},925953:(r,e,t,a,n,o,u,s,f,b,l,c,d,p)=>{m.kb(\"MaxPool\",r,{format:p?\"NHWC\":\"NCHW\",auto_pad:e,ceil_mode:t,count_include_pad:a,storage_order:n,dilations:o?Array.from(i().subarray(Number(o)>>>0,Number(u)>>>0)):[],kernel_shape:s?Array.from(i().subarray(Number(s)>>>0,Number(f)>>>0)):[],pads:b?Array.from(i().subarray(Number(b)>>>0,Number(l)>>>0)):[],strides:c?Array.from(i().subarray(Number(c)>>>0,Number(d)>>>0)):[]})},926428:(r,e)=>{m.kb(\"GlobalMaxPool\",r,{format:e?\"NHWC\":\"NCHW\"})},926515:(r,e,t,a,n,o,u,s,f,b,l,c,d,p)=>{m.kb(\"MaxPool\",r,{format:p?\"NHWC\":\"NCHW\",auto_pad:e,ceil_mode:t,count_include_pad:a,storage_order:n,dilations:o?Array.from(i().subarray(Number(o)>>>0,Number(u)>>>0)):[],kernel_shape:s?Array.from(i().subarray(Number(s)>>>0,Number(f)>>>0)):[],pads:b?Array.from(i().subarray(Number(b)>>>0,Number(l)>>>0)):[],strides:c?Array.from(i().subarray(Number(c)>>>0,Number(d)>>>0)):[]})},926990:(r,e,t,a,n)=>{m.kb(\"Gemm\",r,{alpha:e,beta:t,transA:a,transB:n})},927094:r=>{m.kb(\"MatMul\",r,void 0)},927148:(r,e,t,a)=>{m.kb(\"ArgMax\",r,{keepDims:!!e,selectLastIndex:!!t,axis:a})},927256:(r,e,t,a)=>{m.kb(\"ArgMin\",r,{keepDims:!!e,selectLastIndex:!!t,axis:a})},927364:(r,e)=>{m.kb(\"Softmax\",r,{axis:e})},927427:(r,e)=>{m.kb(\"Concat\",r,{axis:e})},927487:(r,e,t,a,n)=>{m.kb(\"Split\",r,{axis:e,numOutputs:t,splitSizes:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},927643:r=>{m.kb(\"Expand\",r,void 0)},927697:(r,e)=>{m.kb(\"Gather\",r,{axis:Number(e)})},927768:(r,e)=>{m.kb(\"GatherElements\",r,{axis:Number(e)})},927847:(r,e)=>{m.kb(\"GatherND\",r,{batch_dims:Number(e)})},927926:(r,e,t,a,n,o,u,s,f,b,l)=>{m.kb(\"Resize\",r,{antialias:e,axes:t?Array.from(i().subarray(Number(t)>>>0,Number(a)>>>0)):[],coordinateTransformMode:Rr(n),cubicCoeffA:o,excludeOutside:u,extrapolationValue:s,keepAspectRatioPolicy:Rr(f),mode:Rr(b),nearestMode:Rr(l)})},928288:(r,e,t,a,n,o,u)=>{m.kb(\"Slice\",r,{starts:e?Array.from(i().subarray(Number(e)>>>0,Number(t)>>>0)):[],ends:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[],axes:o?Array.from(i().subarray(Number(o)>>>0,Number(u)>>>0)):[]})},928552:r=>{m.kb(\"Tile\",r,void 0)},928604:(r,e,t)=>{m.kb(\"InstanceNormalization\",r,{epsilon:e,format:t?\"NHWC\":\"NCHW\"})},928718:(r,e,t)=>{m.kb(\"InstanceNormalization\",r,{epsilon:e,format:t?\"NHWC\":\"NCHW\"})},928832:r=>{m.kb(\"Range\",r,void 0)},928885:(r,e)=>{m.kb(\"Einsum\",r,{equation:Rr(e)})},928966:(r,e,t,a,n)=>{m.kb(\"Pad\",r,{mode:e,value:t,pads:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[]})},929109:(r,e,t,a,n,o)=>{m.kb(\"BatchNormalization\",r,{epsilon:e,momentum:t,spatial:!!n,trainingMode:!!a,format:o?\"NHWC\":\"NCHW\"})},929278:(r,e,t,a,n,o)=>{m.kb(\"BatchNormalization\",r,{epsilon:e,momentum:t,spatial:!!n,trainingMode:!!a,format:o?\"NHWC\":\"NCHW\"})},929447:(r,e,t)=>{m.kb(\"CumSum\",r,{exclusive:Number(e),reverse:Number(t)})},929544:(r,e,t)=>{m.kb(\"DequantizeLinear\",r,{axis:e,blockSize:t})},929634:(r,e,t,a,n)=>{m.kb(\"GridSample\",r,{align_corners:e,mode:Rr(t),padding_mode:Rr(a),format:n?\"NHWC\":\"NCHW\"})},929804:(r,e,t,a,n)=>{m.kb(\"GridSample\",r,{align_corners:e,mode:Rr(t),padding_mode:Rr(a),format:n?\"NHWC\":\"NCHW\"})},929974:(r,e,t,a,n,o,u,s,f)=>{m.kb(\"Attention\",r,{numHeads:e,isUnidirectional:t,maskFilterValue:a,scale:n,doRotary:o,qkvHiddenSizes:u?Array.from(i().subarray(Number(s)>>>0,Number(s)+u>>>0)):[],pastPresentShareBuffer:!!f})},930246:r=>{m.kb(\"BiasAdd\",r,void 0)},930301:r=>{m.kb(\"BiasSplitGelu\",r,void 0)},930362:r=>{m.kb(\"FastGelu\",r,void 0)},930418:(r,e,a,n,o,u,f,b,l,c,d,p,h,y,v,g)=>{m.kb(\"Conv\",r,{format:p?\"NHWC\":\"NCHW\",auto_pad:e,dilations:a?Array.from(i().subarray(Number(a)>>>0,Number(n)>>>0)):[],group:o,kernel_shape:u?Array.from(i().subarray(Number(u)>>>0,Number(f)>>>0)):[],pads:b?Array.from(i().subarray(Number(b)>>>0,Number(l)>>>0)):[],strides:c?Array.from(i().subarray(Number(c)>>>0,Number(d)>>>0)):[],w_is_const:()=>!!t()[Number(h)>>>0],activation:Rr(y),activation_params:v?Array.from(s().subarray(Number(v)>>>0,Number(g)>>>0)):[]})},931002:r=>{m.kb(\"Gelu\",r,void 0)},931054:(r,e,t,a,n,o,i,u,s)=>{m.kb(\"GroupQueryAttention\",r,{numHeads:e,kvNumHeads:t,scale:a,softcap:n,doRotary:o,rotaryInterleaved:i,smoothSoftmax:u,localWindowSize:s})},931271:(r,e,t,a)=>{m.kb(\"LayerNormalization\",r,{axis:e,epsilon:t,simplified:!!a})},931382:(r,e,t,a)=>{m.kb(\"LayerNormalization\",r,{axis:e,epsilon:t,simplified:!!a})},931493:(r,e,t,a,n,o)=>{m.kb(\"MatMulNBits\",r,{k:e,n:t,accuracyLevel:a,bits:n,blockSize:o})},931620:(r,e,t,a,n,o)=>{m.kb(\"MultiHeadAttention\",r,{numHeads:e,isUnidirectional:t,maskFilterValue:a,scale:n,doRotary:o})},931779:(r,e)=>{m.kb(\"QuickGelu\",r,{alpha:e})},931843:(r,e,t,a,n)=>{m.kb(\"RotaryEmbedding\",r,{interleaved:!!e,numHeads:t,rotaryEmbeddingDim:a,scale:n})},931982:(r,e,t)=>{m.kb(\"SkipLayerNormalization\",r,{epsilon:e,simplified:!!t})},932084:(r,e,t)=>{m.kb(\"SkipLayerNormalization\",r,{epsilon:e,simplified:!!t})},932186:(r,e,t,a)=>{m.kb(\"GatherBlockQuantized\",r,{gatherAxis:e,quantizeAxis:t,blockSize:a})},932307:r=>{m.$b(r)},932341:(r,e)=>m.cc(Number(r),Number(e),m.Gb.hc,m.Gb.errors)};function ur(r,e,t){return et((async()=>{await m.Yb(Number(r),Number(e),Number(t))}))}function sr(){return\"undefined\"!=typeof wasmOffsetConverter}function fr(r){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${r})`,this.status=r}var br=r=>{r.terminate(),r.onmessage=()=>{}},lr=r=>{0==yr.length&&(Cr(),Ar(yr[0]));var e=yr.pop();if(!e)return 6;vr.push(e),Nr[r.Bb]=e,e.Bb=r.Bb;var t={cmd:\"run\",start_routine:r.ic,arg:r.Rb,pthread_ptr:r.Bb};return e.postMessage(t,r.nc),0},mr=0,cr=(r,e,...t)=>{for(var a=2*t.length,n=Ma(),o=Ea(8*a),i=o>>>3,u=0;u<t.length;u++){var s=t[u];\"bigint\"==typeof s?(U[i+2*u]=1n,U[i+2*u+1]=s):(U[i+2*u]=0n,f()[i+2*u+1>>>0]=s)}return r=Ca(r,0,a,o,e),Wa(n),r};function dr(r){if(h)return cr(0,1,r);if(D=r,!(0<mr)){for(var e of vr)br(e);for(e of yr)br(e);yr=[],vr=[],Nr=[],$=!0}w(0,new fr(r))}function pr(r){if(h)return cr(1,0,r);hr(r)}var hr=r=>{if(D=r,h)throw pr(r),\"unwind\";dr(r)},yr=[],vr=[],gr=[],Nr={},kr=r=>{var e=r.Bb;delete Nr[e],yr.push(r),vr.splice(vr.indexOf(r),1),r.Bb=0,_a(e)};function wr(){gr.forEach((r=>r()))}var Ar=r=>new Promise((e=>{r.onmessage=t=>{var a=(t=t.data).cmd;if(t.targetThread&&t.targetThread!=ga()){var n=Nr[t.targetThread];n?n.postMessage(t,t.transferList):S(`Internal error! Worker sent a message \"${a}\" to target pthread ${t.targetThread}, but that thread no longer exists!`)}else\"checkMailbox\"===a?He():\"spawnThread\"===a?lr(t):\"cleanupThread\"===a?kr(Nr[t.thread]):\"killThread\"===a?(t=t.thread,a=Nr[t],delete Nr[t],br(a),_a(t),vr.splice(vr.indexOf(a),1),a.Bb=0):\"cancelThread\"===a?Nr[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===a?(r.loaded=!0,e(r)):\"alert\"===a?alert(`Thread ${t.threadId}: ${t.text}`):\"setimmediate\"===t.target?r.postMessage(t):\"callHandler\"===a?m[t.handler](...t.args):a&&S(`worker sent an unknown command ${a}`)},r.onerror=r=>{throw S(`worker sent an error! ${r.filename}:${r.lineno}: ${r.message}`),r};var t,a=[];for(t of[])m.hasOwnProperty(t)&&a.push(t);r.postMessage({cmd:\"load\",handlers:a,wasmMemory:M,wasmModule:x})}));function Cr(){var r=new Worker(import.meta.url.startsWith(\"file:\")?new URL(BUILD_DEFS.BUNDLE_FILENAME,import.meta.url):new URL(import.meta.url),{type:\"module\",workerData:\"em-pthread\",name:\"em-pthread\"});yr.push(r)}var _r=r=>{for(;0<r.length;)r.shift()(m)},Or=()=>{var r=ga(),e=u()[r+52>>>2>>>0];r=u()[r+56>>>2>>>0],Sa(e,e-r),Wa(e)},Tr=(r,e)=>{mr=0,r=xa(r,e),0<mr?D=r:Oa(r)};class Sr{constructor(r){this.Kb=r-24}}function Wr(r,e,t){var a=new Sr(r>>>=0);throw e>>>=0,t>>>=0,u()[a.Kb+16>>>2>>>0]=0,u()[a.Kb+4>>>2>>>0]=e,u()[a.Kb+8>>>2>>>0]=t,r}function Er(r,e,t,a){return h?cr(2,1,r,e,t,a):Mr(r,e,t,a)}function Mr(r,e,t,a){if(r>>>=0,e>>>=0,t>>>=0,a>>>=0,void 0===y)return S(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var n=[];return h&&0===n.length?Er(r,e,t,a):(r={ic:t,Bb:r,Rb:a,nc:n},h?(r.Nb=\"spawnThread\",postMessage(r,n),0):lr(r))}var xr=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Dr=(r,e,t)=>{var a=(e>>>=0)+t;for(t=e;r[t]&&!(t>=a);)++t;if(16<t-e&&r.buffer&&xr)return xr.decode(r.buffer instanceof y?r.slice(e,t):r.subarray(e,t));for(a=\"\";e<t;){var n=r[e++];if(128&n){var o=63&r[e++];if(192==(224&n))a+=String.fromCharCode((31&n)<<6|o);else{var i=63&r[e++];65536>(n=224==(240&n)?(15&n)<<12|o<<6|i:(7&n)<<18|o<<12|i<<6|63&r[e++])?a+=String.fromCharCode(n):(n-=65536,a+=String.fromCharCode(55296|n>>10,56320|1023&n))}}else a+=String.fromCharCode(n)}return a},Rr=(r,e)=>(r>>>=0)?Dr(a(),r,e):\"\";function Hr(r,e,t){return h?cr(3,1,r,e,t):0}function Fr(r,e){if(h)return cr(4,1,r,e)}var Pr=r=>{for(var e=0,t=0;t<r.length;++t){var a=r.charCodeAt(t);127>=a?e++:2047>=a?e+=2:55296<=a&&57343>=a?(e+=4,++t):e+=3}return e},Br=(r,e,t,a)=>{if(!(0<a))return 0;var n=t>>>=0;a=t+a-1;for(var o=0;o<r.length;++o){var i=r.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),127>=i){if(t>=a)break;e[t++>>>0]=i}else{if(2047>=i){if(t+1>=a)break;e[t++>>>0]=192|i>>6}else{if(65535>=i){if(t+2>=a)break;e[t++>>>0]=224|i>>12}else{if(t+3>=a)break;e[t++>>>0]=240|i>>18,e[t++>>>0]=128|i>>12&63}e[t++>>>0]=128|i>>6&63}e[t++>>>0]=128|63&i}}return e[t>>>0]=0,t-n},Ir=(r,e,t)=>Br(r,a(),e,t);function jr(r,e){if(h)return cr(5,1,r,e)}function Ur(r,e,t){if(h)return cr(6,1,r,e,t)}function Lr(r,e,t){return h?cr(7,1,r,e,t):0}function Gr(r,e){if(h)return cr(8,1,r,e)}function $r(r,e,t){if(h)return cr(9,1,r,e,t)}function Yr(r,e,t,a){if(h)return cr(10,1,r,e,t,a)}function zr(r,e,t,a){if(h)return cr(11,1,r,e,t,a)}function Vr(r,e,t,a){if(h)return cr(12,1,r,e,t,a)}function qr(r){if(h)return cr(13,1,r)}function Jr(r,e){if(h)return cr(14,1,r,e)}function Qr(r,e,t){if(h)return cr(15,1,r,e,t)}var Xr,Zr,Kr=()=>{K(\"\")},re=r=>{for(var e=\"\";a()[r>>>0];)e+=Xr[a()[r++>>>0]];return e},ee={},te={},ae={};function ne(r,e,t={}){if(!(\"argPackAdvance\"in e))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");return function(r,e,t={}){var a=e.name;if(!r)throw new Zr(`type \"${a}\" must have a positive integer typeid pointer`);if(te.hasOwnProperty(r)){if(t.Tb)return;throw new Zr(`Cannot register type '${a}' twice`)}te[r]=e,delete ae[r],ee.hasOwnProperty(r)&&(e=ee[r],delete ee[r],e.forEach((r=>r())))}(r,e,t)}var oe=(r,e,s)=>{switch(e){case 1:return s?r=>t()[r>>>0]:r=>a()[r>>>0];case 2:return s?r=>n()[r>>>1>>>0]:r=>o()[r>>>1>>>0];case 4:return s?r=>i()[r>>>2>>>0]:r=>u()[r>>>2>>>0];case 8:return s?r=>U[r>>>3]:r=>L[r>>>3];default:throw new TypeError(`invalid integer width (${e}): ${r}`)}};function ie(r,e,t){t>>>=0,ne(r>>>=0,{name:e=re(e>>>0),fromWireType:r=>r,toWireType:function(r,e){if(\"bigint\"!=typeof e&&\"number\"!=typeof e)throw e=null===e?\"null\":\"object\"==(r=typeof e)||\"array\"===r||\"function\"===r?e.toString():\"\"+e,new TypeError(`Cannot convert \"${e}\" to ${this.name}`);return\"number\"==typeof e&&(e=BigInt(e)),e},argPackAdvance:ue,readValueFromPointer:oe(e,t,-1==e.indexOf(\"u\")),Eb:null})}var ue=8;function se(r,e,t,n){ne(r>>>=0,{name:e=re(e>>>0),fromWireType:function(r){return!!r},toWireType:function(r,e){return e?t:n},argPackAdvance:ue,readValueFromPointer:function(r){return this.fromWireType(a()[r>>>0])},Eb:null})}var fe=[],be=[];function le(r){9<(r>>>=0)&&0==--be[r+1]&&(be[r]=void 0,fe.push(r))}var me=r=>{if(!r)throw new Zr(\"Cannot use deleted val. handle = \"+r);return be[r]},ce=r=>{switch(r){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:const e=fe.pop()||be.length;return be[e]=r,be[e+1]=1,e}};function de(r){return this.fromWireType(u()[r>>>2>>>0])}var pe={name:\"emscripten::val\",fromWireType:r=>{var e=me(r);return le(r),e},toWireType:(r,e)=>ce(e),argPackAdvance:ue,readValueFromPointer:de,Eb:null};function he(r){return ne(r>>>0,pe)}var ye=(r,e)=>{switch(e){case 4:return function(r){return this.fromWireType(s()[r>>>2>>>0])};case 8:return function(r){return this.fromWireType(f()[r>>>3>>>0])};default:throw new TypeError(`invalid float width (${e}): ${r}`)}};function ve(r,e,t){t>>>=0,ne(r>>>=0,{name:e=re(e>>>0),fromWireType:r=>r,toWireType:(r,e)=>e,argPackAdvance:ue,readValueFromPointer:ye(e,t),Eb:null})}function ge(r,e,t,a,n){if(r>>>=0,t>>>=0,e=re(e>>>0),-1===n&&(n=4294967295),n=r=>r,0===a){var o=32-8*t;n=r=>r<<o>>>o}var i=e.includes(\"unsigned\")?function(r,e){return e>>>0}:function(r,e){return e};ne(r,{name:e,fromWireType:n,toWireType:i,argPackAdvance:ue,readValueFromPointer:oe(e,t,0!==a),Eb:null})}function Ne(r,e,a){function n(r){var e=u()[r>>>2>>>0];return r=u()[r+4>>>2>>>0],new o(t().buffer,r,e)}var o=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][e];ne(r>>>=0,{name:a=re(a>>>0),fromWireType:n,argPackAdvance:ue,readValueFromPointer:n},{Tb:!0})}function ke(r,e){r>>>=0;var t=\"std::string\"===(e=re(e>>>0));ne(r,{name:e,fromWireType:function(r){var e=u()[r>>>2>>>0],n=r+4;if(t)for(var o=n,i=0;i<=e;++i){var s=n+i;if(i==e||0==a()[s>>>0]){if(o=Rr(o,s-o),void 0===f)var f=o;else f+=String.fromCharCode(0),f+=o;o=s+1}}else{for(f=Array(e),i=0;i<e;++i)f[i]=String.fromCharCode(a()[n+i>>>0]);f=f.join(\"\")}return Na(r),f},toWireType:function(r,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var n=\"string\"==typeof e;if(!(n||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array))throw new Zr(\"Cannot pass non-string to std::string\");var o=t&&n?Pr(e):e.length,i=ka(4+o+1),s=i+4;if(u()[i>>>2>>>0]=o,t&&n)Ir(e,s,o+1);else if(n)for(n=0;n<o;++n){var f=e.charCodeAt(n);if(255<f)throw Na(s),new Zr(\"String has UTF-16 code units that do not fit in 8 bits\");a()[s+n>>>0]=f}else for(n=0;n<o;++n)a()[s+n>>>0]=e[n];return null!==r&&r.push(Na,i),i},argPackAdvance:ue,readValueFromPointer:de,Eb(r){Na(r)}})}var we=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Ae=(r,e)=>{for(var t=r>>1,i=t+e/2;!(t>=i)&&o()[t>>>0];)++t;if(32<(t<<=1)-r&&we)return we.decode(a().slice(r,t));for(t=\"\",i=0;!(i>=e/2);++i){var u=n()[r+2*i>>>1>>>0];if(0==u)break;t+=String.fromCharCode(u)}return t},Ce=(r,e,t)=>{if(t??=2147483647,2>t)return 0;var a=e;t=(t-=2)<2*r.length?t/2:r.length;for(var o=0;o<t;++o){var i=r.charCodeAt(o);n()[e>>>1>>>0]=i,e+=2}return n()[e>>>1>>>0]=0,e-a},_e=r=>2*r.length,Oe=(r,e)=>{for(var t=0,a=\"\";!(t>=e/4);){var n=i()[r+4*t>>>2>>>0];if(0==n)break;++t,65536<=n?(n-=65536,a+=String.fromCharCode(55296|n>>10,56320|1023&n)):a+=String.fromCharCode(n)}return a},Te=(r,e,t)=>{if(e>>>=0,t??=2147483647,4>t)return 0;var a=e;t=a+t-4;for(var n=0;n<r.length;++n){var o=r.charCodeAt(n);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&r.charCodeAt(++n)),i()[e>>>2>>>0]=o,(e+=4)+4>t)break}return i()[e>>>2>>>0]=0,e-a},Se=r=>{for(var e=0,t=0;t<r.length;++t){var a=r.charCodeAt(t);55296<=a&&57343>=a&&++t,e+=4}return e};function We(r,e,t){if(r>>>=0,e>>>=0,t=re(t>>>=0),2===e)var a=Ae,n=Ce,i=_e,s=r=>o()[r>>>1>>>0];else 4===e&&(a=Oe,n=Te,i=Se,s=r=>u()[r>>>2>>>0]);ne(r,{name:t,fromWireType:r=>{for(var t,n=u()[r>>>2>>>0],o=r+4,i=0;i<=n;++i){var f=r+4+i*e;i!=n&&0!=s(f)||(o=a(o,f-o),void 0===t?t=o:(t+=String.fromCharCode(0),t+=o),o=f+e)}return Na(r),t},toWireType:(r,a)=>{if(\"string\"!=typeof a)throw new Zr(`Cannot pass non-string to C++ string type ${t}`);var o=i(a),s=ka(4+o+e);return u()[s>>>2>>>0]=o/e,n(a,s+4,o+e),null!==r&&r.push(Na,s),s},argPackAdvance:ue,readValueFromPointer:de,Eb(r){Na(r)}})}function Ee(r,e){ne(r>>>=0,{Ub:!0,name:e=re(e>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var Me=()=>1;function xe(r){wa(r>>>0,!p,1,!d,131072,!1),wr()}var De=r=>{if(!$)try{if(r(),!(0<mr))try{h?Oa(D):hr(D)}catch(r){r instanceof fr||\"unwind\"==r||w(0,r)}}catch(r){r instanceof fr||\"unwind\"==r||w(0,r)}};function Re(r){r>>>=0,\"function\"==typeof Atomics.oc&&(Atomics.oc(i(),r>>>2,r).value.then(He),r+=128,Atomics.store(i(),r>>>2,1))}var He=()=>{var r=ga();r&&(Re(r),De(Ta))};function Fe(r,e){(r>>>=0)==e>>>0?setTimeout(He):h?postMessage({targetThread:r,cmd:\"checkMailbox\"}):(r=Nr[r])&&r.postMessage({cmd:\"checkMailbox\"})}var Pe=[];function Be(r,e,t,a,n){for(e>>>=0,a/=2,Pe.length=a,t=n>>>0>>>3,n=0;n<a;n++)Pe[n]=U[t+2*n]?U[t+2*n+1]:f()[t+2*n+1>>>0];return(e?ir[e]:da[r])(...Pe)}function Ie(r){r>>>=0,h?postMessage({cmd:\"cleanupThread\",thread:r}):kr(Nr[r])}function je(r){}var Ue=(r,e)=>{var t=te[r];if(void 0===t)throw r=ha(r),t=re(r),Na(r),new Zr(`${e} has unknown type ${t}`);return t},Le=(r,e,t)=>{var a=[];return r=r.toWireType(a,t),a.length&&(u()[e>>>2>>>0]=ce(a)),r};function Ge(r,e,t){return e>>>=0,t>>>=0,r=me(r>>>0),e=Ue(e,\"emval::as\"),Le(e,t,r)}function $e(r,e){return e>>>=0,r=me(r>>>0),(e=Ue(e,\"emval::as\")).toWireType(null,r)}var Ye=r=>{try{r()}catch(r){K(r)}},ze=0,Ve=null,qe=0,Je=[],Qe={},Xe={},Ze=0,Ke=null,rt=[];function et(r){return function(r){if(!$){if(0===ze){var e=!1,t=!1;r(((r=0)=>{if(!$&&(qe=r,e=!0,t)){ze=2,Ye((()=>Ha(Ve))),\"undefined\"!=typeof Browser&&Browser.Lb.Sb&&Browser.Lb.resume(),r=!1;try{var a=function(){var r=i()[Ve+8>>>2>>>0];return r=pa[Xe[r]],--mr,r()}()}catch(e){a=e,r=!0}var n=!1;if(!Ve){var o=Ke;o&&(Ke=null,(r?o.reject:o.resolve)(a),n=!0)}if(r&&!n)throw a}})),t=!0,e||(ze=1,Ve=function(){var r=ka(65548),e=r+12;u()[r>>>2>>>0]=e,u()[r+4>>>2>>>0]=e+65536,e=Je[0];var t=Qe[e];return void 0===t&&(t=Ze++,Qe[e]=t,Xe[t]=e),e=t,i()[r+8>>>2>>>0]=e,r}(),\"undefined\"!=typeof Browser&&Browser.Lb.Sb&&Browser.Lb.pause(),Ye((()=>Da(Ve))))}else 2===ze?(ze=0,Ye(Fa),Na(Ve),Ve=null,rt.forEach(De)):K(`invalid state: ${ze}`);return qe}}((e=>{r().then(e)}))}function tt(r){return r>>>=0,et((()=>(r=me(r)).then(ce)))}var at=[];function nt(r,e,t,a){return t>>>=0,a>>>=0,(r=at[r>>>0])(null,e=me(e>>>0),t,a)}var ot={},it=r=>{var e=ot[r];return void 0===e?re(r):e};function ut(r,e,t,a,n){return t>>>=0,a>>>=0,n>>>=0,(r=at[r>>>0])(e=me(e>>>0),e[t=it(t)],a,n)}var st=()=>\"object\"==typeof globalThis?globalThis:Function(\"return this\")();function ft(r){return 0==(r>>>=0)?ce(st()):(r=it(r),ce(st()[r]))}var bt=r=>{var e=at.length;return at.push(r),e},lt=(r,e)=>{for(var t=Array(r),a=0;a<r;++a)t[a]=Ue(u()[e+4*a>>>2>>>0],\"parameter \"+a);return t},mt=(r,e)=>Object.defineProperty(e,\"name\",{value:r});function ct(r,e,t){var a=(e=lt(r,e>>>0)).shift();r--;var n=\"return function (obj, func, destructorsRef, args) {\\n\",o=0,i=[];0===t&&i.push(\"obj\");for(var u=[\"retType\"],s=[a],f=0;f<r;++f)i.push(\"arg\"+f),u.push(\"argType\"+f),s.push(e[f]),n+=`  var arg${f} = argType${f}.readValueFromPointer(args${o?\"+\"+o:\"\"});\\n`,o+=e[f].argPackAdvance;return n+=`  var rv = ${1===t?\"new func\":\"func.call\"}(${i.join(\", \")});\\n`,a.Ub||(u.push(\"emval_returnValue\"),s.push(Le),n+=\"  return emval_returnValue(retType, destructorsRef, rv);\\n\"),u.push(n+\"};\\n\"),r=function(r){var e=Function;if(!(e instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof e} which is not a function`);var t=mt(e.name||\"unknownFunctionName\",(function(){}));return t.prototype=e.prototype,t=new t,(r=e.apply(t,r))instanceof Object?r:t}(u)(...s),t=`methodCaller<(${e.map((r=>r.name)).join(\", \")}) => ${a.name}>`,bt(mt(t,r))}function dt(r){return r=it(r>>>0),ce(m[r])}function pt(r,e){return e>>>=0,r=me(r>>>0),e=me(e),ce(r[e])}function ht(r){9<(r>>>=0)&&(be[r+1]+=1)}function yt(){return ce([])}function vt(r){r=me(r>>>0);for(var e=Array(r.length),t=0;t<r.length;t++)e[t]=r[t];return ce(e)}function gt(r){return ce(it(r>>>0))}function Nt(){return ce({})}function kt(r){for(var e=me(r>>>=0);e.length;){var t=e.pop();e.pop()(t)}le(r)}function wt(r,e,t){e>>>=0,t>>>=0,r=me(r>>>0),e=me(e),t=me(t),r[e]=t}function At(r,e){return e>>>=0,r=(r=Ue(r>>>0,\"_emval_take_value\")).readValueFromPointer(e),ce(r)}function Ct(r,e){r=-9007199254740992>r||9007199254740992<r?NaN:Number(r),e>>>=0,r=new Date(1e3*r),i()[e>>>2>>>0]=r.getUTCSeconds(),i()[e+4>>>2>>>0]=r.getUTCMinutes(),i()[e+8>>>2>>>0]=r.getUTCHours(),i()[e+12>>>2>>>0]=r.getUTCDate(),i()[e+16>>>2>>>0]=r.getUTCMonth(),i()[e+20>>>2>>>0]=r.getUTCFullYear()-1900,i()[e+24>>>2>>>0]=r.getUTCDay(),r=(r.getTime()-Date.UTC(r.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[e+28>>>2>>>0]=r}var _t=r=>0==r%4&&(0!=r%100||0==r%400),Ot=[0,31,60,91,121,152,182,213,244,274,305,335],Tt=[0,31,59,90,120,151,181,212,243,273,304,334];function St(r,e){r=-9007199254740992>r||9007199254740992<r?NaN:Number(r),e>>>=0,r=new Date(1e3*r),i()[e>>>2>>>0]=r.getSeconds(),i()[e+4>>>2>>>0]=r.getMinutes(),i()[e+8>>>2>>>0]=r.getHours(),i()[e+12>>>2>>>0]=r.getDate(),i()[e+16>>>2>>>0]=r.getMonth(),i()[e+20>>>2>>>0]=r.getFullYear()-1900,i()[e+24>>>2>>>0]=r.getDay();var t=(_t(r.getFullYear())?Ot:Tt)[r.getMonth()]+r.getDate()-1|0;i()[e+28>>>2>>>0]=t,i()[e+36>>>2>>>0]=-60*r.getTimezoneOffset(),t=new Date(r.getFullYear(),6,1).getTimezoneOffset();var a=new Date(r.getFullYear(),0,1).getTimezoneOffset();r=0|(t!=a&&r.getTimezoneOffset()==Math.min(a,t)),i()[e+32>>>2>>>0]=r}function Wt(r){r>>>=0;var e=new Date(i()[r+20>>>2>>>0]+1900,i()[r+16>>>2>>>0],i()[r+12>>>2>>>0],i()[r+8>>>2>>>0],i()[r+4>>>2>>>0],i()[r>>>2>>>0],0),t=i()[r+32>>>2>>>0],a=e.getTimezoneOffset(),n=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=new Date(e.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(o,n);return 0>t?i()[r+32>>>2>>>0]=Number(n!=o&&u==a):0<t!=(u==a)&&(n=Math.max(o,n),e.setTime(e.getTime()+6e4*((0<t?u:n)-a))),i()[r+24>>>2>>>0]=e.getDay(),t=(_t(e.getFullYear())?Ot:Tt)[e.getMonth()]+e.getDate()-1|0,i()[r+28>>>2>>>0]=t,i()[r>>>2>>>0]=e.getSeconds(),i()[r+4>>>2>>>0]=e.getMinutes(),i()[r+8>>>2>>>0]=e.getHours(),i()[r+12>>>2>>>0]=e.getDate(),i()[r+16>>>2>>>0]=e.getMonth(),i()[r+20>>>2>>>0]=e.getYear(),r=e.getTime(),BigInt(isNaN(r)?-1:r/1e3)}function Et(r,e,t,a,n,o,i){return h?cr(16,1,r,e,t,a,n,o,i):-52}function Mt(r,e,t,a,n,o){if(h)return cr(17,1,r,e,t,a,n,o)}function xt(r,e,t,a){r>>>=0,e>>>=0,t>>>=0,a>>>=0;var n=(new Date).getFullYear(),o=new Date(n,0,1),s=new Date(n,6,1);n=o.getTimezoneOffset();var f=s.getTimezoneOffset(),b=Math.max(n,f);u()[r>>>2>>>0]=60*b,i()[e>>>2>>>0]=Number(n!=f),o=(r=r=>r.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:\"short\"}).split(\" \")[1])(o),s=r(s),f<n?(Ir(o,t,17),Ir(s,a,17)):(Ir(o,a,17),Ir(s,t,17))}var Dt=[],Rt=(r,e)=>{Dt.length=0;for(var t;t=a()[r++>>>0];){var n=105!=t;e+=(n&=112!=t)&&e%8?4:0,Dt.push(112==t?u()[e>>>2>>>0]:106==t?U[e>>>3]:105==t?i()[e>>>2>>>0]:f()[e>>>3>>>0]),e+=n?8:4}return Dt};function Ht(r,e,t){return r>>>=0,e=Rt(e>>>0,t>>>0),ir[r](...e)}function Ft(r,e,t){return r>>>=0,e=Rt(e>>>0,t>>>0),ir[r](...e)}var Pt=()=>{},Bt=()=>Date.now();function It(r,e){return S(Rr(r>>>0,e>>>0))}var jt,Ut=()=>{throw mr+=1,\"unwind\"};function Lt(){return 4294901760}jt=()=>performance.timeOrigin+performance.now();var Gt=()=>navigator.hardwareConcurrency;function $t(){return K(\"Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER\"),0}function Yt(r){r>>>=0;var e=a().length;if(r<=e||4294901760<r)return!1;for(var t=1;4>=t;t*=2){var n=e*(1+.2/t);n=Math.min(n,r+100663296);var o=Math;n=Math.max(r,n);r:{o=(o.min.call(o,4294901760,n+(65536-n%65536)%65536)-M.buffer.byteLength+65535)/65536;try{M.grow(o),Y();var i=1;break r}catch(r){}i=void 0}if(i)return!0}return!1}var zt=()=>(K(\"Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER\"),0),Vt={},qt=r=>{r.forEach((r=>{var e=zt();e&&(Vt[e]=r)}))};function Jt(){var r=Error().stack.toString().split(\"\\n\");return\"Error\"==r[0]&&r.shift(),qt(r),Vt.Qb=zt(),Vt.fc=r,Vt.Qb}function Qt(r,e,t){if(r>>>=0,e>>>=0,Vt.Qb==r)var a=Vt.fc;else\"Error\"==(a=Error().stack.toString().split(\"\\n\"))[0]&&a.shift(),qt(a);for(var n=3;a[n]&&zt()!=r;)++n;for(r=0;r<t&&a[r+n];++r)i()[e+4*r>>>2>>>0]=zt();return r}var Xt,Zt={},Kt=()=>{if(!Xt){var r,e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:\"./this.program\"};for(r in Zt)void 0===Zt[r]?delete e[r]:e[r]=Zt[r];var t=[];for(r in e)t.push(`${r}=${e[r]}`);Xt=t}return Xt};function ra(r,e){if(h)return cr(18,1,r,e);r>>>=0,e>>>=0;var a=0;return Kt().forEach(((n,o)=>{var i=e+a;for(o=u()[r+4*o>>>2>>>0]=i,i=0;i<n.length;++i)t()[o++>>>0]=n.charCodeAt(i);t()[o>>>0]=0,a+=n.length+1})),0}function ea(r,e){if(h)return cr(19,1,r,e);r>>>=0,e>>>=0;var t=Kt();u()[r>>>2>>>0]=t.length;var a=0;return t.forEach((r=>a+=r.length+1)),u()[e>>>2>>>0]=a,0}function ta(r){return h?cr(20,1,r):52}function aa(r,e,t,a){return h?cr(21,1,r,e,t,a):52}function na(r,e,t,a){return h?cr(22,1,r,e,t,a):70}var oa=[null,[],[]];function ia(r,e,t,n){if(h)return cr(23,1,r,e,t,n);e>>>=0,t>>>=0,n>>>=0;for(var o=0,i=0;i<t;i++){var s=u()[e>>>2>>>0],f=u()[e+4>>>2>>>0];e+=8;for(var b=0;b<f;b++){var l=a()[s+b>>>0],m=oa[r];0===l||10===l?((1===r?T:S)(Dr(m,0)),m.length=0):m.push(l)}o+=f}return u()[n>>>2>>>0]=o,0}var ua=[31,29,31,30,31,30,31,31,30,31,30,31],sa=[31,28,31,30,31,30,31,31,30,31,30,31],fa=(r,e)=>{t().set(r,e>>>0)};function ba(r,e,t,a){function n(r,e,t){for(r=\"number\"==typeof r?r.toString():r||\"\";r.length<e;)r=t[0]+r;return r}function o(r,e){return n(r,e,\"0\")}function s(r,e){function t(r){return 0>r?-1:0<r?1:0}var a;return 0===(a=t(r.getFullYear()-e.getFullYear()))&&0===(a=t(r.getMonth()-e.getMonth()))&&(a=t(r.getDate()-e.getDate())),a}function f(r){switch(r.getDay()){case 0:return new Date(r.getFullYear()-1,11,29);case 1:return r;case 2:return new Date(r.getFullYear(),0,3);case 3:return new Date(r.getFullYear(),0,2);case 4:return new Date(r.getFullYear(),0,1);case 5:return new Date(r.getFullYear()-1,11,31);case 6:return new Date(r.getFullYear()-1,11,30)}}function b(r){var e=r.Cb;for(r=new Date(new Date(r.Db+1900,0,1).getTime());0<e;){var t=r.getMonth(),a=(_t(r.getFullYear())?ua:sa)[t];if(!(e>a-r.getDate())){r.setDate(r.getDate()+e);break}e-=a-r.getDate()+1,r.setDate(1),11>t?r.setMonth(t+1):(r.setMonth(0),r.setFullYear(r.getFullYear()+1))}return t=new Date(r.getFullYear()+1,0,4),e=f(new Date(r.getFullYear(),0,4)),t=f(t),0>=s(e,r)?0>=s(t,r)?r.getFullYear()+1:r.getFullYear():r.getFullYear()-1}r>>>=0,e>>>=0,t>>>=0,a>>>=0;var l=u()[a+40>>>2>>>0];for(var m in a={lc:i()[a>>>2>>>0],kc:i()[a+4>>>2>>>0],Ib:i()[a+8>>>2>>>0],Mb:i()[a+12>>>2>>>0],Jb:i()[a+16>>>2>>>0],Db:i()[a+20>>>2>>>0],vb:i()[a+24>>>2>>>0],Cb:i()[a+28>>>2>>>0],sc:i()[a+32>>>2>>>0],jc:i()[a+36>>>2>>>0],mc:l?Rr(l):\"\"},t=Rr(t),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})t=t.replace(new RegExp(m,\"g\"),l[m]);var c=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(m in l={\"%a\":r=>c[r.vb].substring(0,3),\"%A\":r=>c[r.vb],\"%b\":r=>d[r.Jb].substring(0,3),\"%B\":r=>d[r.Jb],\"%C\":r=>o((r.Db+1900)/100|0,2),\"%d\":r=>o(r.Mb,2),\"%e\":r=>n(r.Mb,2,\" \"),\"%g\":r=>b(r).toString().substring(2),\"%G\":b,\"%H\":r=>o(r.Ib,2),\"%I\":r=>(0==(r=r.Ib)?r=12:12<r&&(r-=12),o(r,2)),\"%j\":r=>{for(var e=0,t=0;t<=r.Jb-1;e+=(_t(r.Db+1900)?ua:sa)[t++]);return o(r.Mb+e,3)},\"%m\":r=>o(r.Jb+1,2),\"%M\":r=>o(r.kc,2),\"%n\":()=>\"\\n\",\"%p\":r=>0<=r.Ib&&12>r.Ib?\"AM\":\"PM\",\"%S\":r=>o(r.lc,2),\"%t\":()=>\"\\t\",\"%u\":r=>r.vb||7,\"%U\":r=>o(Math.floor((r.Cb+7-r.vb)/7),2),\"%V\":r=>{var e=Math.floor((r.Cb+7-(r.vb+6)%7)/7);if(2>=(r.vb+371-r.Cb-2)%7&&e++,e)53==e&&(4==(t=(r.vb+371-r.Cb)%7)||3==t&&_t(r.Db)||(e=1));else{e=52;var t=(r.vb+7-r.Cb-1)%7;(4==t||5==t&&_t(r.Db%400-1))&&e++}return o(e,2)},\"%w\":r=>r.vb,\"%W\":r=>o(Math.floor((r.Cb+7-(r.vb+6)%7)/7),2),\"%y\":r=>(r.Db+1900).toString().substring(2),\"%Y\":r=>r.Db+1900,\"%z\":r=>{var e=0<=(r=r.jc);return r=Math.abs(r)/60,(e?\"+\":\"-\")+String(\"0000\"+(r/60*100+r%60)).slice(-4)},\"%Z\":r=>r.mc,\"%%\":()=>\"%\"},t=t.replace(/%%/g,\"\\0\\0\"),l)t.includes(m)&&(t=t.replace(new RegExp(m,\"g\"),l[m](a)));return m=function(r){var e=Array(Pr(r)+1);return Br(r,e,0,e.length),e}(t=t.replace(/\\0\\0/g,\"%\")),m.length>e?0:(fa(m,r),m.length-1)}function la(r,e,t,a){return ba(r>>>0,e>>>0,t>>>0,a>>>0)}h||function(){for(var r=m.numThreads-1;r--;)Cr();z.unshift((()=>{J++,function(r){h?r():Promise.all(yr.map(Ar)).then(r)}((()=>Z()))}))}();for(var ma=Array(256),ca=0;256>ca;++ca)ma[ca]=String.fromCharCode(ca);Xr=ma,Zr=m.BindingError=class extends Error{constructor(r){super(r),this.name=\"BindingError\"}},m.InternalError=class extends Error{constructor(r){super(r),this.name=\"InternalError\"}},be.push(0,1,void 0,1,null,1,!0,1,!1,1),m.count_emval_handles=()=>be.length/2-5-fe.length;var da=[dr,pr,Er,Hr,Fr,jr,Ur,Lr,Gr,$r,Yr,zr,Vr,qr,Jr,Qr,Et,Mt,ra,ea,ta,aa,na,ia],pa=function(){function r(r,e){return pa=r.exports,pa=function(){var r=pa,e={};for(let[t,a]of Object.entries(r))e[t]=\"function\"==typeof a?(...r)=>{Je.push(t);try{return a(...r)}finally{$||(Je.pop(),Ve&&1===ze&&0===Je.length&&(ze=0,mr+=1,Ye(Ra),\"undefined\"!=typeof Fibers&&Fibers.tc()))}}:a;return e}(),pa=function(){var r=pa,e=r=>e=>r(e)>>>0,t=r=>()=>r()>>>0;return(r=Object.assign({},r)).Da=e(r.Da),r.gb=t(r.gb),r.ib=e(r.ib),r.emscripten_main_runtime_thread_id=t(r.emscripten_main_runtime_thread_id),r.tb=e(r.tb),r.ub=t(r.ub),r}(),gr.push(pa.jb),V.unshift(pa.Ca),x=e,Z(),pa}var e=or();if(J++,m.instantiateWasm)try{return m.instantiateWasm(e,r)}catch(r){S(`Module.instantiateWasm callback failed with error: ${r}`),l(r)}return rr||=m.locateFile?er(\"ort-wasm-simd-threaded.jsep.wasm\")?\"ort-wasm-simd-threaded.jsep.wasm\":m.locateFile?m.locateFile(\"ort-wasm-simd-threaded.jsep.wasm\",A):A+\"ort-wasm-simd-threaded.jsep.wasm\":new URL(\"ort-wasm-simd-threaded.jsep.wasm\",import.meta.url).href,function(r,e){var t=rr;return C||\"function\"!=typeof WebAssembly.instantiateStreaming||er(t)||tr(t)||\"function\"!=typeof fetch?nr(t,r,e):fetch(t,{credentials:\"same-origin\"}).then((a=>WebAssembly.instantiateStreaming(a,r).then(e,(function(a){return S(`wasm streaming compile failed: ${a}`),S(\"falling back to ArrayBuffer instantiation\"),nr(t,r,e)}))))}(e,(function(e){r(e.instance,e.module)})).catch(l),{}}(),ha=r=>(ha=pa.Da)(r),ya=()=>(ya=pa.Ea)();m._OrtInit=(r,e)=>(m._OrtInit=pa.Fa)(r,e),m._OrtGetLastError=(r,e)=>(m._OrtGetLastError=pa.Ga)(r,e),m._OrtCreateSessionOptions=(r,e,t,a,n,o,i,u,s,f)=>(m._OrtCreateSessionOptions=pa.Ha)(r,e,t,a,n,o,i,u,s,f),m._OrtAppendExecutionProvider=(r,e)=>(m._OrtAppendExecutionProvider=pa.Ia)(r,e),m._OrtAddFreeDimensionOverride=(r,e,t)=>(m._OrtAddFreeDimensionOverride=pa.Ja)(r,e,t),m._OrtAddSessionConfigEntry=(r,e,t)=>(m._OrtAddSessionConfigEntry=pa.Ka)(r,e,t),m._OrtReleaseSessionOptions=r=>(m._OrtReleaseSessionOptions=pa.La)(r),m._OrtCreateSession=(r,e,t)=>(m._OrtCreateSession=pa.Ma)(r,e,t),m._OrtReleaseSession=r=>(m._OrtReleaseSession=pa.Na)(r),m._OrtGetInputOutputCount=(r,e,t)=>(m._OrtGetInputOutputCount=pa.Oa)(r,e,t),m._OrtGetInputName=(r,e)=>(m._OrtGetInputName=pa.Pa)(r,e),m._OrtGetOutputName=(r,e)=>(m._OrtGetOutputName=pa.Qa)(r,e),m._OrtFree=r=>(m._OrtFree=pa.Ra)(r),m._OrtCreateTensor=(r,e,t,a,n,o)=>(m._OrtCreateTensor=pa.Sa)(r,e,t,a,n,o),m._OrtGetTensorData=(r,e,t,a,n)=>(m._OrtGetTensorData=pa.Ta)(r,e,t,a,n),m._OrtReleaseTensor=r=>(m._OrtReleaseTensor=pa.Ua)(r),m._OrtCreateRunOptions=(r,e,t,a)=>(m._OrtCreateRunOptions=pa.Va)(r,e,t,a),m._OrtAddRunConfigEntry=(r,e,t)=>(m._OrtAddRunConfigEntry=pa.Wa)(r,e,t),m._OrtReleaseRunOptions=r=>(m._OrtReleaseRunOptions=pa.Xa)(r),m._OrtCreateBinding=r=>(m._OrtCreateBinding=pa.Ya)(r),m._OrtBindInput=(r,e,t)=>(m._OrtBindInput=pa.Za)(r,e,t),m._OrtBindOutput=(r,e,t,a)=>(m._OrtBindOutput=pa._a)(r,e,t,a),m._OrtClearBoundOutputs=r=>(m._OrtClearBoundOutputs=pa.$a)(r),m._OrtReleaseBinding=r=>(m._OrtReleaseBinding=pa.ab)(r),m._OrtRunWithBinding=(r,e,t,a,n)=>(m._OrtRunWithBinding=pa.bb)(r,e,t,a,n),m._OrtRun=(r,e,t,a,n,o,i,u)=>(m._OrtRun=pa.cb)(r,e,t,a,n,o,i,u),m._OrtEndProfiling=r=>(m._OrtEndProfiling=pa.db)(r),m._JsepOutput=(r,e,t)=>(m._JsepOutput=pa.eb)(r,e,t),m._JsepGetNodeName=r=>(m._JsepGetNodeName=pa.fb)(r);var va,ga=()=>(ga=pa.gb)(),Na=m._free=r=>(Na=m._free=pa.hb)(r),ka=m._malloc=r=>(ka=m._malloc=pa.ib)(r),wa=(r,e,t,a,n,o)=>(wa=pa.lb)(r,e,t,a,n,o),Aa=()=>(Aa=pa.mb)(),Ca=(r,e,t,a,n)=>(Ca=pa.nb)(r,e,t,a,n),_a=r=>(_a=pa.ob)(r),Oa=r=>(Oa=pa.pb)(r),Ta=()=>(Ta=pa.qb)(),Sa=(r,e)=>(Sa=pa.rb)(r,e),Wa=r=>(Wa=pa.sb)(r),Ea=r=>(Ea=pa.tb)(r),Ma=()=>(Ma=pa.ub)(),xa=m.dynCall_ii=(r,e)=>(xa=m.dynCall_ii=pa.wb)(r,e),Da=r=>(Da=pa.xb)(r),Ra=()=>(Ra=pa.yb)(),Ha=r=>(Ha=pa.zb)(r),Fa=()=>(Fa=pa.Ab)();function Pa(){0<J||(h?(b(m),h||_r(V),startWorker(m)):(_r(z),0<J||va||(va=!0,m.calledRun=!0,$||(h||_r(V),b(m),h||_r(q)))))}return m.___start_em_js=932469,m.___stop_em_js=932715,m.stackSave=()=>Ma(),m.stackRestore=r=>Wa(r),m.stackAlloc=r=>Ea(r),m.setValue=function(r,e,a=\"i8\"){switch(a.endsWith(\"*\")&&(a=\"*\"),a){case\"i1\":case\"i8\":t()[r>>>0]=e;break;case\"i16\":n()[r>>>1>>>0]=e;break;case\"i32\":i()[r>>>2>>>0]=e;break;case\"i64\":U[r>>>3]=BigInt(e);break;case\"float\":s()[r>>>2>>>0]=e;break;case\"double\":f()[r>>>3>>>0]=e;break;case\"*\":u()[r>>>2>>>0]=e;break;default:K(`invalid type for setValue: ${a}`)}},m.getValue=function(r,e=\"i8\"){switch(e.endsWith(\"*\")&&(e=\"*\"),e){case\"i1\":case\"i8\":return t()[r>>>0];case\"i16\":return n()[r>>>1>>>0];case\"i32\":return i()[r>>>2>>>0];case\"i64\":return U[r>>>3];case\"float\":return s()[r>>>2>>>0];case\"double\":return f()[r>>>3>>>0];case\"*\":return u()[r>>>2>>>0];default:K(`invalid type for getValue: ${e}`)}},m.UTF8ToString=Rr,m.stringToUTF8=Ir,m.lengthBytesUTF8=Pr,X=function r(){va||Pa(),va||(X=r)},Pa(),m.PTR_SIZE=4,c});export default e;\"em-pthread\"===globalThis.self?.name&&e();","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { isNode } from './wasm-utils-env';\n\n/**\n * The origin of the current location.\n *\n * In Node.js, this is undefined.\n */\nconst origin = isNode || typeof location === 'undefined' ? undefined : location.origin;\n\nconst getScriptSrc = (): string | undefined => {\n  // if Nodejs, return undefined\n  if (isNode) {\n    return undefined;\n  }\n  // if It's ESM, use import.meta.url\n  if (BUILD_DEFS.IS_ESM) {\n    // For ESM, if the import.meta.url is a file URL, this usually means the bundler rewrites `import.meta.url` to\n    // the file path at compile time. In this case, this file path cannot be used to determine the runtime URL.\n    //\n    // We need to use the URL constructor like this:\n    // ```js\n    // new URL('actual-bundle-name.js', import.meta.url).href\n    // ```\n    // So that bundler can preprocess the URL correctly.\n    if (BUILD_DEFS.ESM_IMPORT_META_URL?.startsWith('file:')) {\n      // if the rewritten URL is a relative path, we need to use the origin to resolve the URL.\n      return new URL(new URL(BUILD_DEFS.BUNDLE_FILENAME, BUILD_DEFS.ESM_IMPORT_META_URL).href, origin).href;\n    }\n\n    return BUILD_DEFS.ESM_IMPORT_META_URL;\n  }\n\n  return typeof document !== 'undefined'\n    ? (document.currentScript as HTMLScriptElement)?.src\n    : // use `self.location.href` if available\n      typeof self !== 'undefined'\n      ? self.location?.href\n      : undefined;\n};\n\n/**\n * The classic script source URL. This is not always available in non ESModule environments.\n *\n * In Node.js, this is undefined.\n */\nexport const scriptSrc = getScriptSrc();\n\n/**\n * Infer the wasm path prefix from the script source URL.\n *\n * @returns The inferred wasm path prefix, or undefined if the script source URL is not available or is a blob URL.\n */\nexport const inferWasmPathPrefixFromScriptSrc = (): string | undefined => {\n  if (scriptSrc && !scriptSrc.startsWith('blob:')) {\n    return scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n  }\n  return undefined;\n};\n\n/**\n * Check if the given filename with prefix is from the same origin.\n */\nconst isSameOrigin = (filename: string, prefixOverride?: string) => {\n  try {\n    const baseUrl = prefixOverride ?? scriptSrc;\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.origin === origin;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Normalize the inputs to an absolute URL with the given prefix override. If failed, return undefined.\n */\nconst normalizeUrl = (filename: string, prefixOverride?: string) => {\n  const baseUrl = prefixOverride ?? scriptSrc;\n  try {\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.href;\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * Create a fallback URL if an absolute URL cannot be created by the normalizeUrl function.\n */\nconst fallbackUrl = (filename: string, prefixOverride?: string) => `${prefixOverride ?? './'}${filename}`;\n\n/**\n * This helper function is used to preload a module from a URL.\n *\n * If the origin of the worker URL is different from the current origin, the worker cannot be loaded directly.\n * See discussions in https://github.com/webpack-contrib/worker-loader/issues/154\n *\n * In this case, we will fetch the worker URL and create a new Blob URL with the same origin as a workaround.\n *\n * @param absoluteUrl - The absolute URL to preload.\n *\n * @returns - A promise that resolves to a new Blob URL\n */\nconst preload = async (absoluteUrl: string): Promise<string> => {\n  const response = await fetch(absoluteUrl, { credentials: 'same-origin' });\n  const blob = await response.blob();\n  return URL.createObjectURL(blob);\n};\n\n/**\n * This helper function is used to dynamically import a module from a URL.\n *\n * The build script has special handling for this function to ensure that the URL is not bundled into the final output.\n *\n * @param url - The URL to import.\n *\n * @returns - A promise that resolves to the default export of the module.\n */\nconst dynamicImportDefault = async <T>(url: string): Promise<T> =>\n  (await import(/* webpackIgnore: true */ url)).default;\n\n/**\n * The proxy worker factory imported from the proxy worker module.\n *\n * This is only available when the WebAssembly proxy is not disabled.\n */\nconst createProxyWorker: ((urlOverride?: string) => Worker) | undefined =\n  // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n  BUILD_DEFS.DISABLE_WASM_PROXY ? undefined : require('./proxy-worker/main').default;\n\n/**\n * Import the proxy worker.\n *\n * This function will perform the following steps:\n * 1. If a preload is needed, it will preload the module and return the object URL.\n * 2. Use the proxy worker factory to create the proxy worker.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The proxy worker.\n */\nexport const importProxyWorker = async (): Promise<[undefined | string, Worker]> => {\n  if (!scriptSrc) {\n    throw new Error('Failed to load proxy worker: cannot determine the script source URL.');\n  }\n\n  // If the script source is from the same origin, we can use the embedded proxy module directly.\n  if (isSameOrigin(scriptSrc)) {\n    return [undefined, createProxyWorker!()];\n  }\n\n  // Otherwise, need to preload\n  const url = await preload(scriptSrc);\n  return [url, createProxyWorker!(url)];\n};\n\n/**\n * The embedded WebAssembly module.\n *\n * This is only available in ESM and when embedding is not disabled.\n */\nconst embeddedWasmModule: EmscriptenModuleFactory<OrtWasmModule> | undefined =\n  BUILD_DEFS.IS_ESM && BUILD_DEFS.ENABLE_BUNDLE_WASM_JS\n    ? // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n      require(\n        !BUILD_DEFS.DISABLE_JSEP\n          ? '../../dist/ort-wasm-simd-threaded.jsep.mjs'\n          : '../../dist/ort-wasm-simd-threaded.mjs',\n      ).default\n    : undefined;\n\n/**\n * Import the WebAssembly module.\n *\n * This function will perform the following steps:\n * 1. If the embedded module exists and no custom URL is specified, use the embedded module.\n * 2. If a preload is needed, it will preload the module and return the object URL.\n * 3. Otherwise, it will perform a dynamic import of the module.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The default export of the module, which is a factory function to create the WebAssembly module.\n */\nexport const importWasmModule = async (\n  urlOverride: string | undefined,\n  prefixOverride: string | undefined,\n  isMultiThreaded: boolean,\n): Promise<[undefined | string, EmscriptenModuleFactory<OrtWasmModule>]> => {\n  if (!urlOverride && !prefixOverride && embeddedWasmModule && scriptSrc && isSameOrigin(scriptSrc)) {\n    return [undefined, embeddedWasmModule];\n  } else {\n    const wasmModuleFilename = !BUILD_DEFS.DISABLE_JSEP\n      ? 'ort-wasm-simd-threaded.jsep.mjs'\n      : 'ort-wasm-simd-threaded.mjs';\n    const wasmModuleUrl = urlOverride ?? normalizeUrl(wasmModuleFilename, prefixOverride);\n    // need to preload if all of the following conditions are met:\n    // 1. not in Node.js.\n    //    - Node.js does not have the same origin policy for creating workers.\n    // 2. multi-threaded is enabled.\n    //    - If multi-threaded is disabled, no worker will be created. So we don't need to preload the module.\n    // 3. the absolute URL is available.\n    //    - If the absolute URL is failed to be created, the origin cannot be determined. In this case, we will not\n    //    preload the module.\n    // 4. the worker URL is not from the same origin.\n    //    - If the worker URL is from the same origin, we can create the worker directly.\n    const needPreload = !isNode && isMultiThreaded && wasmModuleUrl && !isSameOrigin(wasmModuleUrl, prefixOverride);\n    const url = needPreload\n      ? await preload(wasmModuleUrl)\n      : (wasmModuleUrl ?? fallbackUrl(wasmModuleFilename, prefixOverride));\n    return [needPreload ? url : undefined, await dynamicImportDefault<EmscriptenModuleFactory<OrtWasmModule>>(url)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { importWasmModule, inferWasmPathPrefixFromScriptSrc } from './wasm-utils-import';\n\nlet wasm: OrtWasmModule | undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n  if (typeof SharedArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  try {\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16,\n        2, 0, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const initializeWebAssembly = async (flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  let numThreads = flags.numThreads!;\n\n  // ensure SIMD is supported\n  if (!isSimdSupported()) {\n    throw new Error('WebAssembly SIMD is not supported in the current environment.');\n  }\n\n  // check if multi-threading is supported\n  const multiThreadSupported = isMultiThreadSupported();\n  if (numThreads > 1 && !multiThreadSupported) {\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'env.wasm.numThreads is set to ' +\n          numThreads +\n          ', but this will not work unless you enable crossOriginIsolated mode. ' +\n          'See https://web.dev/cross-origin-isolation-guide/ for more info.',\n      );\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(\n      'WebAssembly multi-threading is not supported in the current environment. ' + 'Falling back to single-threading.',\n    );\n\n    // set flags.numThreads to 1 so that OrtInit() will not create a global thread pool.\n    flags.numThreads = numThreads = 1;\n  }\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const mjsPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.mjs;\n  const mjsPathOverride = (mjsPathOverrideFlag as URL)?.href ?? mjsPathOverrideFlag;\n  const wasmPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.wasm;\n  const wasmPathOverride = (wasmPathOverrideFlag as URL)?.href ?? wasmPathOverrideFlag;\n  const wasmBinaryOverride = flags.wasmBinary;\n\n  const [objectUrl, ortWasmFactory] = await importWasmModule(mjsPathOverride, wasmPrefixOverride, numThreads > 1);\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(\n      new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }),\n    );\n  }\n\n  // promise for module initialization\n  tasks.push(\n    new Promise((resolve, reject) => {\n      const config: Partial<OrtWasmModule> = {\n        /**\n         * The number of threads. WebAssembly will create (Module.numThreads - 1) workers. If it is 1, no worker will be\n         * created.\n         */\n        numThreads,\n      };\n\n      if (wasmBinaryOverride) {\n        // Set a custom buffer which contains the WebAssembly binary. This will skip the wasm file fetching.\n        config.wasmBinary = wasmBinaryOverride;\n      } else if (wasmPathOverride || wasmPrefixOverride) {\n        // A callback function to locate the WebAssembly file. The function should return the full path of the file.\n        //\n        // Since Emscripten 3.1.58, this function is only called for the .wasm file.\n        config.locateFile = (fileName) => wasmPathOverride ?? wasmPrefixOverride + fileName;\n      } else if (mjsPathOverride && mjsPathOverride.indexOf('blob:') !== 0) {\n        // if mjs path is specified, use it as the base path for the .wasm file.\n        config.locateFile = (fileName) => new URL(fileName, mjsPathOverride).href;\n      } else if (objectUrl) {\n        const inferredWasmPathPrefix = inferWasmPathPrefixFromScriptSrc();\n        if (inferredWasmPathPrefix) {\n          // if the wasm module is preloaded, use the inferred wasm path as the base path for the .wasm file.\n          config.locateFile = (fileName) => inferredWasmPathPrefix + fileName;\n        }\n      }\n\n      ortWasmFactory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n          }\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        },\n      );\n    }),\n  );\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    // TODO: currently \"PThread.terminateAllThreads()\" is not exposed in the wasm module.\n    //       And this function is not yet called by any code.\n    //       If it is needed in the future, we should expose it in the wasm module and uncomment the following line.\n\n    // wasm?.PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getInstance } from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions = (\n  options: Record<string, unknown>,\n  prefix: string,\n  seen: WeakSet<Record<string, unknown>>,\n  handler: ExtraOptionsHandler,\n): void => {\n  if (typeof options == 'object' && options !== null) {\n    if (seen.has(options)) {\n      throw new Error('Circular reference in options');\n    } else {\n      seen.add(options);\n    }\n  }\n\n  Object.entries(options).forEach(([key, value]) => {\n    const name = prefix ? prefix + key : key;\n    if (typeof value === 'object') {\n      iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n    } else if (typeof value === 'string' || typeof value === 'number') {\n      handler(name, value.toString());\n    } else if (typeof value === 'boolean') {\n      handler(name, value ? '1' : '0');\n    } else {\n      throw new Error(`Can't handle extra config type: ${typeof value}`);\n    }\n  });\n};\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const ptrSize = wasm.PTR_SIZE;\n    const paramsOffset = wasm.stackAlloc(2 * ptrSize);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + ptrSize);\n    const errorCode = Number(wasm.getValue(paramsOffset, ptrSize === 4 ? 'i32' : 'i64'));\n    const errorMessagePointer = wasm.getValue(paramsOffset + ptrSize, '*');\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2; // Default to warning\n    } else if (\n      typeof options.logSeverityLevel !== 'number' ||\n      !Number.isInteger(options.logSeverityLevel) ||\n      options.logSeverityLevel < 0 ||\n      options.logSeverityLevel > 4\n    ) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0; // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n      runOptions.logSeverityLevel!,\n      runOptions.logVerbosityLevel!,\n      !!runOptions.terminate!,\n      tagDataOffset,\n    );\n    if (runOptionsHandle === 0) {\n      checkLastError(\"Can't create run options.\");\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string | unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential' | 'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (\n    options.executionProviders &&\n    options.executionProviders.some((ep) => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')\n  ) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders = (\n  sessionOptionsHandle: number,\n  executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n  allocs: number[],\n): void => {\n  for (const ep of executionProviders) {\n    let epName = typeof ep === 'string' ? ep : ep.name;\n\n    // check EP name\n    switch (epName) {\n      case 'webnn':\n        epName = 'WEBNN';\n        if (typeof ep !== 'string') {\n          const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n          // const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          if (deviceType) {\n            const keyDataOffset = allocWasmString('deviceType', allocs);\n            const valueDataOffset = allocWasmString(deviceType, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'deviceType' - ${deviceType}.`);\n            }\n          }\n        }\n        break;\n      case 'webgpu':\n        epName = 'JS';\n        if (typeof ep !== 'string') {\n          const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n          if (webgpuOptions?.preferredLayout) {\n            if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n              throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n            }\n            const keyDataOffset = allocWasmString('preferredLayout', allocs);\n            const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n            }\n          }\n        }\n        break;\n      case 'wasm':\n      case 'cpu':\n        continue;\n      default:\n        throw new Error(`not supported execution provider: ${epName}`);\n    }\n\n    const epNameDataOffset = allocWasmString(epName, allocs);\n    if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n      checkLastError(`Can't append execution provider: ${epName}.`);\n    }\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n      typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2; // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0; // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset =\n      typeof sessionOptions.optimizedModelFilePath === 'string'\n        ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs)\n        : 0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n      graphOptimizationLevel,\n      !!sessionOptions.enableCpuMemArena,\n      !!sessionOptions.enableMemPattern,\n      executionMode,\n      !!sessionOptions.enableProfiling,\n      0,\n      logIdDataOffset,\n      logSeverityLevel,\n      logVerbosityLevel,\n      optimizedModelFilePathOffset,\n    );\n    if (sessionOptionsHandle === 0) {\n      checkLastError(\"Can't create session options.\");\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.enableGraphCapture !== undefined) {\n      if (typeof sessionOptions.enableGraphCapture !== 'boolean') {\n        throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);\n      }\n      const keyDataOffset = allocWasmString('enableGraphCapture', allocs);\n      const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);\n      if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n        checkLastError(\n          `Can't set a session config entry: 'enableGraphCapture' - ${sessionOptions.enableGraphCapture}.`,\n        );\n      }\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      if (wasm._OrtReleaseSessionOptions(sessionOptionsHandle) !== 0) {\n        checkLastError(\"Can't release session options.\");\n      }\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from 'onnxruntime-common';\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16,\n\n  // 4-bit data-types\n  uint4 = 21,\n  int4 = 22,\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n    case 'int4':\n      return DataType.int4;\n    case 'uint4':\n      return DataType.uint4;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n    case DataType.int4:\n      return 'int4';\n    case DataType.uint4:\n      return 'uint4';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor size in bytes by the given data type and dimensions\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const calculateTensorSizeInBytes = (\n  dateType: number,\n  dimsOrSize: readonly number[] | number,\n): number | undefined => {\n  const elementSize = [\n    -1, // undefined = 0\n    4, // float = 1\n    1, // uint8 = 2\n    1, // int8 = 3\n    2, // uint16 = 4\n    2, // int16 = 5\n    4, // int32 = 6\n    8, // int64 = 7\n    -1, // string = 8\n    1, // bool = 9\n    2, // float16 = 10\n    8, // double = 11\n    4, // uint32 = 12\n    8, // uint64 = 13\n    -1, // complex64 = 14\n    -1, // complex128 = 15\n    -1, // bfloat16 = 16\n    -1, // FLOAT8E4M3FN = 17\n    -1, // FLOAT8E4M3FNUZ = 18\n    -1, // FLOAT8E5M2 = 19\n    -1, // FLOAT8E5M2FNUZ = 20\n    0.5, // uint4 = 21\n    0.5, // int4 = 22\n  ][dateType];\n\n  const size = typeof dimsOrSize === 'number' ? dimsOrSize : dimsOrSize.reduce((a, b) => a * b, 1);\n  return elementSize > 0 ? Math.ceil(size * elementSize) : undefined;\n};\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (\n  type: Tensor.Type,\n):\n  | Float32ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int8ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int16ArrayConstructor\n  | Int32ArrayConstructor\n  | BigInt64ArrayConstructor\n  | Uint8ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor\n  | BigUint64ArrayConstructor => {\n  switch (type) {\n    case 'float16':\n      // allow Float16Array polyfill.\n      return typeof Float16Array !== 'undefined' && Float16Array.from ? Float16Array : Uint16Array;\n    case 'float32':\n      return Float32Array;\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int16':\n      return Int16Array;\n    case 'int32':\n      return Int32Array;\n    case 'bool':\n      return Uint8Array;\n    case 'float64':\n      return Float64Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'uint64':\n      return BigUint64Array;\n    default:\n      throw new Error(`unsupported type: ${type}`);\n  }\n};\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose' | 'info' | 'warning' | 'error' | 'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint8' ||\n  type === 'bool' ||\n  type === 'uint4' ||\n  type === 'int4';\n\n/**\n * Check whether the given tensor type is supported by WebNN MLTensor\n */\nexport const isMLTensorSupportedType = (type: Tensor.Type): type is Tensor.MLTensorDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint64' ||\n  type === 'int8' ||\n  type === 'uint8' ||\n  type === 'bool' ||\n  type === 'uint4' ||\n  type === 'int4';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    case 'ml-tensor':\n      return 5;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation | undefined =>\n  (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer', 'ml-tensor'] as const)[location];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { isNode } from './wasm-utils-env';\n\n/**\n * Load a file into a Uint8Array.\n *\n * @param file - the file to load. Can be a URL/path, a Blob, an ArrayBuffer, or a Uint8Array.\n * @returns a Uint8Array containing the file data.\n */\nexport const loadFile = async (file: string | Blob | ArrayBufferLike | Uint8Array): Promise<Uint8Array> => {\n  if (typeof file === 'string') {\n    if (isNode) {\n      // load file into ArrayBuffer in Node.js\n      try {\n        const { readFile } = require('node:fs/promises');\n        return new Uint8Array(await readFile(file));\n      } catch (e) {\n        if (e.code === 'ERR_FS_FILE_TOO_LARGE') {\n          // file is too large, use fs.createReadStream instead\n          const { createReadStream } = require('node:fs');\n          const stream = createReadStream(file);\n          const chunks: Uint8Array[] = [];\n          for await (const chunk of stream) {\n            chunks.push(chunk);\n          }\n          return new Uint8Array(Buffer.concat(chunks));\n        }\n        throw e;\n      }\n    } else {\n      // load file into ArrayBuffer in browsers\n      const response = await fetch(file);\n      if (!response.ok) {\n        throw new Error(`failed to load external data file: ${file}`);\n      }\n      const contentLengthHeader = response.headers.get('Content-Length');\n      const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n      if (fileSize < 1073741824 /* 1GB */) {\n        // when Content-Length header is not set, we cannot determine the file size. We assume it is small enough to\n        // load into memory.\n        return new Uint8Array(await response.arrayBuffer());\n      } else {\n        // file is too large, use stream instead\n        if (!response.body) {\n          throw new Error(`failed to load external data file: ${file}, no response body.`);\n        }\n        const reader = response.body.getReader();\n\n        let buffer;\n        try {\n          // try to create ArrayBuffer directly\n          buffer = new ArrayBuffer(fileSize);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            // use WebAssembly Memory to allocate larger ArrayBuffer\n            const pages = Math.ceil(fileSize / 65536);\n            buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n          } else {\n            throw e;\n          }\n        }\n\n        let offset = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            break;\n          }\n          const chunkSize = value.byteLength;\n          const chunk = new Uint8Array(buffer, offset, chunkSize);\n          chunk.set(value);\n          offset += chunkSize;\n        }\n        return new Uint8Array(buffer, 0, fileSize);\n      }\n    }\n  } else if (file instanceof Blob) {\n    return new Uint8Array(await file.arrayBuffer());\n  } else if (file instanceof Uint8Array) {\n    return file;\n  } else {\n    return new Uint8Array(file);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport { logLevelStringToEnum } from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString | MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel | undefined;\nlet debug: boolean | undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from 'onnxruntime-common';\n\nimport { tensorTypeToTypedArrayConstructor } from '../wasm-common';\n\nexport const createView = (\n  dataBuffer: ArrayBuffer,\n  type: Tensor.Type,\n):\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n  | Uint8Array\n  | Float32Array\n  | Float64Array\n  | Int8Array\n  | Int16Array\n  | Uint16Array => new (tensorTypeToTypedArrayConstructor(type))(dataBuffer);\n\n/**\n * a TensorView does not own the data.\n */\nexport interface TensorView {\n  readonly data: number;\n  readonly dataType: number;\n  readonly dims: readonly number[];\n\n  /**\n   * get a Float16Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getUint16Array(): Uint16Array;\n\n  /**\n   * get a Float32Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getFloat32Array(): Float32Array;\n\n  /**\n   * get a BigInt64Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getBigInt64Array(): BigInt64Array;\n\n  /**\n   * get a Int32Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getInt32Array(): Int32Array;\n\n  /**\n   * get a Uint16Array data view of the tensor data. tensor data must be on CPU.\n   */\n  getUint16Array(): Uint16Array;\n\n  /**\n   * create a new tensor view with the same data but different dimensions.\n   */\n  reshape(newDims: readonly number[]): TensorView;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../wasm-common';\nimport { TensorView } from '../tensor-view';\n\nimport { ShaderHelper } from './ops/common';\n\nexport type SessionState = 'default' | 'capturing' | 'replaying';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2,\n}\nexport type GpuDataId = number;\n\nexport type GpuArchitecture = 'ampere' | 'gen-12lp';\nexport type GpuVendor = 'amd' | 'intel' | 'nvidia';\nexport interface AdapterInfo {\n  isArchitecture: (architecture: GpuArchitecture) => boolean;\n  isVendor: (vendor: GpuVendor) => boolean;\n}\nexport interface DeviceInfo {\n  readonly subgroupsSupported: boolean;\n  readonly subgroupsF16Supported: boolean;\n  readonly subgroupSizeRange?: readonly [number, number];\n}\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  dims: readonly number[];\n  dataType: number;\n}\n\nexport interface ProgramUniform {\n  type: DataType;\n  data: number | readonly number[];\n}\n\nexport type ProgramUniformVariableInfo = [type: DataType, length: number];\n\n/**\n * Represent the dependency of a program on a specific input tensor.\n *\n * - 'none': the shader/uniform does not depend on this input's info\n * - 'type': the shader/uniform depends on data type of this input\n * - 'rank': the shader/uniform depends on data type and the rank of this input\n * - 'dims': the shader/uniform depends on data type and the dims of this input\n * - 'data': the shader/uniform depends on data type, the dims and the data of this input\n */\nexport type ProgramInputTensorInfoDependency = 'none' | 'type' | 'rank' | 'dims' | 'data';\n\n/**\n * Represent information about a program's cache for shader.\n */\nexport interface ProgramShaderCacheInfo {\n  /**\n   * an optional string as a cache hint in the artifact cache. If this is not specified, the cache hint will be empty.\n   *\n   * This hint string should only contains initializing-time information, such as the attributes or any information of\n   * initializers. It should NOT contain any runtime information, such as the shape of inputs.\n   */\n  hint?: string;\n\n  /**\n   * an optional list of dependencies of the program on the input tensors. If this is not specified, the program depends\n   * on 'dims' of all inputs.\n   */\n  inputDependencies?: ProgramInputTensorInfoDependency[];\n}\n\n/**\n * Represent information about a program's cache for uniform.\n */\nexport interface ProgramUniformCacheInfo {\n  /**\n   * an optional string as a cache hint in the uniform cache. If this is not specified, the cache hint will be empty.\n   *\n   * This hint string should only contains runtime information, such as the shape of inputs.\n   */\n  hint?: string;\n\n  /**\n   * an optional list of dependencies of the program on the input tensors. If this is not specified, the program depends\n   * on 'none' of all inputs.\n   */\n  inputDependencies?: ProgramInputTensorInfoDependency[];\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * an optional object describing the cache information of the program shader.\n   *\n   * If this is not specified, assume hint is empty and inputDependencies are ['dims'] for all inputs.\n   */\n  shaderCache?: ProgramShaderCacheInfo;\n\n  /**\n   * the shader's processing source code.\n   *\n   * This function will be called when shader cache missed.\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n\n  /**\n   * A function to get run data required to run the program.\n   *\n   * This function will be called every time the program is executed. Should keep this function as simple as possible.\n   */\n  getRunData: (inputs: readonly TensorView[]) => {\n    outputs: readonly TensorInfo[];\n    dispatchGroup: { x: number; y?: number; z?: number };\n    programUniforms?: readonly ProgramUniform[];\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n  uniformVariablesInfo: readonly ProgramUniformVariableInfo[] | undefined;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView | number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * gpu adapter info\n   */\n  readonly adapterInfo: AdapterInfo;\n\n  /**\n   * gpu device info\n   */\n  readonly deviceInfo: DeviceInfo;\n\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly kernelCustomData: { [key: string]: unknown };\n\n  /**\n   * a buffer that can be used to access custom data created each time the kernel is executed\n   */\n  readonly customDataBuffer: Uint8Array;\n\n  /**\n   * a number of outputs for the node\n   */\n  readonly outputCount: number;\n\n  compute(program: ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping): TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n\nexport type TimestampQuery = 'none' | 'inside-passes' | 'at-passes';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { WebGpuBackend } from '../backend-webgpu';\nimport { LOG_DEBUG } from '../log';\n\nimport { GpuData, GpuDataId, GpuDataType } from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData | undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId, getTargetBuffer: () => Uint8Array): Promise<void>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n\n  /**\n   * register an external buffer for IO Binding. If the buffer is already registered, return the existing GPU data ID.\n   *\n   * GPU data manager only manages a mapping between the buffer and the GPU data ID. It will not manage the lifecycle of\n   * the external buffer.\n   */\n  registerExternalBuffer(buffer: GPUBuffer, originalSize: number, previous?: [GpuDataId, GPUBuffer]): number;\n\n  /**\n   * unregister an external buffer for IO Binding.\n   */\n  unregisterExternalBuffer(id: GpuDataId): void;\n\n  /**\n   * destroy all gpu buffers.\n   */\n  dispose(): void;\n\n  /**\n   * create session related data.\n   */\n  onCreateSession(): void;\n\n  /**\n   * release session related data.\n   * @param sessionId - specify the session ID.\n   */\n  onReleaseSession(sessionId: number): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\nconst bucketFreelist: Map<number, number> = new Map([\n  [64, 250],\n  [128, 200],\n  [256, 200],\n  [512, 200],\n  [2048, 230],\n  [4096, 200],\n  [8192, 50],\n  [16384, 50],\n  [32768, 50],\n  [65536, 50],\n  [131072, 50],\n  [262144, 50],\n  [524288, 50],\n  [1048576, 50],\n  [2097152, 30],\n  [4194304, 20],\n  [8388608, 10],\n  [12582912, 10],\n  [16777216, 10],\n  [26214400, 15],\n  [33554432, 22],\n  [44236800, 2],\n  [58982400, 6],\n  // we don't want to cache the bucket sizes below but not caching them\n  // results in some major performance hits for models like sd-turbo.\n  [67108864, 6],\n  [134217728, 6],\n  [167772160, 6],\n]);\n\nconst bucketArr: number[] = [];\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(Number(size) / 16) * 16;\n\n/**\n * calculate the buffer size so that it fits into buckets.\n */\nconst calcBucketBufferSize = (size: number) => {\n  for (let idx = 0; idx < bucketArr.length; idx++) {\n    const sizeForBucket = bucketArr[idx];\n    if (size <= sizeForBucket) {\n      return sizeForBucket;\n    }\n  }\n  // not in bucket list -> caller will not cache, round up to 16.\n  return Math.ceil(size / 16) * 16;\n};\n\nlet guid = 1;\nconst createNewGpuDataId = () => guid++;\n\n/**\n * exported standard download function. This function is used by the session to download the data from GPU, and also by\n * factory to create GPU tensors with the capacity of downloading data from GPU.\n *\n * @param backend - the WebGPU backend\n * @param gpuBuffer - the GPU buffer to download\n * @param originalSize - the original size of the data\n * @param getTargetBuffer - optional. If provided, the data will be copied to the target buffer. Otherwise, a new buffer\n * will be created and returned.\n */\nexport const downloadGpuData = async (\n  backend: WebGpuBackend,\n  gpuBuffer: GPUBuffer,\n  originalSize: number,\n  getTargetBuffer?: () => Uint8Array,\n): Promise<Uint8Array> => {\n  const bufferSize = calcNormalizedBufferSize(originalSize);\n  const gpuReadBuffer = backend.device.createBuffer(\n    // eslint-disable-next-line no-bitwise\n    { size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ },\n  );\n  try {\n    const commandEncoder = backend.getCommandEncoder();\n    backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n      gpuBuffer /* source buffer */,\n      0 /* source offset */,\n      gpuReadBuffer /* destination buffer */,\n      0 /* destination offset */,\n      bufferSize /* size */,\n    );\n    backend.flush();\n\n    await gpuReadBuffer.mapAsync(GPUMapMode.READ);\n\n    const arrayBuffer = gpuReadBuffer.getMappedRange();\n    if (getTargetBuffer) {\n      // if we already have a CPU buffer to accept the data, no need to clone the ArrayBuffer.\n      const targetBuffer = getTargetBuffer();\n      targetBuffer.set(new Uint8Array(arrayBuffer, 0, originalSize));\n      return targetBuffer;\n    } else {\n      // the mapped ArrayBuffer will be released when the GPU buffer is destroyed. Need to clone the\n      // ArrayBuffer.\n      return new Uint8Array(arrayBuffer.slice(0, originalSize));\n    }\n  } finally {\n    gpuReadBuffer.destroy();\n  }\n};\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  private storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  // The reusable storage buffers for computing.\n  private freeBuffers: Map<number, GPUBuffer[]>;\n  // The reusable uniform buffers\n  private freeUniformBuffers: Map<number, GPUBuffer[]>;\n\n  // The pendingBuffers for capture graph.\n  // a SessionID -> GPUBuffer[] mapping.\n  private capturedPendingBuffers: Map<number, GPUBuffer[]>;\n\n  // The session count.\n  private sessionCount: number;\n\n  constructor(private backend: WebGpuBackend) {\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n    this.freeUniformBuffers = new Map();\n    this.buffersPending = [];\n    this.capturedPendingBuffers = new Map();\n\n    for (const [key] of bucketFreelist) {\n      bucketArr.push(key);\n      this.freeBuffers.set(key, []);\n      this.freeUniformBuffers.set(key, []);\n    }\n\n    this.sessionCount = 0;\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (Number(gpuDataCache.originalSize) !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n      // eslint-disable-next-line no-bitwise\n      { mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC },\n    );\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n    // GPU copy\n    const commandEncoder = this.backend.device.createCommandEncoder();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n    this.backend.device.queue.submit([commandEncoder.finish()]);\n    gpuBufferForUploading.destroy();\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n      sourceGpuDataCache.gpuData.buffer,\n      0,\n      destinationGpuDataCache.gpuData.buffer,\n      0,\n      size,\n    );\n  }\n\n  registerExternalBuffer(buffer: GPUBuffer, originalSize: number, previous?: [GpuDataId, GPUBuffer]): number {\n    let id: number | undefined;\n    if (previous) {\n      id = previous[0];\n      if (buffer === previous[1]) {\n        LOG_DEBUG(\n          'verbose',\n          () =>\n            `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${id}, buffer is the same, skip.`,\n        );\n        return id;\n      } else if (this.backend.capturedCommandList.has(this.backend.currentSessionId!)) {\n        throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);\n      }\n    } else {\n      id = createNewGpuDataId();\n    }\n\n    this.storageCache.set(id, { gpuData: { id, type: GpuDataType.default, buffer }, originalSize });\n    LOG_DEBUG(\n      'verbose',\n      () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${originalSize}) => id=${id}, registered.`,\n    );\n    return id;\n  }\n\n  unregisterExternalBuffer(id: GpuDataId): void {\n    if (id !== undefined) {\n      this.storageCache.delete(id);\n      LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${id}`);\n    }\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    const bufferSize = calcBucketBufferSize(size);\n\n    let gpuBuffer;\n    // Currently, only storage buffers are reused.\n    // eslint-disable-next-line no-bitwise\n    const isStorage = (usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE;\n    // eslint-disable-next-line no-bitwise\n    const isUniform = (usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM;\n    if (isStorage || isUniform) {\n      const freeBuffers = isStorage ? this.freeBuffers : this.freeUniformBuffers;\n      const buffers = freeBuffers.get(bufferSize);\n      if (!buffers) {\n        // no such bucket/freelist - create gpu buffer\n        gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n      } else {\n        if (buffers.length > 0) {\n          // in freelist, use it\n          gpuBuffer = buffers.pop() as GPUBuffer;\n        } else {\n          // bucket empty, create gpu buffer\n          gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n        }\n      }\n    } else {\n      // create gpu buffer\n      gpuBuffer = this.backend.device.createBuffer({ size: bufferSize, usage });\n    }\n\n    const gpuData = { id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer };\n    this.storageCache.set(gpuData.id, { gpuData, originalSize: Number(size) });\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData | undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(idInput: GpuDataId): number {\n    const id = typeof idInput === 'bigint' ? Number(idInput) : idInput;\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      if (this.storageCache.size === 0) {\n        // cache was previously cleared, no need to release anything.\n        return 0;\n      } else {\n        throw new Error('releasing data does not exist');\n      }\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const cachedData = this.storageCache.get(Number(id));\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n    await downloadGpuData(this.backend, cachedData.gpuData.buffer, cachedData.originalSize, getTargetBuffer);\n  }\n\n  refreshPendingBuffers(): void {\n    if (this.buffersPending.length === 0) {\n      return;\n    }\n\n    if (this.backend.sessionStatus === 'default') {\n      for (const buffer of this.buffersPending) {\n        const maxInFreeList = bucketFreelist.get(buffer.size);\n\n        // eslint-disable-next-line no-bitwise\n        if ((buffer.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n          // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\n          const freelist = this.freeBuffers.get(buffer.size) || [];\n          if (maxInFreeList === undefined || freelist.length >= maxInFreeList) {\n            buffer.destroy();\n          } else {\n            freelist.push(buffer);\n          }\n          // eslint-disable-next-line no-bitwise\n        } else if ((buffer.usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM) {\n          // Put the pending buffer to freeUniformBuffers list instead of really destroying it for buffer reusing.\n          const freelist = this.freeUniformBuffers.get(buffer.size) || [];\n          if (maxInFreeList === undefined || freelist.length >= maxInFreeList) {\n            buffer.destroy();\n          } else {\n            freelist.push(buffer);\n          }\n        } else {\n          buffer.destroy();\n        }\n      }\n      this.buffersPending = [];\n    } else {\n      // Don't release intermediate tensors in non-default mode.\n      // TODO: reuse the storage buffers in non-default mode.\n      let capturedBuffers = this.capturedPendingBuffers.get(this.backend.currentSessionId!);\n      if (!capturedBuffers) {\n        capturedBuffers = [];\n        this.capturedPendingBuffers.set(this.backend.currentSessionId!, capturedBuffers);\n      }\n      for (const buffer of this.buffersPending) {\n        capturedBuffers.push(buffer);\n      }\n      this.buffersPending = [];\n    }\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers) => {\n      buffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n    });\n    this.freeUniformBuffers.forEach((buffers) => {\n      buffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n    });\n\n    this.storageCache.forEach((storage) => {\n      storage.gpuData.buffer.destroy();\n    });\n\n    this.capturedPendingBuffers.forEach((buffers) => {\n      buffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n    });\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n    this.freeUniformBuffers = new Map();\n    this.capturedPendingBuffers = new Map();\n  }\n\n  onCreateSession() {\n    this.sessionCount += 1;\n  }\n\n  onReleaseSession(sessionId: number) {\n    // release the captured pending buffers.\n    const pendingBuffers = this.capturedPendingBuffers.get(sessionId);\n    if (pendingBuffers) {\n      pendingBuffers.forEach((buffer) => {\n        buffer.destroy();\n      });\n      this.capturedPendingBuffers.delete(sessionId);\n    }\n\n    // release the storage cache if no active sessions.\n    this.sessionCount -= 1;\n    if (this.sessionCount === 0) {\n      LOG_DEBUG('warning', () => '[WebGPU] Clearing webgpu buffer cache');\n      this.storageCache.forEach((storage) => {\n        storage.gpuData.buffer.destroy();\n      });\n      this.storageCache = new Map();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n  new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private key: string;\n  public get cacheKey(): string {\n    if (!this.key) {\n      this.key = Object.getOwnPropertyNames(this)\n        .sort()\n        .map((name) => `${(this as Record<string, unknown>)[name]}`)\n        .join(';');\n    }\n    return this.key;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(\n  attribute: T,\n): T & AttributeWithCacheKey => new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number] | undefined {\n    return a[1] !== b[0] ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(\n    adims: readonly number[],\n    bdims: readonly number[],\n    isMatMul = false,\n  ): readonly number[] | undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul = MatMulUtil.calcMatMulShape(\n        [adims[arank - 2], adims[arank - 1]],\n        [bdims[brank - 2], bdims[brank - 1]],\n      );\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      const max = Math.max(aLen, bLen);\n      if (aLen && bLen) {\n        cdims[crank - i] = Math.max(aLen, bLen);\n      } else {\n        // when either aLen or bLen is 0, the other should be either 0 or 1, otherwise it is not broadcastable.\n        if (max > 1) {\n          return undefined;\n        }\n        cdims[crank - i] = 0;\n      }\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * convert dims corresponding to type change to pack. ex. uint8 data to uint32\n   */\n  static convertShape(dims: readonly number[], size = 4): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    }\n    const newDims = new Array(rank);\n    let i = rank - 1;\n    while (i >= 0) {\n      if (dims[i] % size === 0) {\n        newDims[i] = dims[i] / size;\n        break;\n      }\n      if (size % dims[i] !== 0) {\n        throw new Error('cannot convert shape');\n      }\n      newDims[i] = 1;\n      size /= dims[i];\n      i--;\n    }\n    for (i--; i >= 0; i--) {\n      newDims[i] = dims[i];\n    }\n    return newDims;\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be negative.\n      if (dims[i] < 0) {\n        throw new Error(\n          // eslint-disable-next-line max-len\n          'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.',\n        );\n      }\n      size *= Number(dims[i]);\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map((x) => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    kernelShape: number[],\n    strides: number[],\n    dilations: number[],\n    pads: number[],\n  ): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n    inputDims: readonly number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    isChannelLast: boolean,\n    autoPad?: string,\n  ): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== inputDims.length - 2) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n        inputDims[dim + (isChannelLast ? 1 : 2)],\n        strides[dim],\n        dilations[dim],\n        kernelShape[dim],\n        pads,\n        dim,\n        dim + inputDims.length - 2,\n        autoPad,\n      );\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n      isGlobalOperator,\n      inputDims,\n      outputDims,\n      strides,\n      dilations,\n      kernelShape,\n      pads,\n      autoPad,\n    );\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n    inputDims: readonly number[],\n    filterDims: readonly number[],\n    strides: number[],\n    dilations: number[],\n    kernelShape: number[],\n    pads: number[],\n    autoPad?: string,\n  ): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n    isGlobalOperator: boolean,\n    inputDims: readonly number[],\n    outputDims: number[],\n    strides: readonly number[],\n    dilations: readonly number[],\n    kernelShape: readonly number[],\n    pads: number[],\n    autoPad?: string,\n  ) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(\n          PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2],\n            strides[dim],\n            dilations[dim],\n            kernelShape[dim],\n            pads,\n            dim,\n            dim + inputDims.length - 2,\n            autoPad,\n          ),\n        );\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n    inSize: number,\n    stride: number,\n    dilation: number,\n    kernel: number,\n    pads: number[],\n    padHeadIndex: number,\n    padTailIndex: number,\n    autoPad?: string,\n  ): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor((inSize - dkernel) / stride + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] = autoPad === 'SAME_LOWER' ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor((inSize + padNeeded - kernel) / stride + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n    leftShape: readonly number[],\n    transLeft: boolean,\n    rightShape: readonly number[],\n    transRight: boolean,\n    biasShape?: readonly number[],\n  ): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e38;\nexport const MAX_CLIP = 3.4028234663852886e38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { ShapeUtil } from '../../util';\nimport { ProgramUniform, ProgramUniformVariableInfo } from '../types';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\ninterface IndicesHelperTypes {\n  /**\n   * WGSL type of indices expression\n   */\n  readonly indices: string;\n\n  /**\n   * WGSL type of a value\n   */\n  readonly value: string;\n\n  /**\n   * WGSL type of storage type representing a value\n   *\n   * This is usually the same to `value`, but for some type (eg. bool), we need to use `u32` as storage type for\n   * value type `vec4<bool>`\n   */\n  readonly storage: string;\n\n  /**\n   * tensor type as represented in TensorView\n   */\n  readonly tensor: number;\n}\n\n/**\n * A helper class for generating WGSL code for manipulating indices and data for a shader's input or output.\n *\n * This class is designed to offer a unified way to generate WGSL code for manipulating indices and data for a shader's\n * input or output.\n *\n * The following is a list of terminologies used in this class:\n * - `offset`: a uint32 value representing the offset of an element in the data buffer.\n * - `indices`: an abstraction of a multi-dimensional array's indices representing the data's index on each dimension.\n * - `value`: a value of a data element.\n *\n * Users are expected to create an instance of this class for each shader's input or output, and use the instance to\n * generate WGSL code for manipulating indices and data. The following 2 exported functions are for users to call to\n * create an instance of an indices helper:\n * - `inputVariable()`: create an indices helper instance for an input.\n * - `outputVariable()`: create an indices helper instance for an output.\n * - `internalVariable()`: create an indices helper instance for an internal variable.\n *\n * An indices helper instance contains helper functions for the following operations:\n * - access readonly basic information, including: `name`(the name of the input or output), `usage`(whether it's an\n * input, an output or an internal variable) and `shape`(the passed in shape).\n * - `type`: access readonly type information, including: `indices`(the type of indices), `value`(the type of value at\n * runtime), `storage`(the type of value at storage) and `tensor`(the tensor type as represented in TensorView).\n * - generate WGSL code for getting indices from offset. Use `offsetToIndices()` for WGSL code snippet to calculate\n * indices from offset, and use `indicesToOffset()` for WGSL code snippet to calculate offset from indices.\n * - to manipulate an instance of indices, use `setIndices()` and `getIndices()` to set and get the indices on an\n * indices variable.\n * - to manipulate data, use `set()`/`get()` to access data at the given indices from parameter list, use\n * `setByIndices()`/`getByIndices()` to access data at the given indices from an indices variable, and use\n * `setByOffset()`/`getByOffset()` to access data at the given offset.\n * - `impl`: get WGSL code of function implementation for the util functions mentioned above.\n */\nexport interface IndicesHelper {\n  /**\n   * get WGSL code of function implementation for the util functions.\n   *\n   */\n  readonly impl: () => string;\n\n  /**\n   * get type info\n   */\n  readonly type: IndicesHelperTypes;\n\n  /**\n   * WGSL code of a expression for getting indices from offset.\n   *\n   * @param varOffset - a u32 expression representing the offset.\n   *\n   * @returns an `type.indices` expression\n   */\n  readonly offsetToIndices: (varOffset: string) => string;\n\n  /**\n   * WGSL code of an `u32` expression for getting offset from indices.\n   *\n   * @param varIndices - a `type.indices` expression representing the indices.\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesToOffset: (varIndices: string) => string;\n\n  /**\n   * WGSL code of an `u32` expression for getting original offset from broadcasted indices.\n   *\n   * @param varIndices - a `type.indices` expression representing the output indices.\n   * @param output - output IndicesHelper.\n   *\n   * @returns an `u32` expression\n   */\n  readonly broadcastedIndicesToOffset: (varIndices: string, output: IndicesHelper) => string;\n\n  /**\n   * WGSL code of generating an indices literal\n   *\n   * @param init - initial value.\n   */\n  readonly indices: (...init: ReadonlyArray<number | string>) => string;\n\n  /**\n   * WGSL code of a statement for setting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to set. can be a number or a string (WGSL `u32` expression).\n   * @param value - the value to set. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns a WGSL statement\n   */\n  readonly indicesSet: (varIndices: string, idx: number | string, value: number | string) => void;\n\n  /**\n   * WGSL code of an `u32` expression for getting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to get. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesGet: (varIndices: string, idx: number | string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices.\n   *\n   * @param indicesAndValue - an array of numbers or strings (WGSL `u32` expression) representing the indices, followed\n   *     by the value to set. This array should have exactly `shape.length + 1` elements.\n   */\n  readonly set: (...indicesAndValue: ReadonlyArray<number | string>) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByIndices: (varIndices: string, value: string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByOffset: (offset: number | string, value: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices.\n   *\n   * @param indices - an array of numbers or strings (WGSL `u32` expression) representing the indices.\n   */\n  readonly get: (...indices: ReadonlyArray<number | string>) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   */\n  readonly getByIndices: (varIndices: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   */\n  readonly getByOffset: (offset: number | string) => string;\n\n  /**\n   * name of the data variable\n   */\n  readonly name: string;\n\n  /**\n   * whether the helper is for an input, an output or an internal variable.\n   */\n  readonly usage: 'input' | 'output' | 'atomicOutput' | 'internal';\n\n  /**\n   * the rank of the input or output.\n   */\n  readonly rank: number;\n\n  /**\n   * a string representing the variable name for the shape of the input or output.\n   */\n  readonly shape: string;\n\n  /**\n   * a string representing the variable name for the strides of the input or output.\n   */\n  readonly strides: string;\n}\n\nconst getWgslMappedType = (type: number, components: 1 | 2 | 3 | 4): string | [string, string] => {\n  if (components === 3) {\n    throw new Error('vec3 has same alignment as vec4, use vec4 instead');\n  }\n\n  // return type is [ storage type, runtime type ] or a single string for both\n  switch (Number(type)) {\n    case DataType.float16:\n      return components > 1 ? `vec${components}<f16>` : 'f16';\n    case DataType.float:\n      return components > 1 ? `vec${components}<f32>` : 'f32';\n    case DataType.int32:\n      return components > 1 ? `vec${components}<i32>` : 'i32';\n    case DataType.uint32:\n      return components > 1 ? `vec${components}<u32>` : 'u32';\n    case DataType.int64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'i32'];\n    case DataType.uint64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'u32'];\n    case DataType.bool:\n      if (components !== 4) {\n        throw new Error('bool must be vec4');\n      }\n      return ['u32', 'vec4<bool>'];\n    case DataType.int4:\n      return 'i32';\n    case DataType.uint4:\n      return 'u32';\n    default:\n      throw new Error(`Unknown data type: ${type}`);\n  }\n};\n\nexport const tensorTypeToWsglStorageType = (type: DataType, components: 1 | 2 | 3 | 4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[0];\n};\n\nexport const tensorTypeToWsglValueType = (type: DataType, components: 1 | 2 | 3 | 4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[1];\n};\n\nexport const createTensorShapeVariables = (...dims: ReadonlyArray<readonly number[]>): ProgramUniform[] => {\n  const programUniforms: ProgramUniform[] = [];\n  dims.forEach((dim) => {\n    if (dim.length !== 0) {\n      programUniforms.push(\n        { type: DataType.uint32, data: dim },\n        { type: DataType.uint32, data: ShapeUtil.computeStrides(dim) },\n      );\n    }\n  });\n  return programUniforms;\n};\n\n/**\n * A helper function to get maximum vector size for specified data length\n * @param size\n */\nexport const getMaxComponents = (size: number) => {\n  // we cannot use vec3 type since it has alignment of 16 bytes\n  if (size % 4 === 0) {\n    return 4;\n  } else if (size % 2 === 0) {\n    return 2;\n  }\n\n  return 1;\n};\n\n/**\n * A helper function that initializes variable as a scalar or vector. e.g. f32(0) or vec4f(0,0,0,0)\n * @param dataType\n * @param components\n * @param value\n */\nexport const fillVector = (dataType = 'f32', components?: number, value = '0') => {\n  if (!components || components === 1) {\n    return `${dataType}(${value})`;\n  }\n\n  return `vec${components}<${dataType}>(${value})`;\n};\n\n/**\n * A helper function that casts value or vector to f32\n * @param dataType\n * @param components\n * @param value\n */\nexport const castToF32 = (dataType: string, components: number, value: string) => {\n  if (dataType === 'f32') {\n    return value;\n  }\n  if (components === 1) {\n    return `f32(${value})`;\n  }\n\n  return `vec${components}<f32>(${value})`;\n};\n\n/**\n * A helper function that returns scalar or sums all components of a vector\n * @param name\n * @param components\n */\nexport const sumVector = (name: string, components: number) => {\n  if (components === 4) {\n    return `(${name}.x + ${name}.y + ${name}.z + ${name}.w)`;\n  } else if (components === 2) {\n    return `(${name}.x + ${name}.y)`;\n  } else if (components === 3) {\n    return `(${name}.x + ${name}.y + ${name}.z)`;\n  }\n\n  return name;\n};\n\n/**\n * A helper function that returns variable element at index.\n * @param name - the name of variable.\n * @param index - the index of variable element.\n * @param length - the length of variable.\n * @param type - the type of variable, optional.\n */\nexport const getElementAt = (\n  name: string,\n  index: number | string,\n  length: number,\n  type?: UniformDataElementType,\n): string => {\n  if (name.startsWith('uniforms.') && length > 4) {\n    if (typeof index === 'string') {\n      if (type === 'f16') {\n        return `${name}[(${index}) / 8][(${index}) % 8 / 4][(${index}) % 8 % 4]`;\n      } else {\n        return `${name}[(${index}) / 4][(${index}) % 4]`;\n      }\n    } else {\n      if (type === 'f16') {\n        return `${name}[${Math.floor(index / 8)}][${Math.floor((index % 8) / 4)}][${(index % 8) % 4}]`;\n      } else {\n        return `${name}[${Math.floor(index / 4)}][${index % 4}]`;\n      }\n    }\n  } else {\n    return length > 1 ? `${name}[${index}]` : name;\n  }\n};\n\n/**\n * A helper function to get a IndicesHelper for a given input or output.\n *\n * @param name - the name of the input or output.\n * @param tensorType - the tensor type of the input or output.\n * @param shapeOrRank - the tensor shape or the rank of the input or output.\n * @param usage - the usage of the indices helper.\n * @param components - indicates the number of components of each element. 1 for scalar, 2 for vec2, 3 for vec3, 4 for\n *    vec4.\n */\nconst createIndicesHelper = (\n  name: string,\n  tensorType: number,\n  shapeOrRank: number | readonly number[],\n  usage: IndicesHelper['usage'],\n  components: 1 | 2 | 3 | 4,\n): IndicesHelper => {\n  const useUniform = typeof shapeOrRank === 'number';\n  const rank = useUniform ? shapeOrRank : shapeOrRank.length;\n  const rankIdentity = [...new Array(rank).keys()];\n  const indicesType = rank < 2 ? 'u32' : rank <= 4 ? `vec${rank}<u32>` : `array<u32, ${rank}>`;\n  const mappedType = getWgslMappedType(tensorType, components);\n  const valueType = typeof mappedType === 'string' ? mappedType : mappedType[1];\n  const storageType = typeof mappedType === 'string' ? mappedType : mappedType[0];\n  const type = { indices: indicesType, value: valueType, storage: storageType, tensor: tensorType };\n\n  const normalizeDim = (dim: number | string): string => (typeof dim === 'string' ? dim : `${dim}u`);\n\n  const implementationUsed = {\n    offsetToIndices: false,\n    indicesToOffset: false,\n    broadcastedIndicesToOffset: false,\n    set: false,\n    setByIndices: false,\n    get: false,\n    getByIndices: false,\n  };\n\n  const uniformPrefix = useUniform ? 'uniforms.' : '';\n  const shape = `${uniformPrefix}${name}_shape`;\n  const strides = `${uniformPrefix}${name}_strides`;\n\n  let o2iSnippet = '';\n  for (let i = 0; i < rank - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${getElementAt(strides, i, rank)};\n    let rest${i} = current % ${getElementAt(strides, i, rank)};\n    indices[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `indices[${rank - 1}] = current;`;\n\n  const offsetToIndicesImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn o2i_${name}(offset: u32) -> ${type.indices} {\n    var indices: ${type.indices};\n    var current = offset;\n    ${o2iSnippet}\n    return indices;\n  }`;\n\n  const offsetToIndices = (varOffset: string) => {\n    implementationUsed.offsetToIndices = true;\n    return rank < 2 ? varOffset : `o2i_${name}(${varOffset})`;\n  };\n\n  const offsets: string[] = [];\n  if (rank >= 2) {\n    for (let i = rank - 1; i >= 0; i--) {\n      offsets.push(`${getElementAt(strides, i, rank)} * (indices[${i}])`);\n    }\n  }\n\n  const indicesToOffsetImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn i2o_${name}(indices: ${type.indices}) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const indicesToOffset = (varIndices: string) => {\n    implementationUsed.indicesToOffset = true;\n    return rank < 2 ? varIndices : `i2o_${name}(${varIndices})`;\n  };\n\n  const indices = (...init: ReadonlyArray<number | string>) =>\n    rank === 0 ? '0u' : `${type.indices}(${init.map(normalizeDim).join(',')})`;\n\n  const indicesGet = (varIndices: string, idx: number | string) => {\n    if (rank < 2) {\n      return `${varIndices}`;\n    } else {\n      return `${getElementAt(varIndices, idx, rank)}`;\n    }\n  };\n\n  const indicesSet = (varIndices: string, idx: number | string, value: string) => {\n    if (rank < 2) {\n      return `${varIndices}=${value};`;\n    } else {\n      return `${getElementAt(varIndices, idx, rank)}=${value};`;\n    }\n  };\n\n  const broadcastedIndicesToOffsetImplementation: { [key: string]: string } = {};\n  const broadcastedIndicesToOffset = (varIndices: string, output: IndicesHelper) => {\n    implementationUsed.broadcastedIndicesToOffset = true;\n    const implKey = `${output.name}broadcastedIndicesTo${name}Offset`;\n    if (implKey in broadcastedIndicesToOffsetImplementation) {\n      return `${implKey}(${varIndices})`;\n    }\n    const offsets = [];\n    for (let i = rank - 1; i >= 0; i--) {\n      const idx = output.indicesGet('outputIndices', i + output.rank - rank);\n      offsets.push(`${indicesGet(strides, i)} * (${idx} % ${indicesGet(shape, i)})`);\n    }\n    broadcastedIndicesToOffsetImplementation[implKey] = `fn ${implKey}(outputIndices: ${output.type.indices}) -> u32 {\n             return ${offsets.length > 0 ? offsets.join('+') : '0u'};\n           }`;\n\n    return `${implKey}(${varIndices})`;\n  };\n\n  const setByOffset = (offset: number | string, value: string) =>\n    (() => {\n      if (type.storage === type.value) {\n        return `${name}[${offset}]=${value};`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n        // int64, components === 1\n        return `${name}[${offset}]=vec2<u32>(u32(${value}), select(0u, 0xFFFFFFFFu, ${value} < 0));`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n        // uint64, components === 1\n        return `${name}[${offset}]=vec2<u32>(u32(${value}), 0u);`;\n      } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n        // bool, components === 4\n        return `${name}[${offset}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${value}));`;\n      } else {\n        throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n      }\n    })();\n\n  const getByOffset = (offset: number | string) =>\n    (() => {\n      if (type.storage === type.value) {\n        return `${name}[${offset}]`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n        // int64, components === 1\n        return `i32(${name}[${offset}].x)`;\n      } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n        // uint64, components === 1\n        return `u32(${name}[${offset}].x)`;\n      } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n        // bool, components === 4\n        return `vec4<bool>(bool(${name}[${offset}] & 0xFFu), bool(${name}[${offset}] & 0xFF00u), bool(${name}[${\n          offset\n        }] & 0xFF0000u), bool(${name}[${offset}] & 0xFF000000u))`;\n      } else {\n        throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n      }\n    })();\n\n  const getByIndicesImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn get_${name}ByIndices(indices: ${type.indices}) -> ${valueType} {\n    return ${getByOffset(`i2o_${name}(indices)`)};\n  }`;\n\n  const getImplementation =\n    rank < 2\n      ? ''\n      : (() => {\n          const functionParams = rankIdentity.map((i) => `d${i}: u32`).join(', ');\n          const dimsParams = rankIdentity.map((i) => `d${i}`).join(', ');\n          return `\n  fn get_${name}(${functionParams}) -> ${valueType} {\n    return get_${name}ByIndices(${indices(dimsParams)});\n  }`;\n        })();\n\n  const get = (...indices: ReadonlyArray<number | string>) => {\n    if (indices.length !== rank) {\n      throw new Error(`indices length must be ${rank}`);\n    }\n\n    const normalizedIndices = indices.map(normalizeDim).join(',');\n\n    if (rank === 0) {\n      return getByOffset('0u');\n    } else if (rank === 1) {\n      return getByOffset(normalizedIndices[0]);\n    } else {\n      implementationUsed.get = true;\n      implementationUsed.getByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `get_${name}(${normalizedIndices})`;\n    }\n  };\n\n  const getByIndices = (varIndices: string) => {\n    if (rank < 2) {\n      return getByOffset(varIndices);\n    } else {\n      implementationUsed.getByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `get_${name}ByIndices(${varIndices})`;\n    }\n  };\n\n  const setByIndicesImplementation =\n    rank < 2\n      ? ''\n      : `\n  fn set_${name}ByIndices(indices: ${type.indices}, value: ${valueType}) {\n    ${setByOffset(`i2o_${name}(indices)`, 'value')}\n  }`;\n\n  const setImplementation =\n    rank < 2\n      ? ''\n      : (() => {\n          const functionParams = rankIdentity.map((i) => `d${i}: u32`).join(', ');\n          const dimsParams = rankIdentity.map((i) => `d${i}`).join(', ');\n          return `\n  fn set_${name}(${functionParams}, value: ${valueType}) {\n    set_${name}ByIndices(${indices(dimsParams)}, value);\n  }`;\n        })();\n\n  const set = (...indicesAndValue: ReadonlyArray<number | string>) => {\n    if (indicesAndValue.length !== rank + 1) {\n      throw new Error(`indices length must be ${rank}`);\n    }\n    const value = indicesAndValue[rank];\n    if (typeof value !== 'string') {\n      throw new Error('value must be string');\n    }\n\n    const normalizedIndices = indicesAndValue.slice(0, rank).map(normalizeDim).join(',');\n\n    if (rank === 0) {\n      return setByOffset('0u', value);\n    } else if (rank === 1) {\n      return setByOffset(normalizedIndices[0], value);\n    } else {\n      implementationUsed.set = true;\n      implementationUsed.setByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `set_${name}(${normalizedIndices}, ${value})`;\n    }\n  };\n\n  const setByIndices = (varIndices: string, value: string) => {\n    if (rank < 2) {\n      return setByOffset(varIndices, value);\n    } else {\n      implementationUsed.setByIndices = true;\n      implementationUsed.indicesToOffset = true;\n      return `set_${name}ByIndices(${varIndices}, ${value});`;\n    }\n  };\n\n  const impl = () => {\n    const impls = [];\n    let needShapeStrides = false;\n    if (implementationUsed.offsetToIndices) {\n      impls.push(offsetToIndicesImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.indicesToOffset) {\n      impls.push(indicesToOffsetImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.broadcastedIndicesToOffset) {\n      Object.values(broadcastedIndicesToOffsetImplementation).forEach((impl) => impls.push(impl));\n      needShapeStrides = true;\n    }\n    if (implementationUsed.set) {\n      impls.push(setImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.setByIndices) {\n      impls.push(setByIndicesImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.get) {\n      impls.push(getImplementation);\n      needShapeStrides = true;\n    }\n    if (implementationUsed.getByIndices) {\n      impls.push(getByIndicesImplementation);\n      needShapeStrides = true;\n    }\n    if (!useUniform && needShapeStrides) {\n      impls.unshift(\n        `const ${shape} = ${type.indices}(${shapeOrRank.join(',')});`,\n        `const ${strides} = ${type.indices}(${ShapeUtil.computeStrides(shapeOrRank).join(',')});`,\n      );\n    }\n    return impls.join('\\n');\n  };\n\n  return {\n    impl,\n    type,\n    offsetToIndices,\n    indicesToOffset,\n    broadcastedIndicesToOffset,\n    indices,\n    indicesGet,\n    indicesSet,\n    set,\n    setByOffset,\n    setByIndices,\n    get,\n    getByOffset,\n    getByIndices,\n    // isVec4,\n    usage,\n    name,\n    strides,\n    shape,\n    rank,\n  };\n};\n\n/**\n * Create a IndicesHelper for an input.\n *\n * @param name - the name of the input.\n * @param type - the tensor type of the input.\n * @param shapeOrRank - the tensor shape or the rank of the input.\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the input.\n */\nexport const inputVariable = (\n  name: string,\n  type: number,\n  shapeOrRank: number | readonly number[],\n  components: 1 | 2 | 3 | 4 = 1,\n): IndicesHelper => createIndicesHelper(name, type, shapeOrRank, 'input', components);\n\n/**\n * Create a IndicesHelper for an output.\n *\n * @param name - the name of the output.\n * @param type - the tensor type of the output.\n * @param shapeOrRank - the tensor shape or the rank of the output.\n * @param components - the number of components of the output. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the output.\n */\nexport const outputVariable = (\n  name: string,\n  type: number,\n  shapeOrRank: number | readonly number[],\n  components: 1 | 2 | 3 | 4 = 1,\n): IndicesHelper => createIndicesHelper(name, type, shapeOrRank, 'output', components);\n\n/**\n * Create a IndicesHelper for an atomic output.\n *\n * @param name - the name of the output.\n * @param type - the tensor type of the output.\n * @param shapeOrRank - the tensor shape or the rank of the output.\n * @returns an IndicesHelper for the output.\n */\nexport const atomicOutputVariable = (\n  name: string,\n  type: number,\n  shapeOrRank: number | readonly number[],\n): IndicesHelper => createIndicesHelper(name, type, shapeOrRank, 'atomicOutput', 1);\n\n/**\n * Create a IndicesHelper for an internal variable.\n *\n * @param name - the name of the variable.\n * @param type - the tensor type of the variable.\n * @param shapeOrRank - the tensor shape or the rank of the variable.\n * @param components - the number of components of the variable. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the variable.\n */\nexport const internalVariable = (\n  name: string,\n  type: number,\n  shapeOrRank: number | readonly number[],\n  components: 1 | 2 | 3 | 4 = 1,\n): IndicesHelper => createIndicesHelper(name, type, shapeOrRank, 'internal', components);\n\nexport type UniformDataElementType = 'u32' | 'f16' | 'f32' | 'i32';\nexport type UniformsArrayType = Array<{ name: string; type: UniformDataElementType; length?: number }>;\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  /**\n   * A helper function to generate the start of main function in WGSL source code.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param workgroupSize - an optional workgroup size. default is WORKGROUP_SIZE.\n   */\n  mainStart(workgroupSize?: number | [number, number, number]): string;\n\n  /**\n   * A helper function to generate the code snippet for guarding against out-of-bounds size.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n   *\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param size - the size of the data to guard against. can be a number or a string (WGSL `u32` expression).\n   */\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n\n  /**\n   * A helper function to generate the code snippet for declaring multiple inputs or outputs.\n   *\n   * @param variables - an array of IndicesHelper for the variables.\n   */\n  declareVariables(...variables: IndicesHelper[]): string;\n\n  /**\n   * A helper function to register one uniform. Can be called multiple times to register multiple uniforms.\n   *\n   * @param name - the name of the uniform.\n   * @param type - the type of the uniform.\n   * @param length - the length of the uniform, default to 1 when it is not provided.\n   */\n  registerUniform(name: string, type: string, length?: number): ShaderHelper;\n\n  /**\n   * A helper function to register multiple uniforms. Can be called multiple times to register multiple uniforms.\n   *\n   * @param uniforms - an array of uniforms. Each element of the array is an object with 2 properties: `name` and\n   *     `type`.\n   */\n  registerUniforms(uniforms: UniformsArrayType): ShaderHelper;\n\n  /**\n   * A helper function to register multiple internal variables. Can be called multiple times to register multiple\n   * internal variables.\n   *\n   * @param variables - an array of IndicesHelper for the variables.\n   */\n  registerInternalVariables(...variables: IndicesHelper[]): ShaderHelper;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(\n    private normalizedDispatchGroup: [number, number, number],\n    private limits: GPUSupportedLimits,\n  ) {}\n\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number | string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n\n  mainStart(workgroupSize: number | [number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    if (\n      workgroupSizeX > this.limits.maxComputeWorkgroupSizeX ||\n      workgroupSizeY > this.limits.maxComputeWorkgroupSizeY ||\n      workgroupSizeZ > this.limits.maxComputeWorkgroupSizeZ\n    ) {\n      throw new Error(\n        `workgroup size [${workgroupSizeX}, ${workgroupSizeY}, ${\n          workgroupSizeZ\n        }] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${\n          this.limits.maxComputeWorkgroupSizeY\n        }, ${this.limits.maxComputeWorkgroupSizeZ}].`,\n      );\n    }\n\n    if (workgroupSizeX * workgroupSizeY * workgroupSizeZ > this.limits.maxComputeInvocationsPerWorkgroup) {\n      throw new Error(\n        `workgroup size [${workgroupSizeX}, ${workgroupSizeY}, ${\n          workgroupSizeZ\n        }] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`,\n      );\n    }\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch\n      ? `@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(local_invocation_id) local_id : vec3<u32>`\n      : `@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch\n      ? `let global_idx = global_id.x;\n         let workgroup_index = workgroup_id.x;`\n      : `let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n             workgroup_id.y * num_workgroups[0] + workgroup_id.x;\n         let global_idx = workgroup_index * ${workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_idx;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n\n  private appendVariableUniforms(variable: IndicesHelper): void {\n    if (variable.rank !== 0) {\n      if (variable.shape.startsWith('uniforms.')) {\n        this.uniforms.push({ name: variable.shape.replace('uniforms.', ''), type: 'u32', length: variable.rank });\n      }\n      if (variable.strides.startsWith('uniforms.')) {\n        this.uniforms.push({ name: variable.strides.replace('uniforms.', ''), type: 'u32', length: variable.rank });\n      }\n    }\n  }\n\n  private declareVariable(variable: IndicesHelper, bindingIndex: number): string {\n    if (variable.usage === 'internal') {\n      throw new Error('cannot use internal variable with declareVariable(). use registerInternalVariables() instead.');\n    }\n    this.variables.push(variable);\n    this.appendVariableUniforms(variable);\n    const access = variable.usage === 'input' ? 'read' : 'read_write';\n    const storageType = variable.usage === 'atomicOutput' ? `atomic<i32>` : variable.type.storage;\n    return `@group(0) @binding(${bindingIndex}) var<storage, ${access}> ${variable.name}: array<${storageType}>;`;\n  }\n\n  declareVariables(...variables: IndicesHelper[]): string {\n    return variables.map((v) => this.declareVariable(v, this.variableIndex++)).join('\\n');\n  }\n\n  private registerInternalVariable(variable: IndicesHelper): void {\n    if (variable.usage !== 'internal') {\n      throw new Error(\n        'cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.',\n      );\n    }\n\n    this.internalVariables.push(variable);\n    this.appendVariableUniforms(variable);\n  }\n\n  registerInternalVariables(...variables: IndicesHelper[]): ShaderHelper {\n    variables.forEach((v) => this.registerInternalVariable(v));\n    return this;\n  }\n\n  registerUniform(name: string, type: UniformDataElementType, length = 1): ShaderHelper {\n    this.uniforms.push({ name, type, length });\n    return this;\n  }\n\n  registerUniforms(additionalUniforms: UniformsArrayType): ShaderHelper {\n    this.uniforms = this.uniforms.concat(additionalUniforms);\n    return this;\n  }\n\n  private internalVariables: IndicesHelper[] = [];\n  private variables: IndicesHelper[] = [];\n  private uniforms: UniformsArrayType = [];\n  private uniformDeclaration(): string {\n    if (this.uniforms.length === 0) {\n      return '';\n    }\n\n    const uniformSnippets: string[] = [];\n    for (const { name, type, length } of this.uniforms) {\n      if (length && length > 4) {\n        if (type === 'f16') {\n          uniformSnippets.push(`@align(16) ${name}:array<mat2x4<${type}>, ${Math.ceil(length / 8)}>`);\n        } else {\n          uniformSnippets.push(`${name}:array<vec4<${type}>, ${Math.ceil(length / 4)}>`);\n        }\n      } else {\n        const typeTemp = length == null || length === 1 ? type : `vec${length}<${type}>`;\n        uniformSnippets.push(`${name}:${typeTemp}`);\n      }\n    }\n\n    return `\n      struct Uniforms { ${uniformSnippets.join(', ')} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`;\n  }\n  private variableIndex = 0;\n\n  /**\n   * Get additional implementation that needs to be added to the shader source.\n   */\n  get additionalImplementations(): string {\n    return (\n      this.uniformDeclaration() +\n      this.variables.map((i) => i.impl()).join('\\n') +\n      this.internalVariables.map((i) => i.impl()).join('\\n')\n    );\n  }\n\n  /**\n   * Get the variable info of the shader program.\n   */\n  get variablesInfo(): ProgramUniformVariableInfo[] | undefined {\n    if (this.uniforms.length === 0) {\n      return undefined;\n    }\n\n    const uniformWgslTypeToDataType = (type: UniformDataElementType) =>\n      [DataType.uint32, DataType.float16, DataType.float, DataType.int32][['u32', 'f16', 'f32', 'i32'].indexOf(type)];\n    return this.uniforms.map((u) => [uniformWgslTypeToDataType(u.type), u.length ?? 1]);\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number], limits: GPUSupportedLimits) =>\n  new ShaderHelperImpl(dispatchGroup, limits);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[], perm: readonly number[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (perm.length !== 0 && perm.length !== inputs[0].dims.length) {\n    throw new Error(`perm size ${perm.length} does not match input rank ${inputs[0].dims.length}`);\n  }\n};\n\nconst getAdjustedPerm = (inputRank: number, perm: number[]): number[] =>\n  perm.length !== 0 ? perm : [...new Array(inputRank).keys()].reverse();\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n  ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape.length, perm));\n\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\n  let reverseFunc = `fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\n    var a: ${input.type.indices};`;\n  for (let i = 0; i < rank; ++i) {\n    // input indices and output indices should always be larger or equal to 2,\n    // so indexer is always valid to be used on `a` and `i`.\n    reverseFunc += `a[${perm[i]}]=i[${i}];`;\n  }\n  return (reverseFunc += 'return a;}');\n};\n\nconst squeezeShape = (shape: readonly number[], adjustedPerm: number[]): { newShape: number[]; newPerm: number[] } => {\n  const newShape: number[] = [];\n  const newPerm: number[] = [];\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n    }\n    if (shape[adjustedPerm[i]] !== 1) {\n      newPerm.push(adjustedPerm[i]);\n    }\n  }\n  return { newShape, newPerm };\n};\n\nconst isTransposeReshape = (perm: number[], shape: readonly number[]) => {\n  // As long as the dims with values > 1 stay in the same order, it's a reshape.\n  // Example: Shape=(1,1,1024,4096) -> perm=(2,0,3,1).\n  let lastPermutedAxis = 0;\n  for (let i = 0; i < perm.length; ++i) {\n    if (shape[perm[i]] === 1) {\n      continue;\n    }\n    if (perm[i] < lastPermutedAxis) {\n      return false;\n    }\n    lastPermutedAxis = perm[i];\n  }\n  return true;\n};\n\nexport const createTransposeProgramInfo = (inputTensor: TensorView, permAttr: number[]): ProgramInfo => {\n  const inputDataType = inputTensor.dataType;\n  const inputRank = inputTensor.dims.length;\n  const perm = getAdjustedPerm(inputRank, permAttr);\n  const outputShape = getOutputShape(inputTensor.dims, perm);\n  let newInputShape = inputTensor.dims;\n  let newOutputShape = outputShape;\n  const transposeAsReshape = inputRank < 2 || isTransposeReshape(perm, inputTensor.dims);\n  let getShaderSource;\n  if (transposeAsReshape) {\n    getShaderSource = (shaderHelper: ShaderHelper) => {\n      const input = inputVariable('input', inputDataType, newInputShape, 4);\n      const output = outputVariable('output', inputDataType, newOutputShape, 4);\n      return `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    output[global_idx] = input[global_idx];\n  }`;\n    };\n\n    return {\n      name: 'TransposeCopy',\n      shaderCache: { inputDependencies: ['type'] },\n      getRunData: () => {\n        const outputSize = ShapeUtil.size(outputShape);\n        return {\n          outputs: [{ dims: outputShape, dataType: inputTensor.dataType }],\n          dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* components */) },\n          programUniforms: [{ type: DataType.uint32, data: Math.ceil(outputSize / 4) }],\n        };\n      },\n      getShaderSource,\n    };\n  }\n  const { newShape, newPerm } = squeezeShape(inputTensor.dims, perm);\n  const channelsLast = ShapeUtil.areEqual(newPerm, [2, 3, 1]);\n  const channelsFirst = ShapeUtil.areEqual(newPerm, [3, 1, 2]);\n  const useShared = newShape.length === 2 || channelsLast || channelsFirst;\n  if (useShared) {\n    newInputShape = channelsLast\n      ? [newShape[0], newShape[1] * newShape[2]]\n      : channelsFirst\n        ? [newShape[0] * newShape[1], newShape[2]]\n        : newShape;\n    newOutputShape = [newInputShape[1], newInputShape[0]];\n    const tileSize = 16;\n    getShaderSource = (shaderHelper: ShaderHelper) => {\n      const input = inputVariable('a', inputDataType, newInputShape.length);\n      const output = outputVariable('output', inputDataType, newOutputShape.length);\n      return `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n  var<workgroup> tile : array<array<${output.type.value}, ${tileSize + 1}>, ${tileSize}>;\n  ${shaderHelper.mainStart([tileSize, tileSize, 1])}\n    let stride = (uniforms.output_shape[1] - 1) / ${tileSize} + 1;\n    let workgroup_id_x = workgroup_index % stride;\n    let workgroup_id_y = workgroup_index / stride;\n    let input_col = workgroup_id_y * ${tileSize}u + local_id.x;\n    let input_row = workgroup_id_x * ${tileSize}u + local_id.y;\n    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {\n      tile[local_id.y][local_id.x] = ${input.getByIndices(`${input.type.indices}(input_row, input_col)`)};\n    }\n    workgroupBarrier();\n\n    let output_col = workgroup_id_x * ${tileSize}u + local_id.x;\n    let output_row = workgroup_id_y * ${tileSize}u + local_id.y;\n    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {\n      ${output.setByIndices(`${output.type.indices}(output_row, output_col)`, 'tile[local_id.x][local_id.y]')}\n    }\n  }`;\n    };\n    return {\n      name: 'TransposeShared',\n      shaderCache: { inputDependencies: ['type'] },\n      getRunData: () => {\n        const outputSize = ShapeUtil.size(outputShape);\n        return {\n          outputs: [{ dims: outputShape, dataType: inputTensor.dataType }],\n          dispatchGroup: { x: Math.ceil(newOutputShape[1] / tileSize), y: Math.ceil(newOutputShape[0] / tileSize) },\n          programUniforms: [\n            { type: DataType.uint32, data: outputSize },\n            ...createTensorShapeVariables(newInputShape, newOutputShape),\n          ],\n        };\n      },\n      getShaderSource,\n    };\n  }\n\n  getShaderSource = (shaderHelper: ShaderHelper) => {\n    const input = inputVariable('a', inputDataType, newInputShape.length);\n    const output = outputVariable('output', inputDataType, newOutputShape.length);\n    return `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n\n  ${permFunctionBody(perm, inputRank, input, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let indices = ${output.offsetToIndices('global_idx')};\n    let aIndices = perm(indices);\n\n    ${output.setByOffset('global_idx', input.getByIndices('aIndices'))}\n  }`;\n  };\n  return {\n    name: 'Transpose',\n    shaderCache: { hint: `${permAttr}`, inputDependencies: ['rank'] },\n    getRunData: () => {\n      const outputSize = ShapeUtil.size(outputShape);\n      return {\n        outputs: [{ dims: outputShape, dataType: inputTensor.dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms: [\n          { type: DataType.uint32, data: outputSize },\n          ...createTensorShapeVariables(newInputShape, newOutputShape),\n        ],\n      };\n    },\n    getShaderSource,\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs, attributes.perm);\n  context.compute(createTransposeProgramInfo(context.inputs[0], attributes.perm));\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n  createAttributeWithCacheKey({ perm: attributes.perm as number[] });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { inputVariable, outputVariable, ShaderHelper } from './common';\nimport { createReduceAttributesFromInputs, ReduceAttributes } from './reduce';\nimport { createTransposeProgramInfo } from './transpose';\n\nconst reduceOps: { [key: string]: string } = {\n  max: 'select(bestValue, candidate, candidate > bestValue)',\n  min: 'select(bestValue, candidate, candidate < bestValue)',\n  mean: 'bestValue + candidate',\n  sum: 'bestValue + candidate',\n  prod: 'bestValue * candidate',\n  sumSquare: 'bestValue + candidate * candidate',\n  logSumExp: 'bestValue + exp(candidate)',\n  l1: 'bestValue + abs(candidate)',\n  l2: 'bestValue + candidate * candidate',\n  logSum: 'bestValue + candidate',\n};\n\nconst reduceSharedOps: { [key: string]: string } = {\n  max: 'select(bestValue, candidate, candidate > bestValue)',\n  min: 'select(bestValue, candidate, candidate < bestValue)',\n  mean: 'bestValue + candidate',\n  sum: 'bestValue + candidate',\n  prod: 'bestValue * candidate',\n  sumSquare: 'bestValue + candidate',\n  logSumExp: 'bestValue + candidate',\n  l1: 'bestValue + candidate',\n  l2: 'bestValue + candidate',\n  logSum: 'bestValue + candidate',\n};\n\nconst reduceInitValues: { [key: string]: string } = {\n  max: '_A[offset]',\n  min: '_A[offset]',\n  mean: '0',\n  sum: '0',\n  prod: '1',\n  sumSquare: '0',\n  logSumExp: '0',\n  l1: '0',\n  l2: '0',\n  logSum: '0',\n};\n\nconst reduceOutputValues: { [key: string]: string } = {\n  max: 'bestValue',\n  min: 'bestValue',\n  sum: 'bestValue',\n  prod: 'bestValue',\n  sumSquare: 'bestValue',\n  logSumExp: 'log(bestValue)',\n  l1: 'bestValue',\n  l2: 'sqrt(bestValue)',\n  logSum: 'log(bestValue)',\n};\n\nconst getInnerMostAxes = (numInnerAxes: number, rank: number): number[] => {\n  const res = [];\n  for (let i = rank - numInnerAxes; i < rank; ++i) {\n    res.push(i);\n  }\n  return res;\n};\n\nconst computeOutAndReduceShapes = (shape: readonly number[], axes: readonly number[]): [number[], number[]] => {\n  const outputShape = [];\n  const rank = shape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outputShape.push(shape[dim]);\n    }\n  }\n  const reduceShape = axes.map((dim) => shape[dim]);\n  return [outputShape, reduceShape];\n};\n\nconst expandShapeToKeepDim = (shape: number[], axes: number[]): number[] => {\n  const rank = shape.length + axes.length;\n  const expandShape = [];\n  let shapeIdx = 0;\n  for (let dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      expandShape.push(shape[shapeIdx++]);\n    } else {\n      expandShape.push(1);\n    }\n  }\n  return expandShape;\n};\n\nconst areAxesInnerMostDims = (axes: number[], rank: number): boolean => {\n  for (let i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getAxesPermutation = (axes: number[], rank: number): number[] => {\n  const res = [];\n  if (!areAxesInnerMostDims(axes, rank)) {\n    for (let i = 0; i < rank; ++i) {\n      if (axes.indexOf(i) === -1) {\n        res.push(i);\n      }\n    }\n    axes.forEach((axis) => res.push(axis));\n  }\n  return res;\n};\n\nexport const createReduceSharedProgramInfo = (\n  name: string,\n  cacheKey: string,\n  inputs: readonly TensorView[],\n  reduceType: string,\n  outputDataType: DataType,\n  outputShape: number[],\n  reduceShape: number[],\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n\n  const outputSize = ShapeUtil.size(outputShape);\n  const reduceSize = ShapeUtil.size(reduceShape);\n\n  const input = inputVariable('_A', inputs[0].dataType, inputShape);\n  const output = outputVariable('output', outputDataType, outputShape);\n\n  let workgroupSize = 64;\n  // If only one workgroup is dispatched, increase workgroupSize to improve parallelism.\n  if (outputSize === 1) {\n    workgroupSize = 256;\n  }\n\n  const sharedMemorySnippet = `\n          var<workgroup> aBestValues : array<f32, ${workgroupSize}>;\n       `;\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n        ${shaderHelper.registerUniform('reduceSize', 'u32').declareVariables(input, output)}\n        ${sharedMemorySnippet}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${shaderHelper.mainStart(workgroupSize)}\n\n          let outputIndex = global_idx / ${workgroupSize};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${reduceInitValues[reduceType]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${workgroupSize}) {\n           let candidate = f32(${input.getByOffset('offset + k')});\n           bestValue = ${reduceOps[reduceType]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${workgroupSize}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${reduceSharedOps[reduceType]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${output.setByOffset(\n            'outputIndex',\n            `${\n              reduceType === 'mean'\n                ? `${output.type.storage}(bestValue / f32(uniforms.reduceSize))`\n                : `${output.type.storage}(${reduceOutputValues[reduceType]})`\n            }`,\n          )};\n         }\n        }`;\n\n  // One work group is responsible for only one element of output.\n  return {\n    name,\n    // Note that in JSEP, WG size is not included in cache by default, but WebGPU EP it is.\n    shaderCache: { hint: `${cacheKey};${workgroupSize}`, inputDependencies: ['type'] },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: outputSize },\n      programUniforms: [{ type: DataType.uint32, data: reduceSize }],\n    }),\n  };\n};\n\nconst reduceCommon = (\n  context: ComputeContext,\n  name: string,\n  attributes: ReduceAttributes,\n  reduceType: 'sum' | 'sumSquare' | 'prod' | 'min' | 'max' | 'mean' | 'logSumExp' | 'l1' | 'l2' | 'logSum',\n): void => {\n  const updatedAttributes: ReduceAttributes =\n    context.inputs.length === 1 ? attributes : createReduceAttributesFromInputs(context.inputs, attributes);\n\n  let updatedAxes = updatedAttributes.axes;\n  if (updatedAxes.length === 0 && !updatedAttributes.noopWithEmptyAxes) {\n    updatedAxes = context.inputs[0].dims.map((_dim, i) => i);\n  }\n  const normalizeAxes = ShapeUtil.normalizeAxes(updatedAxes, context.inputs[0].dims.length);\n\n  let axes = normalizeAxes;\n  let input = context.inputs[0];\n  const permutedAxes = getAxesPermutation(axes, context.inputs[0].dims.length);\n  if (permutedAxes.length > 0) {\n    input = context.compute(createTransposeProgramInfo(context.inputs[0], permutedAxes), {\n      inputs: [0],\n      outputs: [-1],\n    })[0];\n    axes = getInnerMostAxes(axes.length, input.dims.length);\n  }\n\n  const [outputShape, reduceShape] = computeOutAndReduceShapes(input.dims, axes);\n  let finalOutputShape = outputShape;\n  if (updatedAttributes.keepDims) {\n    finalOutputShape = expandShapeToKeepDim(outputShape, normalizeAxes);\n  }\n\n  context.compute(\n    createReduceSharedProgramInfo(\n      name,\n      updatedAttributes.cacheKey,\n      [input],\n      reduceType,\n      context.inputs[0].dataType,\n      finalOutputShape,\n      reduceShape,\n    ),\n    { inputs: [input] },\n  );\n};\n\nexport const reduceMeanShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceMeanShared', attributes, 'mean');\n};\n\nexport const reduceL1Shared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceL1Shared', attributes, 'l1');\n};\n\nexport const reduceL2Shared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceL2Shared', attributes, 'l2');\n};\n\nexport const reduceLogSumExpShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceLogSumExpShared', attributes, 'logSumExp');\n};\n\nexport const reduceMaxShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceMaxShared', attributes, 'max');\n};\n\nexport const reduceMinShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceMinShared', attributes, 'min');\n};\n\nexport const reduceProdShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceProdShared', attributes, 'prod');\n};\n\nexport const reduceSumShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceSumShared', attributes, 'sum');\n};\n\nexport const reduceSumSquareShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceSumSquareShared', attributes, 'sumSquare');\n};\n\nexport const reduceLogSumShared = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  reduceCommon(context, 'ReduceLogSumShared', attributes, 'logSum');\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramShaderCacheInfo } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\nimport {\n  reduceL1Shared,\n  reduceL2Shared,\n  reduceLogSumExpShared,\n  reduceLogSumShared,\n  reduceMaxShared,\n  reduceMeanShared,\n  reduceMinShared,\n  reduceProdShared,\n  reduceSumShared,\n  reduceSumSquareShared,\n} from './reduce-shared';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('Reduce op requires 1 or 2 inputs.');\n  }\n\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n    throw new Error('Invalid axes input dims.');\n  }\n};\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  noopWithEmptyAxes: boolean;\n  axes: number[];\n}\n\nexport type ReduceOp = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  axes: readonly number[],\n) => [string, string, string, string, ...string[]];\n\nconst noOp: ReduceOp = (input) => ['', '', `var value = ${input.getByIndices('input_indices')};`, ''];\nexport const createReduceProgramInfo = (\n  name: string,\n  shaderCache: ProgramShaderCacheInfo,\n  inputs: readonly TensorView[],\n  reduceOp: ReduceOp,\n  axesInput: number[],\n  outputDataType: DataType,\n  keepDims = false,\n  noopWithEmptyAxes = false,\n): ProgramInfo => {\n  const outputShape: number[] = [];\n  const inputShape = inputs[0].dims;\n  const inputRank = inputShape.length;\n  const axes = ShapeUtil.normalizeAxes(axesInput, inputRank);\n  const reduceOnAllAxes = !noopWithEmptyAxes && axes.length === 0;\n  inputShape.forEach((d, i) => {\n    if (reduceOnAllAxes || axes.indexOf(i) >= 0) {\n      if (keepDims) {\n        outputShape.push(1);\n      } // else { // skip this axis}\n    } else {\n      outputShape.push(d);\n    }\n  });\n  const outputRank = outputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const idxCopy: string[] = []; // copy output indexes to input indexes\n\n    const input = inputVariable('_A', inputs[0].dataType, inputRank);\n    const output = outputVariable('output', outputDataType, outputRank);\n    const ops = reduceOp(input, output, axes);\n    let reduceOps = ops[2];\n\n    for (let k = 0, l = 0; k < inputRank; k++) {\n      // if this axis is reduced\n      if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n        if (keepDims) {\n          l++;\n        }\n        // loop over the d-th axis\n        reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputShape[k]}; j${k}++) {\n                  ${ops[2].includes('last_index') ? `let last_index = j${k};` : ''}\n                  ${input.indicesSet('input_indices', k, `j${k}`)}\n                  ${reduceOps}\n                }`;\n      } else {\n        idxCopy.push(`${input.indicesSet('input_indices', k, output.indicesGet('output_indices', l))};`);\n        l++;\n      }\n    }\n    return `\n\n        ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n          var input_indices: ${input.type.indices};\n          let output_indices = ${output.offsetToIndices('global_idx')};\n\n          ${idxCopy.join('\\n')}\n          ${ops[0]}       // init ops for reduce max/min\n          ${ops[1]}\n          ${reduceOps}\n          ${ops[3]}\n          ${ops.length === 4 ? output.setByOffset('global_idx', 'value') : ops.slice(4).join('\\n')}\n        }`;\n  };\n\n  return {\n    name,\n    shaderCache,\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        ...createTensorShapeVariables(inputShape, outputShape),\n      ],\n    }),\n  };\n};\n\nexport const createReduceAttributesFromInputs = (\n  inputs: readonly TensorView[],\n  attributes: ReduceAttributes,\n): ReduceAttributes => {\n  const axes: number[] = [];\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach((v) => axes.push(Number(v)));\n  }\n  return createAttributeWithCacheKey({\n    axes,\n    keepDims: attributes.keepDims,\n    noopWithEmptyAxes: attributes.noopWithEmptyAxes,\n  });\n};\n\nconst runReduceProgram = (\n  context: ComputeContext,\n  name: string,\n  attributes: ReduceAttributes,\n  reduceOp: ReduceOp,\n): void => {\n  const inputs = context.inputs;\n  const updatedAttributes: ReduceAttributes =\n    inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n\n  context.compute(\n    createReduceProgramInfo(\n      name,\n      { hint: updatedAttributes.cacheKey, inputDependencies: ['rank'] },\n      [inputs[0]],\n      updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp,\n      updatedAttributes.axes,\n      inputs[0].dataType,\n      updatedAttributes.keepDims,\n      updatedAttributes.noopWithEmptyAxes,\n    ),\n    { inputs: [0] },\n  );\n};\n\nconst reduceLogSumNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += ${input.getByIndices('input_indices')};`,\n    'value = log(value);',\n  ];\n  runReduceProgram(context, 'ReduceLogSum', attributes, reduceOp);\n};\n\nconst reduceL1Naive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += abs(${input.getByIndices('input_indices')});`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceL1', attributes, reduceOp);\n};\n\nconst reduceL2Naive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n    '',\n    `t = ${input.getByIndices('input_indices')}; value += (t * t);`,\n    'value = sqrt(value);',\n  ];\n  runReduceProgram(context, 'ReduceL2', attributes, reduceOp);\n};\n\nconst reduceLogSumExpNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += exp(${input.getByIndices('input_indices')});`,\n    'value = log(value);',\n  ];\n  runReduceProgram(context, 'ReduceLogSumExp', attributes, reduceOp);\n};\n\nconst reduceMaxNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(input.indicesSet('input_indices', k, 0));\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};`,\n      `value = max(value, ${input.getByIndices('input_indices')});`,\n      '',\n    ];\n  };\n  runReduceProgram(context, 'ReduceMax', attributes, reduceOp);\n};\n\nconst reduceMeanNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output, axes) => {\n    let size = 1.0;\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        // TODO: this depends on the input dims. If we want to use uniform, this need to be updated.\n        size *= context.inputs[0].dims[k];\n      }\n    }\n\n    return [\n      'var sum = f32(0);',\n      '',\n      `sum += f32(${input.getByIndices('input_indices')});`,\n      `let value = ${output.type.value}(sum / ${size});`,\n    ];\n  };\n  runReduceProgram(context, 'ReduceMean', attributes, reduceOp);\n};\n\nconst reduceMinNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`input_indices[${k}] = 0;`); // first element\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};`,\n      `value = min(value, ${input.getByIndices('input_indices')});`,\n      '',\n    ];\n  };\n  runReduceProgram(context, 'ReduceMin', attributes, reduceOp);\n};\n\nconst reduceProdNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(1);`,\n    '',\n    `value *= ${input.getByIndices('input_indices')};`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceProd', attributes, reduceOp);\n};\n\nconst reduceSumNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var value = ${output.type.storage}(0);`,\n    '',\n    `value += ${input.getByIndices('input_indices')};`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceSum', attributes, reduceOp);\n};\n\nconst reduceSumSquareNaive = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) => [\n    `var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n    '',\n    `t = ${input.getByIndices('input_indices')}; value += t * t;`,\n    '',\n  ];\n  runReduceProgram(context, 'ReduceSumSquare', attributes, reduceOp);\n};\n\nconst useNaiveReduceMethod = (\n  shape: readonly number[],\n  axes: readonly number[],\n  noopWithEmptyAxes: boolean,\n): boolean => {\n  if (axes.length === 0) {\n    return noopWithEmptyAxes;\n  }\n\n  let outputSize = 1;\n  let reduceSize = 1;\n  for (let dim = 0; dim < axes.length; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outputSize *= shape[dim];\n    } else {\n      reduceSize *= shape[dim];\n    }\n  }\n\n  // The condition data is very rough, although considering the count of Execution Unit (EU), the potential\n  // work groups in a EU and the counts of loops in the naive and shared methods, also doing experiments\n  // on some machines.\n  return reduceSize < 32 && outputSize > 1024;\n};\n\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceMeanNaive(context, attributes);\n  } else {\n    reduceMeanShared(context, attributes);\n  }\n};\n\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceL1Naive(context, attributes);\n  } else {\n    reduceL1Shared(context, attributes);\n  }\n};\n\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceL2Naive(context, attributes);\n  } else {\n    reduceL2Shared(context, attributes);\n  }\n};\n\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceLogSumExpNaive(context, attributes);\n  } else {\n    reduceLogSumExpShared(context, attributes);\n  }\n};\n\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceMaxNaive(context, attributes);\n  } else {\n    reduceMaxShared(context, attributes);\n  }\n};\n\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceMinNaive(context, attributes);\n  } else {\n    reduceMinShared(context, attributes);\n  }\n};\n\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceProdNaive(context, attributes);\n  } else {\n    reduceProdShared(context, attributes);\n  }\n};\n\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceSumNaive(context, attributes);\n  } else {\n    reduceSumShared(context, attributes);\n  }\n};\n\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceSumSquareNaive(context, attributes);\n  } else {\n    reduceSumSquareShared(context, attributes);\n  }\n};\n\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  if (useNaiveReduceMethod(context.inputs[0].dims, attributes.axes, attributes.noopWithEmptyAxes)) {\n    reduceLogSumNaive(context, attributes);\n  } else {\n    reduceLogSumShared(context, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext } from '../types';\n\nimport { createReduceProgramInfo, ReduceOp } from './reduce';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('ArgMinMaxOp op requires 1 or 2 inputs.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport interface ArgMinMaxAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  axis: number;\n  selectLastIndex: number;\n}\n\nexport const argMin = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`input_indices[${k}] = 0;`); // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};\\nvar best_index : i32 = 0;`,\n      `if (${input.getByIndices('input_indices')} ${attributes.selectLastIndex > 0 ? '<=' : '<'} value) {\n         value = ${input.getByIndices('input_indices')};\n         best_index = i32(last_index);\n       }`,\n      '',\n      output.setByOffset('global_idx', 'best_index'),\n    ];\n  };\n\n  context.compute(\n    createReduceProgramInfo(\n      'ArgMin',\n      { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n      [context.inputs[0]],\n      argMinMaxOp,\n      [attributes.axis],\n      DataType.int64,\n      attributes.keepDims,\n    ),\n    { inputs: [0] },\n  );\n};\n\nexport const argMax = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.rank; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`input_indices[${k}] = 0;`); // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByIndices('input_indices')};\\nvar best_index : i32 = 0;`,\n      `if (${input.getByIndices('input_indices')} ${attributes.selectLastIndex > 0 ? '>=' : '>'} value) {\n         value = ${input.getByIndices('input_indices')};\n         best_index = i32(last_index);\n       }`,\n      '',\n      output.setByOffset('global_idx', 'best_index'),\n    ];\n  };\n\n  context.compute(\n    createReduceProgramInfo(\n      'argMax',\n      { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n      [context.inputs[0]],\n      argMinMaxOp,\n      [attributes.axis],\n      DataType.int64,\n      attributes.keepDims,\n    ),\n    { inputs: [0] },\n  );\n};\n\nexport const parseArgMinMaxAttributes = (attributes: Record<string, unknown>): ArgMinMaxAttributes =>\n  createAttributeWithCacheKey(attributes as Omit<ArgMinMaxAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, GpuDataType, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  getMaxComponents,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  tensorTypeToWsglValueType,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\nexport const enum AttentionQkvFormat {\n  unknown, // enum value not set, or depends on qkv projection implementation details\n  qkvBNSH, // for non-packed qkv, permuted\n  qkvBSNH, // for non-packed qkv, not permuted, used by memory efficient attention or MultiHeadAttention\n  qkvBSN3H, // for TRT fused attention, qkv are packed\n  qkvBNSHqkvBS3NH, // for TRT fused causal attention, data has two formats (qkv is 3BNSH, gemm_buffer is BS3NH)\n  qKvBSNHxBSN2H, // for TRT fused cross attention, kv are packed\n  qkvTNH, // for memory efficient attention, qkv are not packed, and paddings are removed.\n  qkvTN3H, // for TRT fused attention, qkv are packed and paddings are removed\n}\n\nexport const enum AttentionMaskType {\n  none, // No mask\n  mask1dKeySeqLen, // [batch_size], key sequence length\n  mask1dEndStart, // [2 * batch_size] with end positions and start positions\n  mask1DKeySeqLenStart, // [3 * batch_size + 2] with [key_len[0], ..., key_len[batch_size - 1], query_start[0],\n  // ..., query_start[batch_size - 1], query_end[batch_size - 1], key_start[0], ...,\n  // key_start[batch_size - 1], key_end[batch_size - 1]]\n  mask2dDummy, // dummy mask with shape [1, 1] or [batch_size, 1]. It has same effect as no mask.\n  mask2dKeyPadding, // [batch_size, total_sequence_length]\n  mask3dAttention, // [batch_size, sequence_length, total_sequence_length]\n  mask4dMegatron, // Megatron causal mask with shape [batch_size, 1, max_sequence_length, max_sequence_length]\n  maskUnknown,\n}\n\nexport interface AttentionParameters {\n  batchSize: number;\n  sequenceLength: number;\n  pastSequenceLength: number;\n  kvSequenceLength: number;\n  totalSequenceLength: number;\n  maxSequenceLength: number;\n  inputHiddenSize: number;\n  hiddenSize: number;\n  vHiddenSize: number;\n  headSize: number;\n  vHeadSize: number;\n  numHeads: number;\n  kvNumHeads?: number;\n  nReps?: number;\n  isUnidirectional?: boolean;\n  pastPresentShareBuffer: boolean;\n  maskFilterValue?: number;\n  maskType: AttentionMaskType;\n  scale: number;\n  broadcastResPosBias: boolean;\n  passPastInKv: boolean;\n  qkvFormat: AttentionQkvFormat;\n  softcap?: number;\n  doRotary?: number;\n  rotaryInterLeaved?: number;\n  sommoothSoftmax?: number;\n  localWindowsSize?: number;\n}\n\nexport interface AttentionAttrs {\n  numHeads: number;\n  isUnidirectional: number;\n  maskFilterValue: number;\n  scale: number;\n  doRotary: number;\n  qkvHiddenSizes: number[];\n  pastPresentShareBuffer: boolean;\n}\n\nconst validateAttentionInputs = (inputs: readonly TensorView[], attributes: AttentionAttrs): AttentionParameters => {\n  // Abbreviation and Meanings:\n  //   B:    batch_size\n  //   S:    sequence_length (input sequence length of query)\n  //   P:    past_sequence_length (past sequence length of key or value)\n  //   L:    kv_sequence_length (input sequence length of key or value)\n  //   M:    max_sequence_length\n  //   T:    total_sequence_length = past_sequence_length + kv_sequence_length\n  //   N:    num_heads\n  //   H:    head size for Q and K, aka q_head_size or k_head_size or qk_head_size\n  //   H_v:  v_head_size\n  //   D_i:  input hidden size\n  //   D:    hidden size for Q and K (D = N * H), aka q_hidden_size or k_hidden_size or qk_hidden_size\n  //   D_v:  v_hidden_size = num_heads * v_head_size\n\n  // When past state is used, Q, K and V should have same hidden size (unless we split it into past_key and past_value).\n\n  // Input shapes:\n  //   input        (Q/K/V)    : (B, S, D_i)\n  //   weights      (Q/K/V)    : (D_i, D + D + D_v)\n  //   bias         (Q/K/V)    : (D + D + D_v)\n  //   mask_index              : see below\n  //   past         (K/V)      : (2, B, N, P, H) or NULL\n  //   attention_bias          : (B, N, S, T) or NULL\n\n  // For mask_index, the following shapes are supported:\n  //     NULL, (B, 1), (1, 1)\n  //     (B), (2 * B), (3 * B + 2)\n  //     (B, T)\n  //     (B, S, T)\n  //     (B, 1, M, M)\n  //\n  // When a model is pruned (like some attention heads are removed in Q/K/V), input_hidden_size could be larger\n  // than hidden dimension of Q, K and V.\n\n  const input = inputs[0];\n  const weights = inputs[1];\n  const bias = inputs[2];\n  const maskIndex = inputs[3];\n  const past = inputs[4];\n  const attentionBias = inputs[5];\n\n  if (past && attentionBias) {\n    throw new Error('Attention cannot have both past and attention_bias');\n  }\n\n  if (input.dims.length !== 3) {\n    throw new Error('Input \"input\" must have 3 dimensions');\n  }\n\n  const batchSize = input.dims[0];\n  const sequenceLength = input.dims[1];\n  const inputHiddenSize = input.dims[2];\n\n  if (bias.dims.length !== 1) {\n    throw new Error('Input \"bias\" is expected to have 1 dimensions');\n  }\n\n  if (weights.dims.length !== 2) {\n    throw new Error('Input \"weights\" is expected to have 2 dimensions');\n  }\n\n  if (weights.dims[0] !== inputHiddenSize) {\n    throw new Error('Input 1 dimension 0 should have same length as dimension 2 of input 0');\n  }\n\n  if (bias.dims[0] !== weights.dims[1]) {\n    throw new Error('Input \"bias\" dimension 0 should have same length as dimension 1 of input \"weights\"');\n  }\n\n  let qHiddenSize = bias.dims[0] / 3;\n  let kHiddenSize = qHiddenSize;\n  let vHiddenSize = kHiddenSize;\n  if (attributes.qkvHiddenSizes.length > 0) {\n    if (attributes.qkvHiddenSizes.length !== 3) {\n      throw new Error('qkv_hidden_sizes attribute should have 3 elements');\n    }\n    for (const sz of attributes.qkvHiddenSizes) {\n      if (sz % attributes.numHeads !== 0) {\n        throw new Error('qkv_hidden_sizes should be divisible by num_heads');\n      }\n    }\n\n    qHiddenSize = attributes.qkvHiddenSizes[0];\n    kHiddenSize = attributes.qkvHiddenSizes[1];\n    vHiddenSize = attributes.qkvHiddenSizes[2];\n  }\n\n  const kvSequenceLength = sequenceLength;\n\n  if (qHiddenSize !== kHiddenSize) {\n    throw new Error('qkv_hidden_sizes first element should be same as the second');\n  }\n\n  if (bias.dims[0] !== qHiddenSize + kHiddenSize + vHiddenSize) {\n    throw new Error('Input \"bias\" dimension 0 should have same length as sum of Q/K/V hidden sizes');\n  }\n\n  let pastSequenceLength = 0;\n  if (past) {\n    if (kHiddenSize !== vHiddenSize) {\n      throw new Error('Input \"past\" expect k_hidden_size == v_hidden_size');\n    }\n    if (past.dims.length !== 5) {\n      throw new Error('Input \"past\" must have 5 dimensions');\n    }\n    if (past.dims[0] !== 2) {\n      throw new Error('Input \"past\" first dimension must be 2');\n    }\n    if (past.dims[1] !== batchSize) {\n      throw new Error('Input \"past\" second dimension must be batch_size');\n    }\n    if (past.dims[2] !== attributes.numHeads) {\n      throw new Error('Input \"past\" third dimension must be num_heads');\n    }\n    if (past.dims[4] !== kHiddenSize / attributes.numHeads) {\n      throw new Error('Input \"past\" fifth dimension must be k_hidden_size / num_heads');\n    }\n\n    if (!attributes.pastPresentShareBuffer) {\n      pastSequenceLength = past.dims[3];\n    }\n    // TODO: handle past_seq_len\n  }\n\n  const totalSequenceLength = kvSequenceLength + pastSequenceLength;\n  const maxSequenceLength = -1;\n\n  const maskType = AttentionMaskType.none;\n  if (maskIndex) {\n    // maskType = AttentionMaskType.MASK_UNKNOWN;\n    // TODO: handle mask\n    throw new Error('Mask not supported');\n  }\n\n  if (past) {\n    throw new Error('past is not supported');\n  }\n\n  if (attentionBias) {\n    if (attentionBias.dims.length !== 4) {\n      throw new Error('Input \"attention_bias\" must have 4 dimensions');\n    }\n\n    // TODO: support broadcasting the first and second dimensions of attention_bias\n    if (\n      attentionBias.dims[0] !== batchSize ||\n      attentionBias.dims[1] !== attributes.numHeads ||\n      attentionBias.dims[2] !== sequenceLength ||\n      attentionBias.dims[3] !== totalSequenceLength\n    ) {\n      throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n    }\n  }\n\n  return {\n    batchSize,\n    sequenceLength,\n    pastSequenceLength,\n    kvSequenceLength,\n    totalSequenceLength,\n    maxSequenceLength,\n    inputHiddenSize,\n    hiddenSize: qHiddenSize,\n    vHiddenSize,\n    headSize: Math.floor(qHiddenSize / attributes.numHeads),\n    vHeadSize: Math.floor(vHiddenSize / attributes.numHeads),\n    numHeads: attributes.numHeads,\n    isUnidirectional: false,\n    pastPresentShareBuffer: false,\n    maskFilterValue: attributes.maskFilterValue,\n    maskType,\n    scale: attributes.scale,\n    broadcastResPosBias: false,\n    passPastInKv: false,\n    qkvFormat: AttentionQkvFormat.qkvBNSH,\n  };\n};\n\nconst initVarStub = (\n  seqLensInput: IndicesHelper | undefined,\n  totalSequenceLengthInput: IndicesHelper | undefined,\n  initPastSequenceLength: boolean,\n) => {\n  // In the case of GQA, redefine total_sequence_length, present_sequence_length and past_sequence_length based on seqlen_k input\n  if (totalSequenceLengthInput && seqLensInput) {\n    return `\n      let total_sequence_length_input = u32(${totalSequenceLengthInput.getByOffset('0')});\n      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);\n      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;\n      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;\n      total_sequence_length = u32(${seqLensInput?.getByOffset('batchIdx')}) + 1;\n      var past_sequence_length: u32 = 0;\n      if (is_first_prompt == false) {\n        past_sequence_length = total_sequence_length - sequence_length;\n      }\n       `;\n  } else {\n    return `\n    ${initPastSequenceLength ? 'let past_sequence_length = uniforms.past_sequence_length' : ''};\n    let present_sequence_length = total_sequence_length;\n    `;\n  }\n};\n\nconst createInPlaceSoftmaxProgramInfo = (\n  input: TensorView,\n  batchSize: number,\n  numHeads: number,\n  pastSequenceLength: number,\n  sequenceLength: number,\n  totalSequenceLength: number,\n  seqLens: TensorView | undefined,\n  totalSequenceLengthInput: TensorView | undefined,\n) => {\n  // Set components to 1 if seqLens is specified, i.e. GroupQueryAttention.\n  const components = getMaxComponents(seqLens ? 1 : totalSequenceLength);\n  let WG = 64;\n  const totalSequenceLengthComp = totalSequenceLength / components;\n  if (totalSequenceLengthComp < WG) {\n    WG = 32;\n  }\n  const elementsPerThread = Math.ceil(totalSequenceLength / components / WG);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: batchSize },\n    { type: DataType.uint32, data: numHeads },\n    { type: DataType.uint32, data: pastSequenceLength },\n    { type: DataType.uint32, data: sequenceLength },\n    { type: DataType.uint32, data: totalSequenceLengthComp },\n    { type: DataType.uint32, data: elementsPerThread },\n  ];\n  const dataType = tensorTypeToWsglStorageType(input.dataType, components);\n  const f32Type = tensorTypeToWsglValueType(DataType.float, components);\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type'];\n  if (seqLens) {\n    inputDependencies.push('type');\n  }\n  if (totalSequenceLengthInput) {\n    inputDependencies.push('type');\n  }\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const inputHelper = outputVariable('x', input.dataType, input.dims, components);\n    const inputHelpers = [inputHelper];\n    const seqLensInputHelper = seqLens ? inputVariable('seq_lens', seqLens.dataType, seqLens.dims) : undefined;\n    if (seqLensInputHelper) {\n      inputHelpers.push(seqLensInputHelper);\n    }\n\n    const totalSequenceLengthInputHelper = totalSequenceLengthInput\n      ? inputVariable('total_sequence_length_input', totalSequenceLengthInput.dataType, totalSequenceLengthInput.dims)\n      : undefined;\n    if (totalSequenceLengthInputHelper) {\n      inputHelpers.push(totalSequenceLengthInputHelper);\n    }\n    const elemValueType = tensorTypeToWsglValueType(input.dataType);\n    const uniforms: UniformsArrayType = [\n      { name: 'batch_size', type: 'u32' },\n      { name: 'num_heads', type: 'u32' },\n      { name: 'past_sequence_length', type: 'u32' },\n      { name: 'sequence_length', type: 'u32' },\n      { name: 'total_sequence_length', type: 'u32' },\n      { name: 'elements_per_thread', type: 'u32' },\n    ];\n\n    return `\n  var<workgroup> thread_max: array<f32, ${WG}>;\n  var<workgroup> thread_sum: array<f32, ${WG}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputHelpers)}\n  ${shaderHelper.mainStart([WG, 1, 1])}\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\n    let headIdx = workgroup_id.z % uniforms.num_heads;\n    let sequence_length = uniforms.sequence_length;\n    var total_sequence_length = uniforms.total_sequence_length;\n    ${initVarStub(seqLensInputHelper, totalSequenceLengthInputHelper, false)}\n    let local_offset = local_idx * uniforms.elements_per_thread;\n    let offset = (global_idx / ${WG}) * uniforms.total_sequence_length + local_offset;\n    let seq_causal_length = ${seqLens ? 'u32(past_sequence_length + workgroup_id.y + 1)' : 'total_sequence_length'};\n    var thread_max_vector = ${f32Type}(-3.402823e+38f);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n      thread_max_vector = max(${f32Type}(x[offset + i]), thread_max_vector);\n    }\n    thread_max[local_idx] = ${(() => {\n      switch (components) {\n        case 1:\n          return 'thread_max_vector';\n        case 2:\n          return 'max(thread_max_vector.x, thread_max_vector.y)';\n        case 4:\n          return 'max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))';\n        default:\n          throw new Error(`Unsupported components: ${components}`);\n      }\n    })()};\n    workgroupBarrier();\n\n    var max_value =  f32(-3.402823e+38f);\n    for (var i = 0u; i < ${WG}; i++) {\n      max_value = max(thread_max[i], max_value);\n    }\n\n    var sum_vector = ${f32Type}(0);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n      sum_vector += exp(${f32Type}(x[offset + i]) - max_value);\n    }\n    thread_sum[local_idx] = ${(() => {\n      switch (components) {\n        case 1:\n          return 'sum_vector';\n        case 2:\n          return 'sum_vector.x + sum_vector.y';\n        case 4:\n          return 'sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w';\n        default:\n          throw new Error(`Unsupported components: ${components}`);\n      }\n    })()};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${WG}; i++) {\n      sum += thread_sum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n        x[offset + i] = ${inputHelper.type.value}(${elemValueType}(1.0) / ${elemValueType}(seq_causal_length));\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\n        var f32input = ${f32Type}(x[offset + i]);\n        x[offset + i] = ${inputHelper.type.value}(exp(f32input - max_value) / sum);\n      }\n    }\n      ${\n        seqLens\n          ? `\n        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {\n          x[offset + total_seq_id] = ${inputHelper.type.value}(${elemValueType}(0));\n        }`\n          : ''\n      };\n  }`;\n  };\n\n  return {\n    name: 'AttentionProbsSoftmax',\n    shaderCache: { hint: `${WG};${dataType};${components}`, inputDependencies },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [],\n      dispatchGroup: { x: Math.ceil(totalSequenceLength / WG), y: sequenceLength, z: batchSize * numHeads },\n      programUniforms,\n    }),\n  };\n};\n\nconst createAttentionProbsProgramInfo = (\n  outputCount: number,\n  q: TensorView,\n  key: TensorView,\n  pastKey: TensorView | undefined,\n  attentionBias: TensorView | undefined,\n  parameters: AttentionParameters,\n  pastSequenceLength: number,\n  seqLens: TensorView | undefined,\n  totalSequenceLengthInput: TensorView | undefined,\n) => {\n  const totalSequenceLength = pastSequenceLength + parameters.kvSequenceLength;\n  const probsShape = [parameters.batchSize, parameters.numHeads, parameters.sequenceLength, totalSequenceLength];\n  const presentKey = outputCount > 1 && pastKey;\n  const kvNumHeads = parameters.kvNumHeads ? parameters.kvNumHeads : parameters.numHeads;\n  const presentKeyShape = presentKey\n    ? [parameters.batchSize, kvNumHeads, totalSequenceLength, parameters.headSize]\n    : undefined;\n  const nReps = parameters.nReps ? parameters.nReps : 1;\n  // TODO: handle mask\n\n  const alpha = parameters.scale === 0 ? 1.0 / Math.sqrt(parameters.headSize) : parameters.scale;\n  const components = getMaxComponents(parameters.headSize);\n  const vectorizedHeadSize = parameters.headSize / components;\n  const TILE_SIZE = 12;\n  const dispatch = {\n    x: Math.ceil(totalSequenceLength / TILE_SIZE),\n    y: Math.ceil(parameters.sequenceLength / TILE_SIZE),\n    z: parameters.batchSize * parameters.numHeads,\n  };\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: parameters.sequenceLength },\n    { type: DataType.uint32, data: vectorizedHeadSize },\n    { type: DataType.uint32, data: totalSequenceLength },\n    { type: DataType.uint32, data: parameters.numHeads },\n    { type: DataType.uint32, data: parameters.headSize },\n    { type: DataType.float, data: alpha },\n    { type: DataType.uint32, data: pastSequenceLength },\n    { type: DataType.uint32, data: parameters.kvSequenceLength },\n    { type: DataType.uint32, data: nReps },\n  ];\n  // Feed pastKey to the shader-code only if it is non-zero and presentKey is being produced\n  const feedPastKey = presentKey && pastKey && ShapeUtil.size(pastKey.dims) > 0;\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  if (feedPastKey) {\n    inputDependencies.push('type');\n  }\n  if (attentionBias) {\n    inputDependencies.push('type');\n  }\n  if (seqLens) {\n    inputDependencies.push('type');\n  }\n  if (totalSequenceLengthInput) {\n    inputDependencies.push('type');\n  }\n  const outputs = [{ dims: probsShape, dataType: q.dataType, gpuDataType: GpuDataType.default }];\n  if (presentKey) {\n    outputs.push({ dims: presentKeyShape!, dataType: q.dataType, gpuDataType: GpuDataType.default });\n  }\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const qInput = inputVariable('q', q.dataType, q.dims, components);\n    const kInput = inputVariable('key', key.dataType, key.dims, components);\n    const inputVars = [qInput, kInput];\n    if (feedPastKey) {\n      const pastKeyInput = inputVariable('past_key', pastKey.dataType, pastKey.dims, components);\n      inputVars.push(pastKeyInput);\n    }\n    if (attentionBias) {\n      inputVars.push(inputVariable('attention_bias', attentionBias.dataType, attentionBias.dims));\n    }\n    const seqLensInputVariable = seqLens ? inputVariable('seq_lens', seqLens.dataType, seqLens.dims) : undefined;\n    if (seqLensInputVariable) {\n      inputVars.push(seqLensInputVariable);\n    }\n    const totalSequenceLengthInputVariable = totalSequenceLengthInput\n      ? inputVariable('total_sequence_length_input', totalSequenceLengthInput.dataType, totalSequenceLengthInput.dims)\n      : undefined;\n    if (totalSequenceLengthInputVariable) {\n      inputVars.push(totalSequenceLengthInputVariable);\n    }\n    const output = outputVariable('output', q.dataType, probsShape);\n    const outputVars = [output];\n    if (presentKey) {\n      outputVars.push(outputVariable('present_key', q.dataType, presentKeyShape!, components));\n    }\n    const f32Type = tensorTypeToWsglValueType(DataType.float, components);\n\n    const uniforms: UniformsArrayType = [\n      { name: 'M', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'num_heads', type: 'u32' },\n      { name: 'head_size', type: 'u32' },\n      { name: 'alpha', type: 'f32' as UniformDataElementType },\n      { name: 'past_sequence_length', type: 'u32' },\n      { name: 'kv_sequence_length', type: 'u32' },\n      { name: 'n_reps', type: 'u32' },\n    ];\n    return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n\n  var<workgroup> tileQ: array<${qInput.type.storage}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileK: array<${qInput.type.storage}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, ...outputVars)}\n  ${shaderHelper.mainStart([TILE_SIZE, TILE_SIZE, 1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z % uniforms.num_heads;\n    let kvHeadIdx = ${nReps === 1 ? 'headIdx' : 'headIdx / uniforms.n_reps'};\n    let kv_num_heads = ${nReps === 1 ? 'uniforms.num_heads' : 'uniforms.num_heads / uniforms.n_reps'};\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let sequence_length = uniforms.M;\n    var total_sequence_length = uniforms.N;\n    ${initVarStub(seqLensInputVariable, totalSequenceLengthInputVariable, true)}\n    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;\n    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\n    ${feedPastKey && presentKey ? 'let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;' : ''};\n    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;\n    ${presentKey ? 'let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;' : ''}\n    var value = ${f32Type}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n      ${(() => {\n        if (feedPastKey && presentKey) {\n          return `\n              if (n + local_id.y < past_sequence_length) {\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\n                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];\n              }`;\n        } else {\n          return `\n          if (n + local_id.y < uniforms.kv_sequence_length) {\n            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n          }`;\n        }\n      })()}\n      ${\n        presentKey\n          ? `if (n + local_id.y < present_sequence_length) {\n        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];\n      }`\n          : ''\n      }\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n          value += ${f32Type}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\n      }\n\n      workgroupBarrier();\n    }\n\n    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {\n      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      var sum: f32 = ${(() => {\n        switch (components) {\n          case 1:\n            return 'value';\n          case 2:\n            return 'value.x + value.y';\n          case 4:\n            return 'value.x + value.y + value.z + value.w';\n          default:\n            throw new Error(`Unsupported components: ${components}`);\n        }\n      })()};\n        output[outputIdx] = ${output.type.value} (sum * uniforms.alpha) + ${\n          attentionBias ? 'attention_bias[outputIdx]' : '0.0'\n        };\n    }\n  }`;\n  };\n  return {\n    name: 'AttentionProbs',\n    shaderCache: {\n      hint: `${components};${attentionBias !== undefined};${pastKey !== undefined};${outputCount}`,\n      inputDependencies,\n    },\n    getRunData: () => ({ outputs, dispatchGroup: dispatch, programUniforms }),\n    getShaderSource,\n  };\n};\n\nconst createVxAttentionScoreProgramInfo = (\n  outputCount: number,\n  probs: TensorView,\n  v: TensorView,\n  pastValue: TensorView | undefined,\n  params: AttentionParameters,\n  pastSequenceLength: number,\n  seqLens: TensorView | undefined = undefined,\n  totalSequenceLengthInput: TensorView | undefined = undefined,\n) => {\n  const totalSequenceLength = pastSequenceLength + params.kvSequenceLength;\n  const nReps = params.nReps ? params.nReps : 1;\n  const repeatedVHiddenSize = params.vHiddenSize * nReps;\n  const presentValue = outputCount > 1 && pastValue;\n  const kvNumHeads = params.kvNumHeads ? params.kvNumHeads : params.numHeads;\n  const presentValueShape = presentValue\n    ? [params.batchSize, kvNumHeads, totalSequenceLength, params.headSize]\n    : undefined;\n  const outputShape = [params.batchSize, params.sequenceLength, repeatedVHiddenSize];\n  const TILE_SIZE = 12;\n  const dispatch = {\n    x: Math.ceil(params.vHeadSize / TILE_SIZE),\n    y: Math.ceil(params.sequenceLength / TILE_SIZE),\n    z: params.batchSize * params.numHeads,\n  };\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: params.sequenceLength },\n    { type: DataType.uint32, data: totalSequenceLength },\n    { type: DataType.uint32, data: params.vHeadSize },\n    { type: DataType.uint32, data: params.numHeads },\n    { type: DataType.uint32, data: params.headSize },\n    { type: DataType.uint32, data: repeatedVHiddenSize },\n    { type: DataType.uint32, data: pastSequenceLength },\n    { type: DataType.uint32, data: params.kvSequenceLength },\n    { type: DataType.uint32, data: nReps },\n  ];\n  // Feed pastValue to the shader-code only if it is non-empty and presentValue is being produced\n  const feedPastValue = presentValue && pastValue && ShapeUtil.size(pastValue.dims) > 0;\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  if (feedPastValue) {\n    inputDependencies.push('type');\n  }\n  if (seqLens) {\n    inputDependencies.push('type');\n  }\n  if (totalSequenceLengthInput) {\n    inputDependencies.push('type');\n  }\n  const outputs = [{ dims: outputShape, dataType: probs.dataType, gpuDataType: GpuDataType.default }];\n  if (presentValue) {\n    outputs.push({ dims: presentValueShape!, dataType: probs.dataType, gpuDataType: GpuDataType.default });\n  }\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const probsHelper = inputVariable('probs', probs.dataType, probs.dims);\n    const vHelper = inputVariable('v', v.dataType, v.dims);\n    const inputVars = [probsHelper, vHelper];\n    if (feedPastValue) {\n      inputVars.push(inputVariable('past_value', pastValue.dataType, pastValue.dims));\n    }\n    const seqLensInputVariable = seqLens ? inputVariable('seq_lens', seqLens.dataType, seqLens.dims) : undefined;\n    if (seqLens) {\n      inputVars.push(seqLensInputVariable!);\n    }\n    const totalSequenceLengthInputVariable = totalSequenceLengthInput\n      ? inputVariable('total_sequence_length_input', totalSequenceLengthInput.dataType, totalSequenceLengthInput.dims)\n      : undefined;\n    if (totalSequenceLengthInput) {\n      inputVars.push(totalSequenceLengthInputVariable!);\n    }\n    const output = outputVariable('output', probs.dataType, outputShape);\n    const outputVars = [output];\n    if (presentValue) {\n      outputVars.push(outputVariable('present_value', probs.dataType, presentValueShape!));\n    }\n    const uniforms: UniformsArrayType = [\n      { name: 'M', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'num_heads', type: 'u32' },\n      { name: 'head_size', type: 'u32' },\n      { name: 'v_hidden_size', type: 'u32' },\n      { name: 'past_sequence_length', type: 'u32' },\n      { name: 'kv_sequence_length', type: 'u32' },\n      { name: 'n_reps', type: 'u32' },\n    ];\n    return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n  var<workgroup> tileQ: array<${probsHelper.type.value}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileV: array<${probsHelper.type.value}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, ...outputVars)}\n  ${shaderHelper.mainStart([TILE_SIZE, TILE_SIZE, 1])}\n   let headIdx = workgroup_id.z % uniforms.num_heads;\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let kvHeadIdx = ${nReps === 1 ? 'headIdx' : 'headIdx / uniforms.n_reps'};\n   let kv_num_heads = ${nReps === 1 ? 'uniforms.num_heads' : 'uniforms.num_heads / uniforms.n_reps'};\n   let m = global_id.y;\n   let n = global_id.x;\n   let sequence_length = uniforms.M;\n   var total_sequence_length = uniforms.K;\n   ${initVarStub(seqLensInputVariable, totalSequenceLengthInputVariable, true)}\n   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\n   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch\n   ${feedPastValue && presentValue ? 'let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;' : ''};\n   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;\n   ${presentValue ? 'let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;' : ''}\n   var value = ${probsHelper.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n        ${(() => {\n          if (feedPastValue && presentValue) {\n            return `\n        if (w + local_id.y < past_sequence_length) {\n          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\n        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\n          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];\n        }\n      `;\n          } else {\n            return `\n            if (w + local_id.y < uniforms.kv_sequence_length) {\n              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];\n            }`;\n          }\n        })()}\n        ${\n          presentValue\n            ? `\n            if (w + local_id.y < present_sequence_length) {\n          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];\n        }`\n            : ''\n        }\n      }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + headIdx * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`;\n  };\n\n  return {\n    name: 'AttentionScore',\n    shaderCache: { hint: `${pastValue !== undefined};${outputCount}`, inputDependencies },\n    getRunData: () => ({ outputs, dispatchGroup: dispatch, programUniforms }),\n    getShaderSource,\n  };\n};\n\nexport const applyAttention = (\n  context: ComputeContext,\n  q: TensorView,\n  k: TensorView,\n  v: TensorView,\n  _maskIndex: TensorView | undefined,\n  _past: TensorView | undefined,\n  pastKey: TensorView | undefined,\n  pastValue: TensorView | undefined,\n  attentionBiasInput: TensorView | undefined,\n  parameters: AttentionParameters,\n  seqLens: TensorView | undefined = undefined,\n  totalSequenceLengthInput: TensorView | undefined = undefined,\n) => {\n  // Assumption is that presentKey/presentValue exists only if pastKey/pastValue exists.\n  const outputCount = Math.min(context.outputCount, 1 + (pastKey ? 1 : 0) + (pastValue ? 1 : 0));\n  const pastSequenceLength = outputCount > 1 ? parameters.pastSequenceLength : 0;\n  const totalSequenceLength = pastSequenceLength + parameters.kvSequenceLength;\n  const attentionBias =\n    attentionBiasInput && ShapeUtil.size(attentionBiasInput.dims) > 0 ? attentionBiasInput : undefined;\n\n  const inputsK = [q, k];\n  if (outputCount > 1 && pastKey && ShapeUtil.size(pastKey.dims) > 0) {\n    inputsK.push(pastKey);\n  }\n  if (attentionBias) {\n    inputsK.push(attentionBias);\n  }\n  if (seqLens) {\n    inputsK.push(seqLens);\n  }\n  if (totalSequenceLengthInput) {\n    inputsK.push(totalSequenceLengthInput);\n  }\n  // Run AttentionProbs\n  const probs = context.compute(\n    createAttentionProbsProgramInfo(\n      outputCount,\n      q,\n      k,\n      pastKey,\n      attentionBias,\n      parameters,\n      pastSequenceLength,\n      seqLens,\n      totalSequenceLengthInput,\n    ),\n    { inputs: inputsK, outputs: outputCount > 1 ? [-1, 1] : [-1] },\n  )[0];\n\n  // Run Softmax\n  context.compute(\n    createInPlaceSoftmaxProgramInfo(\n      probs,\n      parameters.batchSize,\n      parameters.numHeads,\n      pastSequenceLength,\n      parameters.sequenceLength,\n      totalSequenceLength,\n      seqLens,\n      totalSequenceLengthInput,\n    ),\n    { inputs: seqLens && totalSequenceLengthInput ? [probs, seqLens, totalSequenceLengthInput] : [probs], outputs: [] },\n  );\n\n  // Run AttentionScore\n  const inputsV = [probs, v];\n  if (outputCount > 1 && pastValue && ShapeUtil.size(pastValue.dims) > 0) {\n    inputsV.push(pastValue);\n  }\n  if (seqLens) {\n    inputsV.push(seqLens);\n  }\n  if (totalSequenceLengthInput) {\n    inputsV.push(totalSequenceLengthInput);\n  }\n  context.compute(\n    createVxAttentionScoreProgramInfo(\n      outputCount,\n      probs,\n      v,\n      pastValue,\n      parameters,\n      pastSequenceLength,\n      seqLens,\n      totalSequenceLengthInput,\n    ),\n    {\n      inputs: inputsV,\n      outputs: outputCount > 1 ? [0, 2] : [0],\n    },\n  );\n};\n\nconst prepare = (context: ComputeContext, parameters: AttentionParameters) => {\n  const outputShape = [parameters.batchSize, parameters.numHeads, parameters.sequenceLength, parameters.headSize];\n  const M = parameters.sequenceLength;\n  const K = parameters.inputHiddenSize;\n  const N = parameters.headSize;\n  const TILE_SIZE = 12;\n  const dispatch = {\n    x: Math.ceil(parameters.headSize / TILE_SIZE),\n    y: Math.ceil(parameters.sequenceLength / TILE_SIZE),\n    z: parameters.batchSize * parameters.numHeads,\n  };\n  const inputs = [context.inputs[0], context.inputs[1], context.inputs[2]];\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: M },\n    { type: DataType.uint32, data: K },\n    { type: DataType.uint32, data: N },\n    { type: DataType.uint32, data: parameters.numHeads },\n    { type: DataType.uint32, data: parameters.headSize },\n    { type: DataType.uint32, data: parameters.hiddenSize },\n    { type: DataType.uint32, data: parameters.hiddenSize + parameters.hiddenSize + parameters.vHiddenSize },\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const outputQ = outputVariable('output_q', inputs[0].dataType, outputShape);\n    const outputK = outputVariable('output_k', inputs[0].dataType, outputShape);\n    const outputV = outputVariable('output_v', inputs[0].dataType, outputShape);\n    const input = inputVariable('input', inputs[0].dataType, inputs[0].dims);\n    const weight = inputVariable('weight', inputs[1].dataType, inputs[1].dims);\n    const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims);\n    const dataType = input.type.storage;\n\n    const uniforms: UniformsArrayType = [\n      { name: 'M', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'num_heads', type: 'u32' },\n      { name: 'head_size', type: 'u32' },\n      { name: 'hidden_size', type: 'u32' },\n      { name: 'ldb', type: 'u32' },\n    ];\n    return `\n  const TILE_SIZE = ${TILE_SIZE}u;\n  var<workgroup> tileInput: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightQ: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightK: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  var<workgroup> tileWeightV: array<${dataType}, ${TILE_SIZE * TILE_SIZE}>;\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(input, weight, bias, outputQ, outputK, outputV)}\n  ${shaderHelper.mainStart([TILE_SIZE, TILE_SIZE, 1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${dataType}(0);\n    var valueK = ${dataType}(0);\n    var valueV = ${dataType}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`;\n  };\n\n  return context.compute(\n    {\n      name: 'AttentionPrepare',\n      shaderCache: { inputDependencies: ['type', 'type', 'type'] },\n      getRunData: () => ({\n        outputs: [\n          { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: GpuDataType.default },\n          { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: GpuDataType.default },\n          { dims: outputShape, dataType: context.inputs[0].dataType, gpuDataType: GpuDataType.default },\n        ],\n        dispatchGroup: dispatch,\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs, outputs: [-1, -1, -1] },\n  );\n};\n\nexport const attention = (context: ComputeContext, attributes: AttentionAttrs): void => {\n  const params = validateAttentionInputs(context.inputs, attributes);\n\n  const [q, k, v] = prepare(context, params);\n\n  return applyAttention(\n    context,\n    q,\n    k,\n    v,\n    context.inputs[4],\n    undefined,\n    undefined,\n    undefined,\n    context.inputs[5],\n    params,\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, getMaxComponents, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface BatchNormAttributes extends AttributeWithCacheKey {\n  readonly epsilon: number;\n  readonly momentum: number;\n  readonly spatial: boolean;\n  readonly trainingMode: boolean;\n  readonly format: 'NHWC' | 'NCHW';\n  readonly outputCount: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: BatchNormAttributes): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs');\n  }\n\n  const checkShapeEqual = (actual: readonly number[], expected: readonly number[], message: string) => {\n    const r = expected.length;\n    if (r !== actual.length) {\n      throw new Error(`${message}: num dimensions != ${r}`);\n    }\n    expected.forEach((v, i) => {\n      if (v !== actual[i]) {\n        throw new Error(`${message}: dim[${i}] do not match`);\n      }\n    });\n  };\n\n  if (inputs[0].dims.length > 1) {\n    const shape =\n      attributes.format === 'NHWC'\n        ? attributes.spatial\n          ? inputs[0].dims.slice(-1)\n          : inputs[0].dims.slice(-1).concat(inputs[0].dims.slice(1, inputs[0].dims.length - 1))\n        : inputs[0].dims.slice(1, attributes.spatial ? 2 : undefined);\n    checkShapeEqual(inputs[1].dims, shape, 'Invalid input scale');\n    checkShapeEqual(inputs[2].dims, shape, 'Invalid input B');\n    checkShapeEqual(inputs[3].dims, shape, 'Invalid input mean');\n    checkShapeEqual(inputs[4].dims, shape, 'Invalid input var');\n  } else {\n    checkShapeEqual(inputs[1].dims, [1], 'Invalid input scale');\n    checkShapeEqual(inputs[2].dims, [1], 'Invalid input B');\n    checkShapeEqual(inputs[3].dims, [1], 'Invalid input mean');\n    checkShapeEqual(inputs[4].dims, [1], 'Invalid input var');\n  }\n};\n\nconst createBatchNormInferenceProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: BatchNormAttributes,\n): ProgramInfo => {\n  const { epsilon, spatial, format } = attributes;\n  const yShape = inputs[0].dims;\n  const components = spatial ? getMaxComponents(yShape[yShape.length - 1]) : 1;\n  const cComponents = format === 'NHWC' && yShape.length > 1 ? components : 1;\n  const outputSize = ShapeUtil.size(yShape) / components;\n  // Only support uniforms for opset version >= 9 (spatial = true).\n  const useShapesUniforms = spatial;\n  const shapeOrRank = useShapesUniforms ? yShape.length : yShape;\n  const x = inputVariable('x', inputs[0].dataType, inputs[0].dims, components);\n  const scale = inputVariable('scale', inputs[1].dataType, inputs[1].dims, cComponents);\n  const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims, cComponents);\n  const inputMean = inputVariable('inputMean', inputs[3].dataType, inputs[3].dims, cComponents);\n  const inputVar = inputVariable('inputVar', inputs[4].dataType, inputs[4].dims, cComponents);\n  const y = outputVariable('y', inputs[0].dataType, shapeOrRank, components);\n  // TODO: support inputs with different data type. Current we need to make sure all inputs have the same data type.\n  // Otherwise, the shader compilation will fail.\n  const calcCOffset = (): string => {\n    let cOffset = '';\n    if (spatial) {\n      cOffset = `let cOffset = ${\n        yShape.length === 1\n          ? '0u'\n          : format === 'NHWC'\n            ? `outputIndices[${yShape.length - 1}] / ${components}`\n            : 'outputIndices[1]'\n      };`;\n    } else {\n      if (format === 'NCHW') {\n        cOffset = `\n            ${y.indicesSet('outputIndices', '0', '0')}\n            let cOffset = ${y.indicesToOffset('outputIndices')};`;\n      } else {\n        // update C channel.\n        cOffset = `var cIndices = ${scale.type.indices}(0);\n                       cIndices[0] = outputIndices[${yShape.length - 1}];`;\n        // update D1 x ... x Dn channels.\n        for (let i = 1; i < scale.rank; i++) {\n          cOffset += `cIndices[${i}] = outputIndices[${i}];`;\n        }\n        cOffset += `let cOffset = ${scale.indicesToOffset('cIndices')};`;\n      }\n    }\n    return cOffset;\n  };\n  const getInferenceModeShaderSource = (helper: ShaderHelper) => `\n  const epsilon = ${epsilon};\n  ${helper.registerUniform('outputSize', 'u32').declareVariables(x, scale, bias, inputMean, inputVar, y)}\n  ${helper.mainStart()}\n  ${helper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n    var outputIndices = ${y.offsetToIndices(`global_idx * ${components}`)};\n    ${calcCOffset()}\n    let scale = ${scale.getByOffset('cOffset')};\n    let bias = ${bias.getByOffset('cOffset')};\n    let inputMean = ${inputMean.getByOffset('cOffset')};\n    let inputVar = ${inputVar.getByOffset('cOffset')};\n    let x = ${x.getByOffset('global_idx')};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${y.setByOffset('global_idx', 'value')}\n  }`;\n  return {\n    name: 'BatchNormalization',\n    shaderCache: {\n      hint: `${attributes.epsilon}_${attributes.format}_${spatial}_${components}`,\n      inputDependencies: useShapesUniforms ? ['rank', 'type', 'type', 'type', 'type'] : undefined,\n    },\n    getShaderSource: getInferenceModeShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: inputs[0].dims, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: useShapesUniforms\n        ? [{ type: DataType.uint32, data: outputSize }, ...createTensorShapeVariables(yShape)]\n        : [{ type: DataType.uint32, data: outputSize }],\n    }),\n  };\n};\n\nexport const parseBatchNormAttributes = (attributes: Record<string, unknown>): BatchNormAttributes =>\n  createAttributeWithCacheKey(attributes as Omit<BatchNormAttributes, keyof AttributeWithCacheKey>);\n\nexport const batchNorm = (context: ComputeContext, attributes: Record<string, unknown>): void => {\n  const { inputs, outputCount } = context;\n  const updatedAttributes = parseBatchNormAttributes({ ...attributes, outputCount });\n  if (env.webgpu.validateInputContent) {\n    validateInputs(inputs, updatedAttributes);\n  }\n  if (attributes.trainingMode) {\n    throw new Error('BatchNormalization trainingMode is not supported yet.');\n  } else {\n    context.compute(createBatchNormInferenceProgramInfo(inputs, updatedAttributes));\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (inputs[0].dims.length !== 3) {\n    throw new Error('input should have 3 dimensions');\n  }\n\n  if (![320, 640, 1280].includes(inputs[0].dims[2])) {\n    throw new Error('number of channels should be 320, 640 or 1280');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('bias is expected to have 1 dimensions');\n  }\n\n  if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n    throw new Error('last dimension of input and bias are not the same');\n  }\n};\n\nconst createBiasAddProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const outputShape = inputs[0].dims;\n\n  const channels = inputs[0].dims[2];\n  // since channel number can be only 320/640/1280, it's always divisable by 4\n  const outputSize = ShapeUtil.size(outputShape) / 4;\n\n  const dataType = inputs[0].dataType;\n  const input = inputVariable('input', dataType, outputShape, 4);\n  const bias = inputVariable('bias', dataType, [channels], 4);\n  const residual = inputVariable('residual', dataType, outputShape, 4);\n  const output = outputVariable('output', dataType, outputShape, 4);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const channels = ${channels}u / 4;\n  ${shaderHelper.declareVariables(input, bias, residual, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let value = ${input.getByOffset('global_idx')}\n      + ${bias.getByOffset('global_idx % channels')} + ${residual.getByOffset('global_idx')};\n    ${output.setByOffset('global_idx', 'value')}\n  }`;\n\n  return {\n    name: 'BiasAdd',\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n    }),\n    getShaderSource,\n  };\n};\n\nexport const biasAdd = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createBiasAddProgramInfo(context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglValueType,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName | ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader = (\n  shaderHelper: ShaderHelper,\n  datasize: number,\n  inputDataType: number,\n  outputDataType: number,\n  funcCall: ElementwiseFunctionCall,\n  additionalImplementation?: string,\n  additionalUniformsType?: UniformsArrayType,\n): string => {\n  const vecSize = Math.ceil(datasize / 4);\n\n  let expression = '';\n  if (typeof funcCall === 'string') {\n    expression = `${funcCall}(a)`;\n  } else {\n    expression = funcCall('a');\n  }\n\n  const input = inputVariable('inputData', inputDataType, [vecSize], 4);\n  const output = outputVariable('outputData', outputDataType, [vecSize], 4);\n  const uniforms: UniformsArrayType = [{ name: 'vec_size', type: 'u32' }];\n  if (additionalUniformsType) {\n    uniforms.push(...additionalUniformsType);\n  }\n\n  return `\n      ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n\n    let a = ${input.getByOffset('global_idx')};\n    ${output.setByOffset('global_idx', expression)}\n  }`;\n};\n\nconst createElementwiseProgramInfo = (\n  input: TensorView,\n  name: string,\n  funcCall: ElementwiseFunctionCall,\n  additionalImplementation?: string,\n  cacheKey?: string,\n  outputDataType: number = input.dataType,\n  additionalUniforms?: ProgramUniform[],\n  additionalUniformsType?: UniformsArrayType,\n): ProgramInfo => {\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: Math.ceil(ShapeUtil.size(input.dims) / 4) },\n  ];\n  if (additionalUniforms) {\n    programUniforms.push(...additionalUniforms);\n  }\n\n  return {\n    name,\n    shaderCache: { hint: cacheKey, inputDependencies: ['type'] },\n    getShaderSource: (shaderHelper) =>\n      createElementwiseProgramShader(\n        shaderHelper,\n        ShapeUtil.size(input.dims),\n        input.dataType,\n        outputDataType,\n        funcCall,\n        additionalImplementation,\n        additionalUniformsType,\n      ),\n    getRunData: (inputTensors) => ({\n      outputs: [{ dims: input.dims, dataType: outputDataType }],\n      dispatchGroup: {\n        x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */),\n      },\n      programUniforms,\n    }),\n  };\n};\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface CastAttributes extends AttributeWithCacheKey {\n  readonly to: number;\n  readonly saturate?: boolean;\n}\n\nexport const parseCastAttributes = (attributes: Record<string, unknown>): CastAttributes =>\n  createAttributeWithCacheKey(attributes as { to: number });\n\nexport const cast = (context: ComputeContext, attributes: CastAttributes): void => {\n  let func: ElementwiseFunctionCall;\n  switch (attributes.to) {\n    case DataType.float16:\n      func = 'vec4<f16>';\n      break;\n    case DataType.float:\n      func = 'vec4<f32>';\n      break;\n    case DataType.uint32:\n      func = 'vec4<u32>';\n      break;\n    case DataType.int32:\n      func = 'vec4<i32>';\n      break;\n    case DataType.bool:\n      func = 'vec4<bool>';\n      break;\n    default:\n      throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${attributes.to}`);\n  }\n  context.compute(\n    createElementwiseProgramInfo(context.inputs[0], 'Cast', func, undefined, attributes.cacheKey, attributes.to),\n  );\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  let min: number;\n  let max: number;\n  const hasMin = inputs.length >= 2 && inputs[1].data !== 0;\n  const hasMax = inputs.length >= 3 && inputs[2].data !== 0;\n\n  switch (inputs[0].dataType) {\n    case DataType.float:\n      min = hasMin ? inputs[1].getFloat32Array()[0] : -3.4028234663852886e38;\n      max = hasMax ? inputs[2].getFloat32Array()[0] : 3.4028234663852886e38;\n      break;\n    case DataType.float16:\n      min = hasMin ? inputs[1].getUint16Array()[0] : 64511; // uint16(64511) <-> float16(-65504.0)\n      max = hasMax ? inputs[2].getUint16Array()[0] : 31743; // uint16(31743) <-> float16(65504.0)\n      break;\n    default:\n      throw new Error('Unsupport data type');\n  }\n\n  return createAttributeWithCacheKey({ min, max });\n};\n\nexport const clip = (context: ComputeContext, clipAttributes: ClipAttributes): void => {\n  const attributes = clipAttributes ? clipAttributes : generateClipAttributesFromInputs(context.inputs);\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Clip',\n      (a) => `clamp(${a}, vec4<${dataType}>(uniforms.min), vec4<${dataType}>(uniforms.max))`,\n      undefined,\n      attributes.cacheKey,\n      undefined,\n      [\n        { type: context.inputs[0].dataType, data: attributes.min },\n        { type: context.inputs[0].dataType, data: attributes.max },\n      ],\n      [\n        { name: 'min', type: dataType as UniformDataElementType },\n        { name: 'max', type: dataType as UniformDataElementType },\n      ],\n    ),\n    { inputs: [0] },\n  );\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n  createAttributeWithCacheKey(attributes as { alpha: number });\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Elu',\n      (a) => `elu_vf32(${a})`,\n      `\n  const elu_alpha_ = ${dataType}(${attributes.alpha});\n\n  fn elu_f32(a: ${dataType}) -> ${dataType} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${dataType}>) -> vec4<${dataType}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey,\n    ),\n  );\n};\n\nexport const erfImpl = (varType = 'f32') => `\nconst r0: ${varType} = 0.3275911;\nconst r1: ${varType} = 0.254829592;\nconst r2: ${varType} = -0.284496736;\nconst r3: ${varType} = 1.421413741;\nconst r4: ${varType} = -1.453152027;\nconst r5: ${varType} = 1.061405429;\n\nfn erf_vf32(v: vec4<${varType}>) -> vec4<${varType}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`;\n\nexport const erf = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Erf', (a) => `erf_vf32(${a})`, erfImpl(dataType)));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const gelu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Gelu',\n      (a) => `0.5 * ${a} * (1.0 + erf_vf32(${a} * 0.7071067811865475))`,\n      erfImpl(dataType),\n    ),\n  );\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'LeakyRelu',\n      (a) => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<${dataType}>(0.0))`,\n      `const leaky_relu_alpha_ = ${dataType}(${attributes.alpha});`,\n      attributes.cacheKey,\n    ),\n  );\n};\n\nexport const not = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Not', (a) => `!${a}`));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Neg', (a) => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Reciprocal', (a) => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'Relu',\n      (a) => `select(vec4<${dataType}>(0.0), ${a}, ${a} > vec4<${dataType}>(0.0))`,\n    ),\n  );\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sigmoid', (a) => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport interface HardSigmoidAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n  readonly beta: number;\n}\n\nexport const parseHardSigmoidAttributes = (attributes: Record<string, unknown>): HardSigmoidAttributes =>\n  createAttributeWithCacheKey(\n    attributes as {\n      alpha: number;\n      beta: number;\n    },\n  );\n\nexport const hardSigmoid = (context: ComputeContext, attributes: HardSigmoidAttributes): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'HardSigmoid',\n      (a) =>\n        `max(vec4<${dataType}>(0.0), min(vec4<${dataType}>(1.0), ${attributes.alpha} * ${a} + vec4<${dataType}>(${attributes.beta})))`,\n      undefined,\n      attributes.cacheKey,\n    ),\n  );\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanhExpression = (a: string) => `sign(${a}) * (1 - exp(-2 * abs(${a}))) / (1 + exp(-2 * abs(${a})))`;\n\nexport const tanh = (context: ComputeContext): void => {\n  // TODO: revisit after https://github.com/gpuweb/gpuweb/issues/4458 is resolved\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Tanh', tanhExpression));\n};\n\nexport const fastGeluImpl = (varType = 'f32') => `\nconst fast_gelu_a: ${varType} = 0.5;\nconst fast_gelu_b: ${varType} = 0.7978845608028654;\nconst fast_gelu_c: ${varType} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${varType}>) -> vec4<${varType}> {\n  return ${tanhExpression('v')};\n}\n`;\n\nexport const fastGeluExpression = (x: string) =>\n  `(fast_gelu_a + fast_gelu_a * tanh_v(${x} * (fast_gelu_c * ${x} * ${x} + fast_gelu_b))) * ${x}`;\n\nexport const fastGelu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'FastGelu',\n      fastGeluExpression,\n      fastGeluImpl(dataType),\n      undefined,\n      context.inputs[0].dataType,\n    ),\n  );\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  const dataType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'ThresholdedRelu',\n      (a) => `select(vec4<${dataType}>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_ = vec4<${dataType}>(${attributes.alpha});`,\n      attributes.cacheKey,\n    ),\n  );\n  return 0;\n};\n\nexport const log = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfo(context.inputs[0], 'Log', 'log'));\n};\n\nexport const quickGeluImpl = (varType: string, alpha: number) => `\nconst alpha = vec4<${varType}>(${alpha});\nconst one = ${varType}(1.0);\nconst zero = ${varType}(0.0);\n\nfn quick_gelu_impl(x: vec4<${varType}>) -> vec4<${varType}> {\n  let v = x *alpha;\n  var x1 : vec4<${varType}>;\n  for (var i = 0; i < 4; i = i + 1) {\n    if (v[i] >= zero) {\n      x1[i] = one / (one + exp(-v[i]));\n    } else {\n      x1[i] = one - one / (one + exp(v[i]));\n    }\n  }\n  return x * x1;\n}\n`;\n\nexport const quickGeluExpression = (x: string) => `quick_gelu_impl(${x})`;\n\nexport const quickgelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  const dType = tensorTypeToWsglValueType(context.inputs[0].dataType);\n  context.compute(\n    createElementwiseProgramInfo(\n      context.inputs[0],\n      'QuickGelu',\n      quickGeluExpression,\n      quickGeluImpl(dType, attributes.alpha),\n      attributes.cacheKey,\n      context.inputs[0].dataType,\n    ),\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType } from './common';\nimport { erfImpl } from './unary-op';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (inputs[0].dims.length !== 3) {\n    throw new Error('input should have 3 dimensions');\n  }\n\n  if (![2560, 5120, 10240].includes(inputs[0].dims[2])) {\n    throw new Error('hidden state should be 2560, 5120 or 10240');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('bias is expected to have 1 dimensions');\n  }\n\n  if (inputs[0].dims[2] !== inputs[1].dims[0]) {\n    throw new Error('last dimension of input and bias are not the same');\n  }\n};\n\nconst createBiasSplitGeluProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const outputShape = inputs[0].dims.slice();\n  outputShape[2] = outputShape[2] / 2;\n\n  const input = inputVariable('input', inputs[0].dataType, inputs[0].dims, 4);\n  const bias = inputVariable('bias', inputs[0].dataType, [inputs[0].dims[2]], 4);\n  const output = outputVariable('output', inputs[0].dataType, outputShape, 4);\n\n  const outputSize = ShapeUtil.size(outputShape) / 4;\n  const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${inputs[0].dims[2] / 4 / 2}u;\n\n  ${shaderHelper.declareVariables(input, bias, output)}\n\n  ${erfImpl(dataType)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${output.setByOffset('global_idx', 'valueLeft * geluRight')}\n  }`;\n\n  return {\n    name: 'BiasSplitGelu',\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n    }),\n    getShaderSource,\n  };\n};\n\nexport const biasSplitGelu = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createBiasSplitGeluProgramInfo(context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { BroadcastUtil, ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall =\n  | BuiltinFunctionName\n  | BinaryCustomExpression\n  | {\n      scalar: BinaryCustomExpression;\n      vector: BinaryCustomExpression;\n    };\n\nconst createBinaryOpProgramShader = (\n  shaderHelper: ShaderHelper,\n  dimsA: readonly number[],\n  dimsB: readonly number[],\n  dimsOutput: readonly number[],\n  vectorize: boolean,\n  doBroadcast: boolean,\n  sharedDimensionDivisibleBy4: boolean,\n  funcCall: BinaryFunctionCall,\n  typeA: number,\n  typeB: number,\n  typeOutput: number,\n  additionalImplementation?: string,\n) => {\n  let expressionScalar: BinaryCustomExpression;\n  let expressionVector: BinaryCustomExpression;\n  if (typeof funcCall === 'string') {\n    expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n  } else if (typeof funcCall === 'function') {\n    expressionScalar = expressionVector = funcCall;\n  } else {\n    expressionScalar = funcCall.scalar;\n    expressionVector = funcCall.vector;\n  }\n\n  const output = outputVariable('outputData', typeOutput, dimsOutput.length, 4);\n  const a = inputVariable('aData', typeA, dimsA.length, 4);\n  const b = inputVariable('bData', typeB, dimsB.length, 4);\n\n  let assignment: string;\n  if (vectorize) {\n    if (doBroadcast) {\n      const isAOneElement = ShapeUtil.size(dimsA) === 1;\n      const isBOneElement = ShapeUtil.size(dimsB) === 1;\n      const aLastDimDivisibleBy4 = dimsA.length > 0 && dimsA[dimsA.length - 1] % 4 === 0;\n      const bLastDimDivisibleBy4 = dimsB.length > 0 && dimsB[dimsB.length - 1] % 4 === 0;\n      if (isAOneElement || isBOneElement) {\n        assignment = output.setByOffset(\n          'global_idx',\n          expressionVector(\n            isAOneElement ? `${a.type.value}(${a.getByOffset('0')}.x)` : a.getByOffset('global_idx'),\n            isBOneElement ? `${b.type.value}(${b.getByOffset('0')}.x)` : b.getByOffset('global_idx'),\n          ),\n        );\n      } else {\n        assignment = `\n            let outputIndices = ${output.offsetToIndices('global_idx * 4u')};\n            let offsetA = ${a.broadcastedIndicesToOffset('outputIndices', output)};\n            let offsetB = ${b.broadcastedIndicesToOffset('outputIndices', output)};\n            ${output.setByOffset(\n              'global_idx',\n              expressionVector(\n                sharedDimensionDivisibleBy4 || aLastDimDivisibleBy4\n                  ? a.getByOffset('offsetA / 4u')\n                  : `${a.type.value}(${a.getByOffset('offsetA / 4u')}[offsetA % 4u])`,\n                sharedDimensionDivisibleBy4 || bLastDimDivisibleBy4\n                  ? b.getByOffset('offsetB / 4u')\n                  : `${b.type.value}(${b.getByOffset('offsetB / 4u')}[offsetB % 4u])`,\n              ),\n            )}\n          `;\n      }\n    } else {\n      assignment = output.setByOffset(\n        'global_idx',\n        expressionVector(a.getByOffset('global_idx'), b.getByOffset('global_idx')),\n      );\n    }\n  } else {\n    if (!doBroadcast) {\n      throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n    }\n\n    const singleAssignment = (resStr: string, x: number, typeCast = '') => {\n      const expressionA = `aData[indexA${x}][componentA${x}]`;\n      const expressionB = `bData[indexB${x}][componentB${x}]`;\n      return `\n            let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offsetA${x} = ${a.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let offsetB${x} = ${b.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n            let indexA${x} = offsetA${x} / 4u;\n            let indexB${x} = offsetB${x} / 4u;\n            let componentA${x} = offsetA${x} % 4u;\n            let componentB${x} = offsetB${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expressionScalar(expressionA, expressionB)});\n          `;\n    };\n    if (typeOutput === DataType.bool) {\n      assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment('data', 0, 'u32')}\n            ${singleAssignment('data', 1, 'u32')}\n            ${singleAssignment('data', 2, 'u32')}\n            ${singleAssignment('data', 3, 'u32')}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n    } else {\n      assignment = `\n            ${singleAssignment('outputData[global_idx]', 0)}\n            ${singleAssignment('outputData[global_idx]', 1)}\n            ${singleAssignment('outputData[global_idx]', 2)}\n            ${singleAssignment('outputData[global_idx]', 3)}\n          `;\n    }\n  }\n\n  return `\n        ${shaderHelper.registerUniform('vec_size', 'u32').declareVariables(a, b, output)}\n\n        ${additionalImplementation ?? ''}\n\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n        ${assignment}\n      }`;\n};\n\nconst createBinaryOpProgramInfo = (\n  name: string,\n  cacheKey: string,\n  a: TensorView,\n  b: TensorView,\n  funcCall: BinaryFunctionCall,\n  additionalImplementation?: string,\n  outputDataType: number = a.dataType,\n): ProgramInfo => {\n  const aDims = a.dims.map((x) => Number(x) ?? 1);\n  const bDims = b.dims.map((x) => Number(x) ?? 1);\n  const isBroadcast = !ShapeUtil.areEqual(aDims, bDims);\n  let outputShape = aDims;\n  let outputSize = ShapeUtil.size(aDims);\n\n  let vectorize = false;\n  let sharedDimensionDivisibleBy4 = false;\n\n  // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n  const cacheKeyAux = [isBroadcast];\n  if (isBroadcast) {\n    const calculatedShape = BroadcastUtil.calcShape(aDims, bDims, false);\n    if (!calculatedShape) {\n      throw new Error(\"Can't perform binary op on the given tensors\");\n    }\n    outputShape = calculatedShape.slice();\n    outputSize = ShapeUtil.size(outputShape);\n    const isAOneElement = ShapeUtil.size(aDims) === 1;\n    const isBOneElement = ShapeUtil.size(bDims) === 1;\n    const aLastDimDivisibleBy4 = aDims.length > 0 && aDims[aDims.length - 1] % 4 === 0;\n    const bLastDimDivisibleBy4 = bDims.length > 0 && bDims[bDims.length - 1] % 4 === 0;\n    cacheKeyAux.push(isAOneElement);\n    cacheKeyAux.push(isBOneElement);\n    cacheKeyAux.push(aLastDimDivisibleBy4);\n    cacheKeyAux.push(bLastDimDivisibleBy4);\n    // check whether vectorize can be enabled\n    let sharedDimension = 1;\n    for (let i = 1; i < outputShape.length; i++) {\n      const dimA = aDims[aDims.length - i];\n      const dimB = bDims[bDims.length - i];\n      if (dimA === dimB) {\n        sharedDimension *= dimA;\n      } else {\n        break;\n      }\n    }\n    if (sharedDimension % 4 === 0) {\n      sharedDimensionDivisibleBy4 = true;\n      vectorize = true;\n    } else if (isAOneElement || isBOneElement || aLastDimDivisibleBy4 || bLastDimDivisibleBy4) {\n      vectorize = true;\n    }\n  } else {\n    // element-wise\n    vectorize = true;\n  }\n  cacheKeyAux.push(vectorize);\n\n  return {\n    name,\n    shaderCache: {\n      hint: cacheKey + cacheKeyAux.map((x) => x.toString()).join('_'),\n      inputDependencies: ['rank', 'rank'],\n    },\n    getShaderSource: (shaderHelper) =>\n      createBinaryOpProgramShader(\n        shaderHelper,\n        aDims,\n        bDims,\n        outputShape,\n        vectorize,\n        isBroadcast,\n        sharedDimensionDivisibleBy4,\n        funcCall,\n        a.dataType,\n        b.dataType,\n        outputDataType,\n        additionalImplementation,\n      ),\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* component size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: Math.ceil(ShapeUtil.size(outputShape) / 4) },\n        ...createTensorShapeVariables(aDims, bDims, outputShape),\n      ],\n    }),\n  };\n};\n\nconst runBinaryOp = (\n  context: ComputeContext,\n  name: string,\n  funcCall: BinaryFunctionCall,\n  additionalImplementation?: string,\n  cacheKey?: string,\n  outputDataType?: number,\n): void => {\n  context.compute(\n    createBinaryOpProgramInfo(\n      name,\n      cacheKey ?? '',\n      context.inputs[0],\n      context.inputs[1],\n      funcCall,\n      additionalImplementation,\n      outputDataType,\n    ),\n  );\n};\n\nexport const add = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Add', (a, b) => `${a}+${b}`);\n};\n\nexport const div = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Div', (a, b) => `${a}/${b}`);\n};\n\nexport const equal = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'Equal',\n    { scalar: (a, b) => `u32(${a}==${b})`, vector: (a, b) => `vec4<u32>(${a}==${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const mul = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Mul', (a, b) => `${a}*${b}`);\n};\n\nexport const pow = (context: ComputeContext): void => {\n  const type = inputVariable('input', context.inputs[0].dataType, context.inputs[0].dims).type.value;\n  const roundStr = type === 'i32' ? 'round' : '';\n  runBinaryOp(\n    context,\n    'Pow',\n    { scalar: (a, b) => `pow_custom(${a},${b})`, vector: (a, b) => `pow_vector_custom(${a},${b})` },\n    `\n    fn pow_custom(a : ${type}, b : ${type}) -> ${type} {\n      if (b == ${type}(0.0)) {\n        return ${type}(1.0);\n      } else if (a < ${type}(0.0) && f32(b) != floor(f32(b))) {\n        return ${type}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${type}(1.0), round(f32(abs(b) % ${type}(2.0))) != 1.0) * ${type}(${roundStr}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${type}>, b : vec4<${type}>) -> vec4<${type}> {\n      // TODO: implement vectorized pow\n      return vec4<${type}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `,\n  );\n};\n\nexport const sub = (context: ComputeContext): void => {\n  runBinaryOp(context, 'Sub', (a, b) => `${a}-${b}`);\n};\n\nexport const greater = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'Greater',\n    { scalar: (a, b) => `u32(${a}>${b})`, vector: (a, b) => `vec4<u32>(${a}>${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const less = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'Less',\n    { scalar: (a, b) => `u32(${a}<${b})`, vector: (a, b) => `vec4<u32>(${a}<${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const greaterOrEqual = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'GreaterOrEqual',\n    { scalar: (a, b) => `u32(${a}>=${b})`, vector: (a, b) => `vec4<u32>(${a}>=${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n\nexport const lessOrEqual = (context: ComputeContext): void => {\n  runBinaryOp(\n    context,\n    'LessOrEqual',\n    { scalar: (a, b) => `u32(${a}<=${b})`, vector: (a, b) => `vec4<u32>(${a}<=${b})` },\n    undefined,\n    undefined,\n    DataType.bool,\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], axis: number): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  const referenceIndex = 0;\n  const referenceInput = inputs[referenceIndex];\n  const inputType = referenceInput.dataType;\n  const inputRank = referenceInput.dims.length;\n  inputs.forEach((input, i) => {\n    if (i === referenceIndex) {\n      return;\n    }\n    // make sure types of all inputs match\n    if (input.dataType !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputRank) {\n      throw new Error('input tensors should have the same shape');\n    }\n    input.dims.forEach((dim, i) => {\n      if (i !== axis && dim !== referenceInput.dims[i]) {\n        throw new Error('non concat dimensions must match');\n      }\n    });\n  });\n};\n\nconst calculateInputIndexImpl = (numberOfTensors: number, sizeInConcatAxisStr: string): string => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${numberOfTensors}u>(${sizeInConcatAxisStr});\n    for (var i: u32 = 0u; i < ${numberOfTensors}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${numberOfTensors}u;\n  }`;\n\nconst assignOutputData = (inputs: readonly IndicesHelper[], output: IndicesHelper) => {\n  const numberOfTensors = inputs.length;\n\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = output.setByOffset('global_idx', inputs[i].getByIndices('indices'));\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (inputIndex == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (inputIndex == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return codeLines.join('\\n');\n};\n\nconst createConcatProgramInfo = (\n  inputs: readonly TensorView[],\n  adjustedAxis: number,\n  outputShape: number[],\n  dataType: DataType,\n): ProgramInfo => {\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const sizeInConcatAxis = new Array<number>(inputs.length);\n  const inputVars = new Array<IndicesHelper>(inputs.length);\n\n  let previousSum = 0;\n  const inputDependencies: ProgramInputTensorInfoDependency[] = [];\n  const inputRanks = [];\n  const programUniforms: ProgramUniform[] = [{ type: DataType.uint32, data: outputSize }];\n  for (let i = 0; i < inputs.length; ++i) {\n    previousSum += inputs[i].dims[adjustedAxis];\n    sizeInConcatAxis[i] = previousSum;\n    inputRanks.push(inputs[i].dims.length);\n    inputVars[i] = inputVariable(`input${i}`, dataType, inputRanks[i]);\n    inputDependencies.push('rank');\n    programUniforms.push({ type: DataType.uint32, data: sizeInConcatAxis[i] });\n  }\n  for (let i = 0; i < inputs.length; ++i) {\n    programUniforms.push(...createTensorShapeVariables(inputs[i].dims));\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const output = outputVariable('output', dataType, outputShape.length);\n  const indicesAxis = output.indicesGet('indices', adjustedAxis);\n  const sizeInConcatAxisStr = Array.from(Array(sizeInConcatAxis.length).keys())\n    .map((i) => `uniforms.sizeInConcatAxis${i}`)\n    .join(',');\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n\n  ${(() => {\n    shaderHelper.registerUniform('outputSize', 'u32');\n    for (let i = 0; i < inputs.length; i++) {\n      shaderHelper.registerUniform(`sizeInConcatAxis${i}`, 'u32');\n    }\n    return shaderHelper.declareVariables(...inputVars, output);\n  })()}\n\n  ${calculateInputIndexImpl(sizeInConcatAxis.length, sizeInConcatAxisStr)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n\n    var indices = ${output.offsetToIndices('global_idx')};\n\n    let inputIndex = calculateInputIndex(${indicesAxis});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}u>(${sizeInConcatAxisStr});\n      ${indicesAxis} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${assignOutputData(inputVars, output)}\n  }`;\n\n  return {\n    name: 'Concat',\n    shaderCache: { hint: `${adjustedAxis}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\n  const inputs = context.inputs;\n  const inputShape = inputs[0].dims;\n  const adjustedAxis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  validateInputs(inputs, adjustedAxis);\n  const outputShape = inputShape.slice();\n  outputShape[adjustedAxis] = inputs.reduce(\n    (sum, input) => sum + (input.dims.length > adjustedAxis ? input.dims[adjustedAxis] : 0),\n    0,\n  );\n  // 0 length tensors are valid for concat, remove them\n  const nonEmptyInputs = inputs.filter((input) => ShapeUtil.size(input.dims) > 0);\n  context.compute(createConcatProgramInfo(nonEmptyInputs, adjustedAxis, outputShape, inputs[0].dataType), {\n    inputs: nonEmptyInputs,\n  });\n};\n\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { MAX_CLIP, MIN_CLIP } from '../../util';\nimport { ProgramUniform } from '../types';\n\nimport { UniformsArrayType } from './common';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly alpha?: number;\n  readonly beta?: number;\n}\n\nexport const getActivationSnippet = (\n  attributes: InternalActivationAttributes,\n  valueType: string,\n  baseType = 'f32',\n): string => {\n  switch (attributes.activation) {\n    case 'Relu':\n      return `value = max(value, ${valueType}(0.0));`;\n    case 'Sigmoid':\n      return `value = (${valueType}(1.0) / (${valueType}(1.0) + exp(-value)));`;\n    case 'Clip':\n      return `value = clamp(value, ${valueType}(${baseType}(uniforms.clip_min)), ${valueType}(${\n        baseType\n      }(uniforms.clip_max)));`;\n    case 'HardSigmoid':\n      return `value = max(${valueType}(0.0), min(${valueType}(1.0), ${baseType}(uniforms.alpha) * value + ${\n        baseType\n      }(uniforms.beta)));`;\n    case 'LeakyRelu':\n      return `value = select(${baseType}(uniforms.alpha) * value, value, value >= ${valueType}(0.0));`;\n    case 'Tanh':\n      return `let e2x = exp(-2.0 * abs(value));\n              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);\n        `;\n    case '':\n      return '';\n    // TODO: adding other activations that can be fused.\n    default:\n      throw new Error(`Unsupported activation ${attributes.activation}`);\n  }\n};\n\nexport const appendActivationUniformsData = (\n  attributes: InternalActivationAttributes,\n  programUniform: ProgramUniform[],\n) => {\n  if (attributes.activation === 'Clip') {\n    programUniform.push(\n      { type: DataType.float, data: attributes.clipMax! },\n      { type: DataType.float, data: attributes.clipMin! },\n    );\n  } else if (attributes.activation === 'HardSigmoid') {\n    programUniform.push(\n      { type: DataType.float, data: attributes.alpha! },\n      { type: DataType.float, data: attributes.beta! },\n    );\n  } else if (attributes.activation === 'LeakyRelu') {\n    programUniform.push({ type: DataType.float, data: attributes.alpha! });\n  }\n};\n\nexport const appendActivationUniforms = (attributes: InternalActivationAttributes, uniforms: UniformsArrayType) => {\n  if (attributes.activation === 'Clip') {\n    uniforms.push({ name: 'clip_max', type: 'f32' }, { name: 'clip_min', type: 'f32' });\n  } else if (attributes.activation === 'HardSigmoid') {\n    uniforms.push({ name: 'alpha', type: 'f32' }, { name: 'beta', type: 'f32' });\n  } else if (attributes.activation === 'LeakyRelu') {\n    uniforms.push({ name: 'alpha', type: 'f32' });\n  }\n};\n\nexport const parseInternalActivationAttributes = (\n  attributes: Record<string, unknown> | undefined,\n): InternalActivationAttributes => {\n  const activation = (attributes?.activation as string) || '';\n  if (activation === 'HardSigmoid') {\n    const [alpha, beta] = (attributes?.activation_params as [number, number]) || [0.2, 0.5];\n    return { activation, alpha, beta };\n  } else if (activation === 'Clip') {\n    const [clipMin, clipMax] = (attributes?.activation_params as [number, number]) || [MIN_CLIP, MAX_CLIP];\n    return { activation, clipMax, clipMin };\n  } else if (activation === 'LeakyRelu') {\n    const [alpha] = (attributes?.activation_params as [number]) || [0.01];\n    return { activation, alpha };\n  }\n  return { activation };\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport const typeSnippet = (component: number, dataType: string) => {\n  switch (component) {\n    case 1:\n      return dataType;\n    case 2:\n      return `vec2<${dataType}>`;\n    case 3:\n      return `vec3<${dataType}>`;\n    case 4:\n      return `vec4<${dataType}>`;\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const biasSnippet = (hasBias: boolean): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = (strideStr: string) => `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${strideStr}.x), i32(${strideStr}.y), i32(${strideStr}.z), 1));\n}\n`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  getMaxComponents,\n  IndicesHelper,\n  inputVariable,\n  internalVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\nimport {\n  appendActivationUniforms,\n  appendActivationUniformsData,\n  getActivationSnippet,\n  InternalActivationAttributes,\n} from './fuse-utils';\n\n// Helper that convert output batch indices to input batch indices using only the rank and\n// the shape information in uniform\nexport const convertOutputBatchIndicesToInputBatchIndices = (\n  targetIndicesName: string,\n  inputVariable: IndicesHelper,\n  inputBatchRank: number,\n  outputBatchRank: number,\n  batchIndicesName: string,\n) => {\n  // Assume outputBatchRank >= inputBatchRank, the first outputBatchRank - inputBatchRank of\n  // outputBatchRank should be ignored.\n  const extendingInputRank = outputBatchRank - inputBatchRank;\n  return `\n      ${Array.from({ length: inputBatchRank })\n        .map(\n          (_, i) => `\n      if (${getElementAt(inputVariable.shape, i, inputVariable.rank)} != 1) {\n        ${inputVariable.indicesSet(targetIndicesName, i, getElementAt(batchIndicesName, i + extendingInputRank, outputBatchRank))}\n      } else {\n        ${inputVariable.indicesSet(targetIndicesName, i, 0)}\n      }`,\n        )\n        .join('')}\n`;\n};\n\nexport const createNaiveMatmulProgramInfo = (\n  inputs: readonly TensorView[],\n  activationAttributes: InternalActivationAttributes,\n  outputShape: readonly number[],\n  reshapedOutputShape?: readonly number[],\n  isChannelsLast = false /* only used for conv2dByMatMul*/,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n\n  const M = aShape[aShape.length - 2];\n  const N = bShape[bShape.length - 1];\n  const K = aShape[aShape.length - 1];\n  const components = getMaxComponents(N);\n  const aComponents = getMaxComponents(K);\n  const outputNumber = getMaxComponents(M);\n  const outputSize = ShapeUtil.size(outputShape) / components / outputNumber;\n  const hasBias = inputs.length > 2;\n  const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n  const batchSize = ShapeUtil.size(outerDims);\n  const outputShapeInShader = [batchSize, M, N];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: M },\n    { type: DataType.uint32, data: N },\n    { type: DataType.uint32, data: K },\n  ];\n  appendActivationUniformsData(activationAttributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(outerDims, aShape, bShape));\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShapeInShader));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const batchDims = internalVariable('batch_dims', inputs[0].dataType, outerDims.length);\n    const a = inputVariable('a', inputs[0].dataType, aShape.length, aComponents);\n    const b = inputVariable('b', inputs[1].dataType, bShape.length, components);\n    const output = outputVariable('output', inputs[0].dataType, outputShapeInShader.length, components);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(activationAttributes, output.type.value, baseType);\n    const inputVariables = [a, b];\n    let processBias = '';\n    if (hasBias) {\n      const biasComponents = isChannelsLast ? components : 1;\n      inputVariables.push(inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, biasComponents));\n      processBias = `${\n        isChannelsLast ? `value += bias[col / ${biasComponents}];` : `value += ${output.type.value}(bias[row + i]);`\n      }`;\n    }\n\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'M', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'K', type: 'u32' },\n    ];\n    appendActivationUniforms(activationAttributes, uniforms);\n\n    const calcResult = (): string => {\n      let calcStr = `var a_data: ${a.type.value};`;\n      for (let i = 0; i < aComponents; i++) {\n        calcStr += `\n              let b_data${i} = b[(b_offset + (k + ${i}) * uniforms.N + col) / ${components}];`;\n      }\n      for (let i = 0; i < outputNumber; i++) {\n        calcStr += `a_data = a[(a_offset + (row + ${i}) * uniforms.K + k) / ${aComponents}];`;\n\n        for (let j = 0; j < aComponents; j++) {\n          calcStr += `\n            values[${i}] = fma(${b.type.value}(a_data${aComponents === 1 ? '' : `[${j}]`}), b_data${j}, values[${i}]);\\n`;\n        }\n      }\n      return calcStr;\n    };\n\n    return `\n  ${shaderHelper\n    .registerUniforms(uniforms)\n    .registerInternalVariables(batchDims)\n    .declareVariables(...inputVariables, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    let col = (global_idx % (uniforms.N / ${components})) * ${components};\n    var index1 = global_idx / (uniforms.N / ${components});\n    let stride1 = uniforms.M / ${outputNumber};\n    let row = (index1 % stride1) * ${outputNumber};\n    let batch = index1 / stride1;\n\n    ${outputShape.length === 2 ? '' : `let batch_indices = ${batchDims.offsetToIndices('batch')};`}\n\n    var a_indices: ${a.type.indices};\n    ${convertOutputBatchIndicesToInputBatchIndices('a_indices', a, a.rank - 2, batchDims.rank, 'batch_indices')}\n    ${a.indicesSet('a_indices', a.rank - 2, 0)}\n    ${a.indicesSet('a_indices', a.rank - 1, 0)}\n    let a_offset = ${a.indicesToOffset('a_indices')};\n\n    var b_indices: ${b.type.indices};\n    ${convertOutputBatchIndicesToInputBatchIndices('b_indices', b, b.rank - 2, batchDims.rank, 'batch_indices')}\n    ${b.indicesSet('b_indices', b.rank - 2, 0)}\n    ${b.indicesSet('b_indices', b.rank - 1, 0)}\n    let b_offset = ${b.indicesToOffset('b_indices')};\n    var values: array<${output.type.value}, ${outputNumber}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${aComponents}) {\n      ${calcResult()}\n    }\n    for (var i = 0u; i < ${outputNumber}u; i++) {\n      var value = values[i];\n      ${processBias}\n      ${applyActivation}\n      let cur_indices = ${output.type.indices}(batch, row + i, col);\n      let offset = ${output.indicesToOffset('cur_indices')};\n      ${output.setByOffset(`offset / ${components}`, 'value')};\n    }\n  }\n  `;\n  };\n  return {\n    name: 'MatMulNaive',\n    shaderCache: {\n      hint: `${activationAttributes.activation};${components};${aComponents};${outputNumber};${isChannelsLast}`,\n      inputDependencies: hasBias ? ['rank', 'rank', 'rank'] : ['rank', 'rank'],\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport { DataType } from '../../../../wasm-common';\nimport { TensorView } from '../../../tensor-view';\nimport { ShapeUtil } from '../../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  IndicesHelper,\n  inputVariable,\n  internalVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport {\n  appendActivationUniforms,\n  appendActivationUniformsData,\n  getActivationSnippet,\n  InternalActivationAttributes,\n} from '../fuse-utils';\nimport { convertOutputBatchIndicesToInputBatchIndices } from '../matmul-shaders';\n\nimport { typeSnippet } from './activation_util';\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source = (\n  workPerThread: number[],\n  workgroupSize: [number, number, number],\n  type = 'f32',\n  batchDims?: IndicesHelper,\n  transposeA = false,\n  tileInner = 32,\n  splitK = false,\n  splitedDimInner = 32,\n): string => {\n  const tileAOuter = workgroupSize[1] * workPerThread[1];\n  const tileBOuter = workgroupSize[0] * workPerThread[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  const innerElementSize = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n\n  if (\n    !(\n      ((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n        (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n      tileAWidth % workgroupSize[0] === 0 &&\n      tileInner % workgroupSize[1] === 0 &&\n      workPerThread[0] === 4\n    )\n  ) {\n    throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${workPerThread[0]} must be 4.`);\n  }\n  return `\nvar<workgroup> mm_Asub: array<array<vec${innerElementSize}<${type}>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${type}>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let num_tiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(uniforms.dim_inner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<${type}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA, batchDims)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${\n            batchDims ? ', batchIndices' : ''\n          });\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n};\n\nconst writeDataToSubASnippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n  transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource = (\n  workPerThread: number[],\n  workgroupSize: [number, number, number],\n  type = 'f32',\n  batchDims?: IndicesHelper,\n  transposeA = false,\n  tileInner = 32,\n  splitK = false,\n  splitedDimInner = 32,\n  sequentialAccessByThreads = false,\n): string => {\n  const tileAOuter = workPerThread[1] * workgroupSize[1];\n  const tileBOuter = workPerThread[0] * workgroupSize[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n\n  if (\n    !(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0)\n  ) {\n    throw new Error(\n      `tileAHight ${tileAHight} must be divisible by workgroupSize[1]${workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`,\n    );\n  }\n  const rowPerThreadA = tileAHight / workgroupSize[1];\n  const colPerThreadA = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const matmulSnippet = sequentialAccessByThreads\n    ? `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA, batchDims)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${batchDims ? ', batchIndices' : ''});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${type}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n            transposeA\n              ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];`\n              : `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`\n          }\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `\n    : `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA, batchDims)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${batchDims ? ', batchIndices' : ''});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${type}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n  return `\n  var<workgroup> mm_Asub : array<array<${type}, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<${type}, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n    let num_tiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(uniforms.dim_inner - 1) / tileInner + 1'\n    };\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<${type}, colPerThread>, rowPerThread>;\n    ${matmulSnippet}\n  }\n`;\n};\n\nconst matMulReadWriteFnSource = (\n  component: number,\n  hasBias: boolean,\n  applyActivation: string,\n  variables: IndicesHelper[],\n  isChannelsLast = false,\n): string => {\n  const [batchVariable, aVariable, bVariable, outputVariable] = variables;\n  const dataType = tensorTypeToWsglStorageType(variables[0].type.tensor);\n\n  const source = `\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${typeSnippet(\n      component,\n      dataType,\n    )} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        var aIndices: ${aVariable.type.indices};\n        ${convertOutputBatchIndicesToInputBatchIndices(\n          'aIndices',\n          aVariable,\n          aVariable.rank - 2,\n          batchVariable.rank,\n          'batchIndices',\n        )}\n        ${aVariable.indicesSet('aIndices', aVariable.rank - 2, 'u32(row)')}\n        ${aVariable.indicesSet('aIndices', aVariable.rank - 1, 'u32(colIn)')}\n        value = ${aVariable.getByIndices('aIndices')};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${typeSnippet(\n      component,\n      dataType,\n    )} {\n      var value = ${typeSnippet(component, dataType)}(0.0);\n      let col = colIn * ${component};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        var bIndices: ${bVariable.type.indices};\n        ${convertOutputBatchIndicesToInputBatchIndices(\n          'bIndices',\n          bVariable,\n          bVariable.rank - 2,\n          batchVariable.rank,\n          'batchIndices',\n        )}\n        ${bVariable.indicesSet('bIndices', bVariable.rank - 2, 'u32(row)')}\n        ${bVariable.indicesSet('bIndices', bVariable.rank - 1, 'u32(colIn)')}\n        value = ${bVariable.getByIndices('bIndices')};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${typeSnippet(component, dataType)}) {\n      let col = colIn * ${component};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${\n          hasBias\n            ? `value = value + ${isChannelsLast ? 'bias[colIn]' : `${typeSnippet(component, dataType)}(bias[row])`};`\n            : ''\n        }\n        ${applyActivation}\n        ${outputVariable.setByIndices('vec3<u32>(coords)', 'value')}\n      }\n    }\n    `;\n  return source;\n};\n\nexport const createMatmulProgramInfo = (\n  inputs: readonly TensorView[],\n  activationAttributes: InternalActivationAttributes,\n  outputShape: readonly number[],\n  reshapedOutputShape?: readonly number[],\n  isChannelsLast = false /* only used for conv2dByMatMul*/,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outerDimsA = aShape.slice(0, -2);\n  const outerDimsB = bShape.slice(0, -2);\n  const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n  const batchSize = ShapeUtil.size(outerDims);\n  const dimAOuter = aShape[aShape.length - 2];\n  const dimInner = aShape[aShape.length - 1];\n  const dimBOuter = bShape[bShape.length - 1];\n  const isVec4 = dimInner % 4 === 0 && dimBOuter % 4 === 0;\n\n  // TODO: fine tune size\n  const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n  const workgroupSize: [number, number, number] = [8, 8, 1];\n  const dispatch = [\n    Math.ceil(dimBOuter / workgroupSize[0] / elementsPerThread[0]),\n    Math.ceil(dimAOuter / workgroupSize[1] / elementsPerThread[1]),\n    Math.ceil(batchSize / workgroupSize[2] / elementsPerThread[2]),\n  ];\n\n  const components = isVec4 ? 4 : 1;\n  const aShapeTemp = [...outerDimsA, dimAOuter, dimInner / components];\n  const aRank = aShapeTemp.length;\n  const bShapeTemp = [...outerDimsB, dimInner, dimBOuter / components];\n  const bRank = bShapeTemp.length;\n  const outputShapeTemp = [batchSize, dimAOuter, dimBOuter / components];\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.int32, data: dimAOuter },\n    { type: DataType.int32, data: dimBOuter },\n    { type: DataType.int32, data: dimInner },\n  ];\n  appendActivationUniformsData(activationAttributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(outerDims, aShapeTemp, bShapeTemp));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n\n  const hasBias = inputs.length > 2;\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShapeTemp));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const batchRank = outerDims.length;\n    const batchDims = internalVariable('batchDims', inputs[0].dataType, batchRank, 1);\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n    const A = inputVariable('a', inputs[0].dataType, aRank, components);\n    const B = inputVariable('b', inputs[1].dataType, bRank, components);\n    const output = outputVariable('result', inputs[0].dataType, outputShapeTemp.length, components);\n    const inputVariables = [A, B];\n    if (hasBias) {\n      const biasComponents = isChannelsLast ? components : 1;\n      inputVariables.push(inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, biasComponents));\n    }\n    const uniforms: UniformsArrayType = [\n      { name: 'dim_a_outer', type: 'i32' },\n      { name: 'dim_b_outer', type: 'i32' },\n      { name: 'dim_inner', type: 'i32' },\n    ];\n    appendActivationUniforms(activationAttributes, uniforms);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(activationAttributes, output.type.value, baseType);\n    const declareFunctions = matMulReadWriteFnSource(\n      components,\n      hasBias,\n      applyActivation,\n      [batchDims, A, B, output],\n      isChannelsLast,\n    );\n    return `\n  ${shaderHelper\n    .registerUniforms(uniforms)\n    .registerInternalVariables(batchDims)\n    .declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n  ${\n    isVec4\n      ? makeMatMulPackedVec4Source(elementsPerThread, workgroupSize, dataType, batchDims)\n      : makeMatMulPackedSource(elementsPerThread, workgroupSize, dataType, batchDims)\n  }\n                   `;\n  };\n  return {\n    name: 'MatMul',\n    shaderCache: {\n      hint: `${elementsPerThread};${activationAttributes.activation};${isVec4};${isChannelsLast}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport { DataType } from '../../../../wasm-common';\nimport { LOG_DEBUG } from '../../../log';\nimport { TensorView } from '../../../tensor-view';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport { ConvAttributes } from '../conv';\nimport { appendActivationUniforms, appendActivationUniformsData, getActivationSnippet } from '../fuse-utils';\n\nimport { biasSnippet, typeSnippet } from './activation_util';\nimport { utilFunctions } from './conv_util';\nimport { makeMatMulPackedSource, makeMatMulPackedVec4Source } from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet = (\n  isChannelsLast: boolean,\n  fitAOuter: boolean,\n  fitBOuter: boolean,\n  fitInner: boolean,\n  addBias = false,\n  attributes: ConvAttributes,\n  innerElementSizeX = 4,\n  innerElementSizeW = 4,\n  innerElementSize = 4,\n  dataType = 'f32',\n): string => {\n  const getXSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'resData = x[xIndex];';\n      case 3:\n        return `resData = vec3<${dataType}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;\n      case 4:\n        return 'resData = x[xIndex / 4];';\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return w[row * i32(uniforms.w_shape[3]) + colIn];';\n      case 4:\n        return 'return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];';\n      default:\n        throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast\n    ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `\n    : `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n  const coordResSnippet = isChannelsLast\n    ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `\n    : `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n  const xHeight = isChannelsLast ? 'i32(uniforms.x_shape[1])' : 'i32(uniforms.x_shape[2])';\n  const xWidth = isChannelsLast ? 'i32(uniforms.x_shape[2])' : 'i32(uniforms.x_shape[3])';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n  const readXSnippet = `\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${isChannelsLast ? 'i32(uniforms.result_shape[2])' : 'i32(uniforms.result_shape[3])'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${col} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX, dataType)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n  const sampleX = isChannelsLast\n    ? fitAOuter && fitInner\n      ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}`\n      : `\n    let col = colIn * ${innerElementSizeX};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);`\n    : fitInner && fitBOuter\n      ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}`\n      : `\n    let col = colIn * ${innerElementSizeX};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX, dataType)}(0.0);`;\n\n  const sampleW = isChannelsLast\n    ? fitInner && fitBOuter\n      ? getWSnippet(innerElementSizeW)\n      : `\n    let col = colIn * ${innerElementSizeW};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${getWSnippet(innerElementSizeW)}\n    }\n    return ${typeSnippet(innerElementSizeW, dataType)}(0.0);`\n    : `\n    let col = colIn * ${innerElementSizeW};\n    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {\n      ${getWSnippet(innerElementSizeW)}\n    }\n    return ${typeSnippet(innerElementSizeW, dataType)}(0.0);`;\n\n  const resType = typeSnippet(innerElementSize, dataType);\n  const aType = isChannelsLast ? typeSnippet(innerElementSizeX, dataType) : typeSnippet(innerElementSizeW, dataType);\n  const bType = isChannelsLast ? typeSnippet(innerElementSizeW, dataType) : typeSnippet(innerElementSizeX, dataType);\n  const applyActivation = getActivationSnippet(attributes, resType, dataType);\n  const userCode = `\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'i32(uniforms.result_shape[2])' : 'i32(uniforms.result_shape[3])'};\n      ${coordResSnippet}\n      ${biasSnippet(addBias)}\n      ${applyActivation}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n  return userCode;\n};\n\nexport const createConv2DMatMulProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  dimAOuter: number,\n  dimBOuter: number,\n  dimInner: number,\n  hasBias: boolean,\n  sequentialAccessByThreads: boolean,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n  const batchSize = outputShape[0];\n  const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n  const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n  const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n  // TODO: enable vec4 for NCHW\n  const isVec4 = isChannelsLast && (inChannels % 4 === 0 || inChannels % 3 === 0) && outChannels % 4 === 0;\n\n  // TODO: fine tune size\n  const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n  const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n  const workGroupSize: [number, number, number] = [8, 8, 1];\n  const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n  const dispatch = [\n    Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n    Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n    Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2]),\n  ];\n\n  LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n  const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : 1;\n  const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n  const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n  const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n  const fitAOuter = dimAOuter % tileAOuter === 0;\n  const fitBOuter = dimBOuter % tileBOuter === 0;\n  const fitInner = dimInner % tileInner === 0;\n  const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.int32, data: dimAOuter },\n    { type: DataType.int32, data: dimBOuter },\n    { type: DataType.int32, data: dimInner },\n    { type: DataType.int32, data: [attributes.pads[0], attributes.pads[1]] },\n    { type: DataType.int32, data: attributes.strides },\n    { type: DataType.int32, data: attributes.dilations },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(inputs[0].dims, inputs[1].dims));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'dim_a_outer', type: 'i32' },\n      { name: 'dim_b_outer', type: 'i32' },\n      { name: 'dim_inner', type: 'i32' },\n      { name: 'pad', type: 'i32', length: 2 },\n      { name: 'stride', type: 'i32', length: 2 },\n      { name: 'dilation', type: 'i32', length: 2 },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n\n    // TODO: support component 2, 3.\n    const components = isVec4 ? 4 : 1;\n    const t = tensorTypeToWsglStorageType(inputs[0].dataType);\n    let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        result[flatIndex] = ${isVec4 ? `vec4<${t}>` : t}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? `vec4<${t}>` : t}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n    const x = inputVariable(\n      'x',\n      inputs[0].dataType,\n      inputs[0].dims.length,\n      innerElementSize === 3 ? 1 : innerElementSize,\n    );\n    const w = inputVariable('w', inputs[1].dataType, inputs[1].dims.length, components);\n    const inputVariables = [x, w];\n    const output = outputVariable('result', inputs[0].dataType, outputShape.length, components);\n    if (hasBias) {\n      const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, components);\n      inputVariables.push(bias);\n      declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? `vec4<${t}>` : t} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n    }\n\n    return `\n        ${utilFunctions('uniforms.result_strides')}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n        ${declareFunctions}\n        ${conv2dCommonSnippet(\n          isChannelsLast,\n          fitAOuter,\n          fitBOuter,\n          fitInner,\n          hasBias,\n          attributes,\n          elementsSize[0],\n          elementsSize[1],\n          elementsSize[2],\n          t,\n        )}\n        ${\n          isVec4\n            ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, t, undefined, !isChannelsLast, tileInner)\n            : makeMatMulPackedSource(\n                elementsPerThread,\n                workGroupSize,\n                t,\n                undefined,\n                !isChannelsLast,\n                tileInner,\n                false,\n                undefined,\n                sequentialAccessByThreads,\n              )\n        }`;\n  };\n  return {\n    name: 'Conv2DMatMul',\n    shaderCache: {\n      hint: `${attributes.cacheKey};${innerElementSize};${isVec4};${fitAOuter};${fitBOuter};${fitInner};${tileAOuter};${tileBOuter};${tileInner}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv3d_naive_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport { DataType } from '../../../../wasm-common';\nimport { LOG_DEBUG } from '../../../log';\nimport { TensorView } from '../../../tensor-view';\nimport { ShapeUtil } from '../../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from '../common';\nimport { ConvAttributes } from '../conv';\nimport { appendActivationUniforms, appendActivationUniformsData, getActivationSnippet } from '../fuse-utils';\n\nimport { typeSnippet } from './activation_util';\n\nconst arrayProduct = (arr: number[]) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nconst parse3TupleParam = (param: number | [number, number, number]): [number, number, number] =>\n  typeof param === 'number' ? [param, param, param] : param;\n\nconst getEffectiveFilterSize = (filterSize: number, dilation: number): number => {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n};\n\nconst computeDefaultPad = (\n  inputShape: [number, number] | [number, number, number, number],\n  fieldSize: number,\n  stride: number,\n  dilation = 1,\n): number => {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n};\n\nconst computeOutputShape4D = (\n  inShape: [number, number, number, number],\n  filterShape: [number, number, number],\n  outChannels: number,\n  strides: [number, number, number],\n  zeroPad?: number,\n): [number, number, number, number] => {\n  if (zeroPad == null) {\n    // eslint-disable-next-line no-param-reassign\n    zeroPad = computeDefaultPad(inShape, filterShape[0], strides[0]);\n  }\n  const outShape: [number, number, number, number] = [0, 0, 0, outChannels];\n  for (let index = 0; index < 3; index++) {\n    if (inShape[index] + 2 * zeroPad >= filterShape[index]) {\n      outShape[index] = Math.trunc((inShape[index] - filterShape[index] + 2 * zeroPad) / strides[index] + 1);\n    }\n  }\n  return outShape;\n};\n\nconst get3DPadAndOutInfo = (\n  pad: number | string | number[],\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n): { padInfo: PadInfo3D; outDepth: number; outHeight: number; outWidth: number } => {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (pad === 'VALID') {\n    // eslint-disable-next-line no-param-reassign\n    pad = 0;\n  }\n\n  if (typeof pad === 'number') {\n    padInfo = { top: pad, bottom: pad, left: pad, right: pad, front: pad, back: pad };\n    const outShape = computeOutputShape4D(\n      [inDepth, inHeight, inWidth, 1],\n      [filterDepth, filterHeight, filterWidth],\n      1,\n      [strideDepth, strideHeight, strideWidth],\n      pad,\n    );\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (Array.isArray(pad)) {\n    if (!pad.every((val, _, arr) => val === arr[0])) {\n      throw Error(`Unsupported padding parameter: ${pad}`);\n    }\n    padInfo = { top: pad[0], bottom: pad[1], left: pad[2], right: pad[3], front: pad[4], back: pad[5] };\n    const outShape = computeOutputShape4D(\n      [inDepth, inHeight, inWidth, 1],\n      [filterDepth, filterHeight, filterWidth],\n      1,\n      [strideDepth, strideHeight, strideWidth],\n      pad[0],\n    );\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'SAME_UPPER') {\n    // TODO: support 'SAME_LOWER'.\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = { top, bottom, left, right, front, back };\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return { padInfo, outDepth, outHeight, outWidth };\n};\n\ntype PadInfo3D = {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n  front: number;\n  back: number;\n};\n\nexport type Conv3DInfo = {\n  batchSize: number;\n  inDepth: number;\n  inHeight: number;\n  inWidth: number;\n  inChannels: number;\n  outDepth: number;\n  outHeight: number;\n  outWidth: number;\n  outChannels: number;\n  dataFormat: 'channelsFirst' | 'channelsLast';\n  strideDepth: number;\n  strideHeight: number;\n  strideWidth: number;\n  dilationDepth: number;\n  dilationHeight: number;\n  dilationWidth: number;\n  filterDepth: number;\n  filterHeight: number;\n  filterWidth: number;\n  effectiveFilterDepth: number;\n  effectiveFilterHeight: number;\n  effectiveFilterWidth: number;\n  padInfo: PadInfo3D;\n  inShape: [number, number, number, number, number];\n  outShape: [number, number, number, number, number];\n  filterShape: [number, number, number, number, number];\n};\n\nexport const computeConv3DInfo = (\n  inShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number],\n  strides: number | [number, number, number],\n  dilations: number | [number, number, number],\n  pad: number | string | number[],\n  depthwise = false,\n  dataFormat: 'channelsFirst' | 'channelsLast' = 'channelsLast',\n): Conv3DInfo => {\n  let batchSize, inDepth, inHeight, inWidth, inChannels;\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  const [filterChannels, , filterDepth, filterHeight, filterWidth] = filterShape;\n\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n\n  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const { padInfo, outDepth, outHeight, outWidth } = get3DPadAndOutInfo(\n    pad,\n    inDepth,\n    inHeight,\n    inWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n  );\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number] = [0, 0, 0, 0, 0];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape,\n  };\n};\n\nexport const createConv3DNaiveProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  filterDims: readonly number[],\n  pads: readonly number[],\n  dataFormat: string,\n): ProgramInfo => {\n  const isChannelLast = dataFormat === 'channelsLast';\n  const inChannels = isChannelLast ? inputs[0].dims[3] : inputs[0].dims[1];\n  // TODO: enable vec4.\n  const isVec4 = false;\n  const workGroupSize: [number, number, number] = [64, 1, 1];\n  const dispatchLayout = { x: outputShape.map((_, i) => i) };\n  const dispatch = [Math.ceil(arrayProduct(dispatchLayout.x.map((d) => outputShape[d])) / workGroupSize[0]), 1, 1];\n\n  LOG_DEBUG('verbose', () => `[conv3d_naive_webgpu] dispatch = ${dispatch}`);\n\n  const innerElementSize = isVec4 ? (isChannelLast && inChannels % 4 !== 0 ? 3 : 4) : 1;\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: filterDims },\n    { type: DataType.uint32, data: pads },\n    { type: DataType.uint32, data: attributes.strides },\n    { type: DataType.uint32, data: attributes.dilations },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(inputs[0].dims, inputs[1].dims));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n  const hasBias = inputs.length === 3;\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'filter_dims', type: 'u32', length: filterDims.length },\n      { name: 'pads', type: 'u32', length: pads.length },\n      { name: 'strides', type: 'u32', length: attributes.strides.length },\n      { name: 'dilations', type: 'u32', length: attributes.dilations.length },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n    // TODO: support component 2, 3.\n    const components = isVec4 ? 4 : 1;\n    const t = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n    const x = inputVariable(\n      'x',\n      inputs[0].dataType,\n      inputs[0].dims.length,\n      innerElementSize === 3 ? 1 : innerElementSize,\n    );\n    const w = inputVariable('W', inputs[1].dataType, inputs[1].dims.length, components);\n    const inputVariables = [x, w];\n    const output = outputVariable('result', inputs[0].dataType, outputShape.length, components);\n    let declareFunctions = '';\n    if (hasBias) {\n      const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims.length, components);\n      inputVariables.push(bias);\n      declareFunctions += `\n        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${isVec4 ? `vec4<${t}>` : t} {\n          return bias[${isChannelLast ? getElementAt('coords', 4, 5) : getElementAt('coords', 1, 5)}${\n            isVec4 ? '/ 4' : ''\n          }];\n        }`;\n    }\n    const resType = typeSnippet(innerElementSize, t);\n    const applyActivation = getActivationSnippet(attributes, resType, t);\n\n    return `\n            ${declareFunctions}\n            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${x.getByIndices('aIndices')};\n            }\n            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${w.getByIndices('aIndices')};\n            }\n          ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n          ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n              let coords = ${output.offsetToIndices('global_idx')};\n              let batch = ${getElementAt('coords', 0, x.rank)};\n              let d2 = ${\n                isChannelLast ? getElementAt('coords', x.rank - 1, x.rank) : getElementAt('coords', 1, x.rank)\n              };\n              let xFRCCorner = vec3<u32>(${\n                isChannelLast ? getElementAt('coords', 1, x.rank) : getElementAt('coords', 2, x.rank)\n              },\n              ${isChannelLast ? getElementAt('coords', 2, x.rank) : getElementAt('coords', 3, x.rank)},\n              ${\n                isChannelLast ? getElementAt('coords', 3, x.rank) : getElementAt('coords', 4, x.rank)\n              }) * uniforms.strides - uniforms.pads;\n              let xFCorner = xFRCCorner.x;\n              let xRCorner = xFRCCorner.y;\n              let xCCorner = xFRCCorner.z;\n              let xShapeY = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 1, x.rank)\n                  : getElementAt('uniforms.x_shape', 2, x.rank)\n              };\n              let xShapeZ = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 2, x.rank)\n                  : getElementAt('uniforms.x_shape', 3, x.rank)\n              };\n              let xShapeW = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 3, x.rank)\n                  : getElementAt('uniforms.x_shape', 4, x.rank)\n              };\n              let xShapeU = ${\n                isChannelLast\n                  ? getElementAt('uniforms.x_shape', 4, x.rank)\n                  : getElementAt('uniforms.x_shape', 1, x.rank)\n              };\n              let inputDepthNearestVec4 = (xShapeU / 4) * 4;\n              let inputDepthVec4Remainder = xShapeU % 4;\n\n              var value = 0.0;\n              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {\n                let xF = xFCorner + wF * uniforms.dilations[0];\n                if (xF < 0 || xF >= xShapeY) {\n                  continue;\n                }\n\n                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {\n                  let xR = xRCorner + wR * uniforms.dilations[1];\n                  if (xR < 0 || xR >= xShapeZ) {\n                    continue;\n                  }\n\n                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {\n                    let xC = xCCorner + wC * uniforms.dilations[2];\n                    if (xC < 0 || xC >= xShapeW) {\n                      continue;\n                    }\n\n                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {\n                      ${\n                        isChannelLast\n                          ? `let xValues = vec4<f32>(\n                               getX(batch, xF, xR, xC, d1),\n                               getX(batch, xF, xR, xC, d1 + 1),\n                               getX(batch, xF, xR, xC, d1 + 2),\n                               getX(batch, xF, xR, xC, d1 + 3));\n                            `\n                          : `let xValues = vec4<f32>(\n                               getX(batch, d1, xF, xR, xC),\n                               getX(batch, d1 + 1, xF, xR, xC),\n                               getX(batch, d1 + 2, xF, xR, xC),\n                               getX(batch, d1 + 3, xF, xR, xC));\n                            `\n                      }\n                            let wValues = vec4<f32>(\n                              getW(d2, d1, wF, wR, wC),\n                              getW(d2, d1 + 1, wF, wR, wC),\n                              getW(d2, d1 + 2, wF, wR, wC),\n                              getW(d2, d1 + 3, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                    if (inputDepthVec4Remainder == 1) {\n                        ${\n                          isChannelLast\n                            ? `value += getX(batch, xF, xR, xC, inputDepthNearestVec4)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`\n                            : `value += getX(batch, inputDepthNearestVec4, xF, xR, xC)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`\n                        }\n                    } else if (inputDepthVec4Remainder == 2) {\n                      ${\n                        isChannelLast\n                          ? `let xValues = vec2<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));\n                      `\n                          : `let xValues = vec2<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));\n                    `\n                      }\n                    let wValues = vec2<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    } else if (inputDepthVec4Remainder == 3) {\n                      ${\n                        isChannelLast\n                          ? `let xValues = vec3<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));\n                      `\n                          : `let xValues = vec3<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));\n                    `\n                      }\n                    let wValues = vec3<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                  }\n                }\n              }\n              ${hasBias ? 'value = value + getBiasByOutputCoords(coords)' : ''};\n              ${applyActivation}\n              result[global_idx] = f32(value);\n          }`;\n  };\n  return {\n    name: 'Conv3DNaive',\n    shaderCache: { hint: `${attributes.cacheKey};${isChannelLast};${innerElementSize};${hasBias}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\nimport { ConvAttributes } from './conv';\nimport { appendActivationUniforms, appendActivationUniformsData, getActivationSnippet } from './fuse-utils';\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += b[output_channel];' : '';\n  const xShape = inputs[0].dims;\n  const wShape = inputs[1].dims;\n\n  const isChannelLast = attributes.format === 'NHWC';\n  const outputChannels = isChannelLast ? outputShape[3] : outputShape[1];\n  const outputChannelsPerGroup = outputChannels / attributes.group;\n  const components = isChannelLast && outputChannelsPerGroup >= 4 ? getMaxComponents(outputChannels) : 1;\n  const outputSize = ShapeUtil.size(outputShape) / components;\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: attributes.dilations },\n    { type: DataType.uint32, data: [attributes.strides[0], attributes.strides[1]] },\n    { type: DataType.uint32, data: [attributes.pads[0], attributes.pads[1]] },\n    { type: DataType.uint32, data: outputChannelsPerGroup },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(\n    ...createTensorShapeVariables(xShape, [wShape[0], wShape[1], wShape[2], wShape[3] / components]),\n  );\n  const inputDependencies: ProgramInputTensorInfoDependency[] = hasBias ? ['rank', 'rank', 'rank'] : ['rank', 'rank'];\n  programUniforms.push(\n    ...createTensorShapeVariables([outputShape[0], outputShape[1], outputShape[2], outputShape[3] / components]),\n  );\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length, components);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(attributes, output.type.value, baseType);\n    const x = inputVariable('x', inputs[0].dataType, xShape.length);\n    const w = inputVariable('w', inputs[1].dataType, wShape.length, components);\n    const inputVars = [x, w];\n    if (hasBias) {\n      inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims, components));\n    }\n\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'dilations', type: 'u32', length: attributes.dilations.length },\n      { name: 'strides', type: 'u32', length: 2 },\n      { name: 'pads', type: 'u32', length: 2 },\n      { name: 'output_channels_per_group', type: 'u32' },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n\n    const calculateResult = isChannelLast\n      ? `\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {\n            let input_channel = in_channel_offset + wInChannel;\n            let xVal = ${x.get('batch', 'xHeight', 'xWidth', 'input_channel')};\n            let wVal = ${w.get('wHeight', 'wWidth', 'wInChannel', 'output_channel')};\n            value += xVal * wVal;\n          }\n        }\n      }\n      `\n      : `\n      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n        let input_channel = in_channel_offset + wInChannel;\n        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {\n            continue;\n          }\n\n          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {\n              continue;\n            }\n\n            let xVal = ${x.get('batch', 'input_channel', 'xHeight', 'xWidth')};\n            let wVal = ${w.get('output_channel', 'wInChannel', 'wHeight', 'wWidth')};\n            value += xVal * wVal;\n          }\n        }\n      }\n      `;\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let outputIndices = ${output.offsetToIndices('global_idx')};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n      isChannelLast ? 2 : 3\n    }]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel * ${components} / uniforms.output_channels_per_group;\n    var in_channel_offset = group_id * uniforms.w_shape[${isChannelLast ? 2 : 1}];\n\n    var value: ${output.type.value} = ${output.type.value}(0);\n    ${calculateResult}\n    ${processBias}\n    ${applyActivation}\n    ${output.setByOffset('global_idx', 'value')}\n  }`;\n  };\n  return {\n    name: 'GroupedConv',\n    shaderCache: { hint: `${attributes.cacheKey}_${components}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const createGroupedConvVectorizeProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  outputShape: readonly number[],\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const components = getMaxComponents(outputShape[3]);\n  const outputNumber = getMaxComponents(outputShape[2]);\n  const outputSize = ShapeUtil.size(outputShape) / components / outputNumber;\n  const xShape = [inputs[0].dims[0], inputs[0].dims[1], inputs[0].dims[2], inputs[0].dims[3] / components];\n  const wShape = [inputs[1].dims[0], inputs[1].dims[1], inputs[1].dims[2], inputs[1].dims[3] / components];\n  const outputShapeInShader = [outputShape[0], outputShape[1], outputShape[2], outputShape[3] / components];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: [attributes.strides[0], attributes.strides[1]] },\n    { type: DataType.int32, data: [attributes.pads[0], attributes.pads[1]] },\n  ];\n  appendActivationUniformsData(attributes, programUniforms);\n  programUniforms.push(...createTensorShapeVariables(xShape, wShape, outputShapeInShader));\n  const xNumber = (outputNumber - 1) * attributes.strides[1] + wShape[1];\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', inputs[0].dataType, outputShapeInShader.length, components);\n    const baseType = tensorTypeToWsglStorageType(output.type.tensor);\n    const applyActivation = getActivationSnippet(attributes, output.type.value, baseType);\n    const x = inputVariable('x', inputs[0].dataType, xShape.length, components);\n    const w = inputVariable('w', inputs[1].dataType, wShape.length, components);\n    const inputVars = [x, w];\n    if (hasBias) {\n      inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims, components));\n    }\n    const processBias = hasBias ? 'value += b[output_channel];' : '';\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'strides', type: 'i32', length: 2 },\n      { name: 'pads', type: 'i32', length: 2 },\n    ];\n    appendActivationUniforms(attributes, uniforms);\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVars, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${outputNumber}u;\n    let col = (index1 % width1) * ${outputNumber}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${x.type.value}, ${xNumber}>;\n    var values: array<${output.type.value}, ${outputNumber}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${wShape[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${xNumber}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${x.get('batch', 'u32(x_height)', 'u32(x_width)', 'input_channel')};\n          } else {\n            x_vals[i] = ${x.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${wShape[1]}; w_width++) {\n          let w_val = ${w.get('w_height', 'w_width', '0', 'output_channel')};\n          for (var i = 0u; i < ${outputNumber}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${outputNumber}u; i++) {\n      var value = values[i];\n      ${processBias}\n      ${applyActivation}\n      ${output.set('batch', 'row', 'col + i', 'output_channel', 'value')};\n    }\n  }`;\n  };\n\n  return {\n    name: 'GroupedConv-Vectorize',\n    shaderCache: {\n      hint: `${attributes.cacheKey};${components};${outputNumber};${xNumber};${wShape[0]};${wShape[1]}`,\n      inputDependencies: hasBias ? ['rank', 'rank', 'type'] : ['rank', 'rank'],\n    },\n    getRunData: () => ({\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { PoolConvUtil } from '../../util';\nimport { AttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext } from '../types';\n\nimport { createConv2DMatMulProgramInfo } from './3rd-party/conv2d_mm_webgpu';\nimport { computeConv3DInfo, createConv3DNaiveProgramInfo } from './3rd-party/conv3d_naive_webgpu';\nimport { createMatmulProgramInfo } from './3rd-party/matmul_packed_webgpu';\nimport { createGroupedConvProgramInfo, createGroupedConvVectorizeProgramInfo } from './conv-grouped';\nimport { InternalActivationAttributes, parseInternalActivationAttributes } from './fuse-utils';\nimport { createNaiveMatmulProgramInfo } from './matmul-shaders';\nimport { createTransposeProgramInfo } from './transpose';\n\nexport const calculateOutputShape = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  adjustPads: readonly number[],\n  strides: readonly number[],\n  isChannelLast: boolean,\n): number[] => {\n  const batchSize = inputShape[0];\n  const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n  const spatialRank = inputSpatialShape.length;\n  const outChannels = kernelShape[0];\n  const kernelSpatialShape = kernelShape.slice(2);\n  const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n  const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n  const outputShape = inputSpatialShapeWithPad.map((v, i) =>\n    Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]),\n  );\n  outputShape.splice(0, 0, batchSize);\n  outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n  return outputShape;\n};\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC' | 'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute = [2, 3, 1, 0];\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  if (inputs[0].dims.length > 5) {\n    throw new Error('greater than 5D is not supported');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not well specified in the attributes, infer it from the weight tensor dims\n  if (kernelShape.length < inputs[1].dims.length - 2) {\n    kernelShape.push(...Array(inputs[1].dims.length - 2 - kernelShape.length).fill(0));\n  }\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n    inputs[0].dims,\n    attributes.strides,\n    attributes.dilations,\n    kernelShape,\n    pads,\n    attributes.format === 'NHWC',\n    attributes.autoPad,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads });\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as number[];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as number[];\n  const pads = attributes.pads as number[];\n  const strides = attributes.strides as number[];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return {\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes,\n    cacheKey: `${attributes.format};${activationAttributes.activation};`,\n  };\n};\n\nconst conv2d = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: ConvAttributes,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): void => {\n  // check attributes\n\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n  const outputShape = calculateOutputShape(\n    inputs[0].dims,\n    inputs[1].dims,\n    attributes.dilations,\n    attributes.pads,\n    attributes.strides,\n    isChannelsLast,\n  );\n  if (attributes.group !== 1) {\n    const convInputs = [inputs[0]];\n    if (isChannelsLast) {\n      const transposedWeight =\n        (context.kernelCustomData.wT as TensorView | undefined) ??\n        context.compute(createTransposeProgramInfo(inputs[1], weightTransposeAttribute), {\n          inputs: [1],\n          outputs: [attributes.wIsConst ? -2 : -1],\n        })[0];\n      if (attributes.wIsConst && !context.kernelCustomData.wT) {\n        context.kernelCustomData.wT = transposedWeight;\n      }\n      convInputs.push(transposedWeight);\n    } else {\n      convInputs.push(inputs[1]);\n    }\n    if (inputs.length === 3) {\n      convInputs.push(inputs[2]);\n    }\n    // NVIDIA GPU with ampere architecture fails with below 2 cases, but we couldn't repro them with any other\n    // GPUs. So just disable vectorize on NVIDIA ampere to ensure always correct outputs.\n    // [webgpu]Conv - conv - vectorize group - B\n    // [webgpu]Conv - conv - vectorize group - D\n    const enableGroupedConvVectorize = !context.adapterInfo.isArchitecture('ampere');\n    if (\n      enableGroupedConvVectorize &&\n      isChannelsLast &&\n      inputs[1].dims[0] === attributes.group &&\n      inputs[1].dims[1] === 1 &&\n      attributes.dilations[0] === 1 &&\n      attributes.dilations[1] === 1\n    ) {\n      context.compute(\n        createGroupedConvVectorizeProgramInfo(convInputs, attributes, outputShape, squeezeOutputShapeFunction),\n        { inputs: convInputs },\n      );\n    } else {\n      context.compute(createGroupedConvProgramInfo(convInputs, attributes, outputShape, squeezeOutputShapeFunction), {\n        inputs: convInputs,\n      });\n    }\n    return;\n  }\n\n  const hasBias = inputs.length === 3;\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n    isChannelsLast &&\n    weightHeight === inputHeight &&\n    weightWidth === inputWidth &&\n    attributes.pads[0] === 0 &&\n    attributes.pads[1] === 0;\n  if (\n    sameSize ||\n    (weightHeight === 1 &&\n      weightWidth === 1 &&\n      attributes.dilations[0] === 1 &&\n      attributes.dilations[1] === 1 &&\n      attributes.strides[0] === 1 &&\n      attributes.strides[1] === 1 &&\n      attributes.pads[0] === 0 &&\n      attributes.pads[1] === 0)\n  ) {\n    // conv2dByMatMul\n    const batch = outputShape[0];\n    let xReshaped, wReshaped, matmulOutputShape;\n    const matmulInputs = [];\n    if (isChannelsLast) {\n      const transposedWeight =\n        (context.kernelCustomData.wT as TensorView | undefined) ??\n        context.compute(createTransposeProgramInfo(inputs[1], weightTransposeAttribute), {\n          inputs: [1],\n          outputs: [attributes.wIsConst ? -2 : -1],\n        })[0];\n      if (attributes.wIsConst && !context.kernelCustomData.wT) {\n        context.kernelCustomData.wT = transposedWeight;\n      }\n      if (sameSize) {\n        const sharedDim = inputHeight * inputWidth * inputChannels;\n        xReshaped = inputs[0].reshape([1, batch, sharedDim]);\n        wReshaped = transposedWeight.reshape([1, sharedDim, outChannels]);\n        matmulOutputShape = [1, batch, outChannels];\n      } else {\n        xReshaped = inputs[0].reshape([batch, inputHeight * inputWidth, inputChannels]);\n        wReshaped = transposedWeight.reshape([1, inputChannels, outChannels]);\n        matmulOutputShape = [batch, outHeight * outWidth, outChannels];\n      }\n      matmulInputs.push(xReshaped);\n      matmulInputs.push(wReshaped);\n    } else {\n      xReshaped = inputs[0].reshape([batch, inputChannels, inputHeight * inputWidth]);\n      wReshaped = inputs[1].reshape([1, outChannels, inputChannels]);\n      matmulOutputShape = [batch, outChannels, outHeight * outWidth];\n      matmulInputs.push(wReshaped);\n      matmulInputs.push(xReshaped);\n    }\n    if (hasBias) {\n      matmulInputs.push(inputs[2]);\n    }\n    const N = matmulOutputShape[2];\n    const K = matmulInputs[0].dims[matmulInputs[0].dims.length - 1];\n    // Tune the threshold.\n    if (N < 8 && K < 8) {\n      context.compute(\n        createNaiveMatmulProgramInfo(\n          matmulInputs,\n          attributes,\n          outputShape,\n          matmulOutputShape,\n          isChannelsLast,\n          squeezeOutputShapeFunction,\n        ),\n        { inputs: matmulInputs },\n      );\n    } else {\n      context.compute(\n        createMatmulProgramInfo(\n          matmulInputs,\n          attributes,\n          outputShape,\n          matmulOutputShape,\n          isChannelsLast,\n          squeezeOutputShapeFunction,\n        ),\n        { inputs: matmulInputs },\n      );\n    }\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight =\n    (context.kernelCustomData.wT as TensorView | undefined) ??\n    context.compute(createTransposeProgramInfo(inputs[1], weightTransposeAttribute), {\n      inputs: [1],\n      outputs: [attributes.wIsConst ? -2 : -1],\n    })[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    convInputs.push(inputs[2]);\n  }\n\n  // STEP.3: compute matmul\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n  context.compute(\n    createConv2DMatMulProgramInfo(\n      convInputs,\n      attributes,\n      outputShape,\n      dimAOuter,\n      dimBOuter,\n      dimInner,\n      hasBias,\n      sequentialAccessByThreads,\n      squeezeOutputShapeFunction,\n    ),\n    { inputs: convInputs },\n  );\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n      isChannelLast\n        ? // [N, W, C] -> [N, H=1, W, C]\n          [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]]\n        : // [N, C, W] -> [N, C, H=1, W]\n          [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]],\n    ),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]]),\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes(\n    { ...attributes, pads, strides, dilations, kernelShape },\n    inputs,\n  );\n  conv2d(context, inputs, adjustedAttributes, (outputShape) =>\n    isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : [outputShape[0], outputShape[1], outputShape[3]],\n  );\n};\n\nconst conv3d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const format = attributes.format === 'NHWC' ? 'channelsLast' : 'channelsFirst';\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n  const pads = attributes.autoPad === 'NOTSET' ? attributes.pads : attributes.autoPad;\n  const convInfo = computeConv3DInfo(\n    inputs[0].dims as [number, number, number, number, number],\n    inputs[1].dims as [number, number, number, number, number],\n    attributes.strides as number | [number, number, number],\n    attributes.dilations as number | [number, number, number],\n    pads as string | number[],\n    false,\n    format,\n  );\n  context.compute(\n    createConv3DNaiveProgramInfo(\n      inputs,\n      adjustedAttributes,\n      convInfo.outShape,\n      [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth],\n      [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left],\n      format,\n    ),\n  );\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else if (context.inputs[0].dims.length === 5) {\n    conv3d(context, context.inputs, attributes);\n  } else {\n    const adjustedAttributes = getAdjustedConvAttributes(attributes, context.inputs);\n    conv2d(context, context.inputs, adjustedAttributes);\n  }\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\n\nimport { DataType } from '../../../../wasm-common';\nimport { LOG_DEBUG } from '../../../log';\nimport { TensorView } from '../../../tensor-view';\nimport { ShapeUtil } from '../../../util';\nimport { ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../../types';\nimport {\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n  getMaxComponents,\n} from '../common';\nimport { ConvTransposeAttributes } from '../conv-transpose';\n\nexport const createConvTranspose2DProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: ConvTransposeAttributes,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): ProgramInfo => {\n  const hasBias = inputs.length > 2;\n  const outputShape = attributes.outputShape;\n  const isChannelsLast = attributes.format === 'NHWC';\n  const group = attributes.group;\n  const wShape = inputs[1].dims;\n  const inputChannelsPerGroup = wShape[2] / group;\n  const outputChannelsPerGroup = wShape[3];\n  const aComponents = isChannelsLast ? getMaxComponents(inputChannelsPerGroup) : 1;\n  const components = isChannelsLast ? getMaxComponents(outputChannelsPerGroup) : 1;\n  const bComponents = isChannelsLast ? (outputChannelsPerGroup === 1 ? aComponents : components) : 1;\n  const outputSize = ShapeUtil.size(outputShape) / components;\n  const dispatch = [Math.ceil(outputSize / 64), 1, 1];\n  LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\n\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n  const strides = [attributes.strides[0], attributes.strides[1]];\n  const filterDims = [attributes.kernelShape[isChannelsLast ? 1 : 2], attributes.kernelShape[isChannelsLast ? 2 : 3]];\n  const dilations = [attributes.dilations[0], attributes.dilations[1]];\n  const effectiveFilterDims = [\n    filterDims[0] +\n      (attributes.dilations[0] <= 1\n        ? 0\n        : (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)),\n    filterDims[1] +\n      (attributes.dilations[1] <= 1\n        ? 0\n        : (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)),\n  ];\n  const pads = [\n    effectiveFilterDims[0] - 1 - Math.floor((attributes.pads[0] + attributes.pads[2]) / 2),\n    effectiveFilterDims[1] - 1 - Math.floor((attributes.pads[1] + attributes.pads[3]) / 2),\n  ];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: strides },\n    { type: DataType.uint32, data: filterDims },\n    { type: DataType.uint32, data: dilations },\n    { type: DataType.uint32, data: effectiveFilterDims },\n    { type: DataType.int32, data: pads },\n    { type: DataType.uint32, data: inputChannelsPerGroup },\n    { type: DataType.uint32, data: outputChannelsPerGroup },\n    ...createTensorShapeVariables(inputs[0].dims, inputs[1].dims),\n  ];\n  if (hasBias) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'strides', type: 'u32', length: strides.length },\n      { name: 'filter_dims', type: 'u32', length: filterDims.length },\n      { name: 'dilations', type: 'u32', length: filterDims.length },\n      { name: 'effective_filter_dims', type: 'u32', length: effectiveFilterDims.length },\n      { name: 'pads', type: 'i32', length: pads.length },\n      { name: 'input_channels_per_group', type: 'u32' },\n      { name: 'output_channels_per_group', type: 'u32' },\n    ];\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    const w = inputVariable('W', inputs[1].dataType, inputs[1].dims.length, bComponents);\n    const dy = inputVariable('Dy', inputs[0].dataType, inputs[0].dims.length, aComponents);\n    const inputVariables = [dy, w];\n    if (hasBias) {\n      inputVariables.push(inputVariable('bias', inputs[2].dataType, [outputShape[channelDim]].length, components));\n    }\n    const output = outputVariable('result', inputs[0].dataType, outputShape.length, components);\n\n    const calculateResult = (): string => {\n      let calcStr = '';\n      if (aComponents === 1) {\n        calcStr += `\n        let w_offset = ${w.indicesToOffset(`${w.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};\n        let wValue = ${w.getByOffset(`w_offset / ${bComponents}`)};\n        dotProd = dotProd + xValue * wValue;`;\n      } else {\n        if (outputChannelsPerGroup === 1) {\n          calcStr += `\n          let wValue = ${w.getByOffset(`${w.indicesToOffset(`${w.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)} / ${bComponents}`)};\n          dotProd = dotProd + dot(xValue, wValue);`;\n        } else {\n          for (let c = 0; c < aComponents; c++) {\n            calcStr += `\n            let wValue${c} = ${w.getByOffset(`${w.indicesToOffset(`${w.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${c}, wOutChannel)`)} / ${bComponents}`)};\n            dotProd = dotProd + xValue[${c}] * wValue${c};`;\n          }\n        }\n      }\n      return calcStr;\n    };\n    const codeSnippet = `\n            let outputIndices = ${output.offsetToIndices(`global_idx * ${components}`)};\n            let batch = ${output.indicesGet('outputIndices', 0)};\n            let d1 = ${output.indicesGet('outputIndices', channelDim)};\n            let r = ${output.indicesGet('outputIndices', rowDim)};\n            let c = ${output.indicesGet('outputIndices', colDim)};\n            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n            let dyRCorner = dyCorner.x;\n            let dyCCorner = dyCorner.y;\n            let groupId = d1 / uniforms.output_channels_per_group;\n            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n            // ? = to be determined. : = across all values in that axis.\n            var dotProd = ${output.type.value}(0.0);\n            var wR: u32 = 0;\n            if (uniforms.dilations.x == 1) {\n              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0\n              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);\n            }\n            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n              if (wR % uniforms.dilations.x != 0) {\n                continue;\n              }\n              let dyR = (${dataType}(dyRCorner) + ${dataType}(wR)) / ${dataType}(uniforms.strides[0]);\n              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n              if (dyR < 0.0 || dyR >= ${dataType}(uniforms.Dy_shape[${rowDim}]) || fract(dyR) > 0.0 ||\n                  wRPerm < 0) {\n                continue;\n              }\n              let idyR: u32 = u32(dyR);\n              var wC: u32 = 0;\n              if (uniforms.dilations.y == 1) {\n                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0\n                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);\n              }\n\n              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n                if (wC % uniforms.dilations.y != 0) {\n                  continue;\n                }\n                let dyC = (${dataType}(dyCCorner) + ${dataType}(wC)) / ${dataType}(uniforms.strides.y);\n                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n                if (dyC < 0.0 || dyC >= ${dataType}(uniforms.Dy_shape[${colDim}]) ||\n                    fract(dyC) > 0.0 || wCPerm < 0) {\n                  continue;\n                }\n                let idyC: u32 = u32(dyC);\n                var inputChannel = groupId * uniforms.input_channels_per_group;\n                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + ${aComponents}) {\n                  let xValue = ${\n                    isChannelsLast\n                      ? dy.getByOffset(\n                          `${dy.indicesToOffset(`${dy.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${aComponents}`,\n                        )\n                      : dy.get('batch', 'inputChannel', 'idyR', 'idyC')\n                  };\n                  ${calculateResult()}\n                  inputChannel = inputChannel + ${aComponents};\n                }\n                wC = wC + uniforms.strides.y - 1;\n              }\n              wR = wR + uniforms.strides[0] - 1;\n            }\n            let value = dotProd${hasBias ? ` + bias[d1 / ${components}]` : ''};\n            ${output.setByOffset('global_idx', 'value')};\n          `;\n\n    return `\n    ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')};\n    ${codeSnippet}}`;\n  };\n\n  return {\n    name: 'ConvTranspose2D',\n    shaderCache: {\n      hint: `${attributes.cacheKey};${aComponents}${bComponents}${components}${outputChannelsPerGroup === 1}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      dispatchGroup: { x: dispatch[0], y: dispatch[1], z: dispatch[2] },\n      outputs: [\n        {\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n        },\n      ],\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { ComputeContext } from '../types';\n\nimport { createConvTranspose2DProgramInfo } from './3rd-party/conv_backprop_webgpu';\nimport { ConvAttributes } from './conv';\nimport { parseInternalActivationAttributes } from './fuse-utils';\nimport { createTransposeProgramInfo } from './transpose';\n\nconst computeTotalPad = (\n  inDim: number,\n  stride: number,\n  adj: number,\n  kernel: number,\n  dilation: number,\n  outSize: number,\n) => (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads = (\n  inputShape: readonly number[],\n  kernelShape: readonly number[],\n  dilations: readonly number[],\n  autoPad: string,\n  group: number,\n  pads: number[],\n  strides: readonly number[],\n  isChannelLast: boolean,\n  outputPadding: number[],\n  outputShape: number[],\n) => {\n  const spatialRank = inputShape.length - 2;\n  const updateOutputShape = outputShape.length === 0;\n  if (outputPadding.length < spatialRank) {\n    outputPadding.push(...Array(spatialRank - outputPadding.length).fill(0));\n  }\n  const batchSize = inputShape[0];\n  const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\n  for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\n    const inSize = inputShape[j];\n    const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\n    const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\n    distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n    if (updateOutputShape) {\n      outputShape.push(\n        strides[i] * (inSize - 1) +\n          outputPadding[i] +\n          (kernelShape[j] - 1) * dilations[i] +\n          1 -\n          pads[i] -\n          pads[i + spatialRank],\n      );\n    }\n  }\n  outputShape.splice(0, 0, batchSize);\n  outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n};\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(\n  attributes: T,\n  inputs: readonly TensorView[],\n): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 1) === 0) {\n    kernelShape.length = 0;\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const isChannelsLast = attributes.format === 'NHWC';\n  kernelShape.splice(0, 0, inputs[1].dims[0]);\n  kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const outputPadding = attributes.outputPadding.slice();\n  const inputShape = inputs[0].dims;\n  let dilations = attributes.dilations.slice();\n  if (dilations.reduce((a, b) => a + b, 0) === 0) {\n    const spatialRank = inputs[0].dims.length - 2;\n    dilations = new Array(spatialRank).fill(1);\n  }\n  let strides = attributes.strides.slice();\n  if (strides.reduce((a, b) => a + b, 0) === 0) {\n    const spatialRank = inputs[0].dims.length - 2;\n    strides = new Array(spatialRank).fill(1);\n  }\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n    inputShape,\n    kernelShape,\n    dilations,\n    attributes.autoPad,\n    attributes.group,\n    pads,\n    strides,\n    isChannelsLast,\n    outputPadding,\n    outputShape,\n  );\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, { kernelShape, pads, outputPadding, outputShape, dilations, strides });\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][\n    typeof attributes.autoPad == 'undefined' ? 0 : (attributes.autoPad as number)\n  ];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernelShape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.wIsConst as () => boolean)();\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\n  const outputShape = attributes.outputShape as [number, number];\n  return {\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes,\n    cacheKey: `${attributes.format};${activationAttributes.activation};`,\n  };\n};\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\n  // wrong dilations dimension\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\n  // Wrong strides dimension\n  if (stridesSet && attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\n  if (\n    kernelShapeSet &&\n    attributes.kernelShape.length !== 0 &&\n    attributes.kernelShape.length !== inputs[1].dims.length - 2\n  ) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n};\n\nconst convTranspose2d = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: ConvTransposeAttributes,\n  squeezeOutputShapeFunction?: (shape: readonly number[]) => number[],\n): void => {\n  // STEP.1: transpose weight\n  const transposedWeight =\n    (context.kernelCustomData.wT as TensorView | undefined) ??\n    context.compute(createTransposeProgramInfo(inputs[1], [2, 3, 0, 1]), {\n      inputs: [1],\n      outputs: [attributes.wIsConst ? -2 : -1],\n    })[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convTransposeInputs = [inputs[0], transposedWeight];\n  if (inputs.length === 3) {\n    convTransposeInputs.push(inputs[2]);\n  }\n  context.compute(createConvTranspose2DProgramInfo(convTransposeInputs, attributes, squeezeOutputShapeFunction), {\n    inputs: convTransposeInputs,\n  });\n};\n\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n\n  const inputs = [\n    context.inputs[0].reshape(\n      isChannelLast\n        ? // [N, W, C] -> [N, H=1, W, C]\n          [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]]\n        : // [N, C, W] -> [N, C, H=1, W]\n          [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]],\n    ),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]]),\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  let kernelShape = attributes.kernelShape;\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\n    kernelShape = [context.inputs[1].dims[2]];\n  }\n  let dilations = attributes.dilations;\n  if (dilations.length === 0 || dilations[0] === 0) {\n    dilations = [1];\n  }\n  let strides = attributes.strides;\n  if (strides.length === 0 || strides[0] === 0) {\n    strides = [1];\n  }\n  let pads = attributes.pads;\n  if (pads.length === 0) {\n    pads = [0, 0];\n  }\n  pads = [0, pads[0], 0, pads[1]];\n  strides = [1].concat(strides);\n  dilations = [1].concat(dilations);\n  kernelShape = [1].concat(kernelShape);\n  let outputPadding = attributes.outputPadding;\n  outputPadding = [0].concat(outputPadding);\n  const adjustedAttributes = getAdjustedConvTransposeAttributes(\n    { ...attributes, pads, strides, dilations, kernelShape, outputPadding },\n    inputs,\n  );\n\n  convTranspose2d(context, inputs, adjustedAttributes, (outputShape) =>\n    isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : [outputShape[0], outputShape[1], outputShape[3]],\n  );\n};\n\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    convTranspose1d(context, attributes);\n  } else {\n    const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, context.inputs);\n    convTranspose2d(context, context.inputs, adjustedAttributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, getElementAt, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface CumSumAttributes extends AttributeWithCacheKey {\n  readonly exclusive: boolean;\n  readonly reverse: boolean;\n}\nconst createCumsumProgramInfo = (\n  inputType: number,\n  inputShape: readonly number[],\n  axisInput: TensorView,\n  attributes: CumSumAttributes,\n): ProgramInfo => {\n  const outputSize = ShapeUtil.size(inputShape); // outputShape is same as inputShape.\n  const rank = inputShape.length; // input/output rank\n  const input = inputVariable('input', inputType, rank);\n  const output = outputVariable('output', inputType, rank);\n  const axisValue =\n    axisInput.dataType === DataType.int32 ? axisInput.getInt32Array()[0] : Number(axisInput.getBigInt64Array()[0]);\n  const axis = ShapeUtil.normalizeAxis(axisValue, rank);\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const index = ` i32(${input.indicesGet('inputIndices', 'uniforms.axis')}) `;\n    const max = getElementAt('uniforms.input_shape', 'uniforms.axis', rank);\n    const lowerLimit = attributes.reverse ? index + (attributes.exclusive ? ' + 1' : '') : '0';\n    const upperLimit = attributes.reverse ? max : index + (attributes.exclusive ? '' : ' + 1');\n    return `\n                ${shaderHelper\n                  .registerUniform('outputSize', 'u32')\n                  .registerUniform('axis', 'u32')\n                  .declareVariables(input, output)}\n                ${shaderHelper.mainStart()}\n                  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n                  var inputIndices = ${output.offsetToIndices('global_idx')};\n                  var sum = ${output.type.value}(0);\n                  let first : i32 = ${lowerLimit};\n                  let last : i32 = ${upperLimit};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${input.indicesSet('inputIndices', 'uniforms.axis', 'u32(i)')};\n                    sum = sum + ${input.getByIndices('inputIndices')};\n                  }\n                  ${output.setByOffset('global_idx', 'sum')};\n                }`;\n  };\n  return {\n    name: 'CumSum',\n    shaderCache: { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n    getRunData: () => ({\n      outputs: [{ dims: inputShape, dataType: inputType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        { type: DataType.uint32, data: axis },\n        ...createTensorShapeVariables(inputShape, inputShape),\n      ],\n    }),\n    getShaderSource,\n  };\n};\n\nexport const cumsum = (context: ComputeContext, attributes: CumSumAttributes): void => {\n  const inputShape = context.inputs[0].dims;\n  const inputType = context.inputs[0].dataType;\n  const axis = context.inputs[1];\n  context.compute(createCumsumProgramInfo(inputType, inputShape, axis, attributes), { inputs: [0] });\n};\n\nexport const parseCumSumAttributes = (attributes: Record<string, unknown>): CumSumAttributes => {\n  const exclusive = (attributes.exclusive as number) === 1;\n  const reverse = (attributes.reverse as number) === 1;\n  return createAttributeWithCacheKey({ exclusive, reverse });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC' | 'NCHW';\n}\n\nexport interface DepthToSpaceAttributes extends FormatAttributes, AttributeWithCacheKey {\n  readonly blocksize: number;\n  readonly mode: string;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('DepthToSpace requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('DepthToSpace requires 4D input.');\n  }\n};\n\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\n    var a: ${input.type.indices};`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(input.indicesSet('a', perm[i], `i[${i}]`));\n  }\n  reverseFunc.push('return a;}');\n  return reverseFunc.join('\\n');\n};\n\nconst createDepthToSpaceProgramInfo = (inputTensor: TensorView, attributes: DepthToSpaceAttributes): ProgramInfo => {\n  let n: number, h: number, w: number, c: number;\n  let shape: number[];\n  let perm: number[];\n  const isChannelLast = attributes.format === 'NHWC';\n  const blocksize = attributes.blocksize;\n  const isDCRmode = attributes.mode === 'DCR';\n  if (isChannelLast) {\n    [n, h, w, c] = inputTensor.dims;\n    shape = isDCRmode\n      ? [n, h, w, blocksize, blocksize, c / blocksize ** 2]\n      : [n, h, w, c / blocksize ** 2, blocksize, blocksize];\n    perm = isDCRmode ? [0, 1, 3, 2, 4, 5] : [0, 1, 4, 2, 5, 3];\n  } else {\n    [n, h, w, c] = [inputTensor.dims[0], inputTensor.dims[2], inputTensor.dims[3], inputTensor.dims[1]];\n    shape = isDCRmode\n      ? [n, blocksize, blocksize, c / blocksize ** 2, h, w]\n      : [n, c / blocksize ** 2, blocksize, blocksize, h, w];\n    perm = isDCRmode ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n  }\n  const reshapedInputTensor = inputTensor.reshape(shape);\n  const reshapedInputRank = reshapedInputTensor.dims.length;\n  const inputDataType = inputTensor.dataType;\n\n  const reshapedInput = inputVariable('a', inputDataType, reshapedInputRank);\n  const permedOutput = outputVariable('output', inputDataType, reshapedInputRank);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(reshapedInput, permedOutput)}\n\n  ${permFunctionBody(perm, reshapedInputRank, reshapedInput, permedOutput)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let indices = ${permedOutput.offsetToIndices('global_idx')};\n    let aIndices = perm(indices);\n\n    ${permedOutput.setByOffset('global_idx', reshapedInput.getByIndices('aIndices'))}\n  }`;\n\n  return {\n    name: 'DepthToSpace',\n    shaderCache: {\n      hint: `${inputTensor.dims};${attributes.blocksize};${attributes.mode}`,\n      inputDependencies: ['rank'],\n    },\n    getRunData: (inputs) => {\n      const outputShape = isChannelLast\n        ? [n, h * blocksize, w * blocksize, c / blocksize ** 2]\n        : [n, c / blocksize ** 2, h * blocksize, w * blocksize];\n      const outputSize = ShapeUtil.size(outputShape);\n      const shapeBeforePerm = reshapedInputTensor.dims;\n      const shapeAfterPerm = ShapeUtil.sortBasedOnPerm(shapeBeforePerm, perm);\n      return {\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms: [\n          { type: DataType.uint32, data: outputSize },\n          ...createTensorShapeVariables(shapeBeforePerm, shapeAfterPerm),\n        ],\n      };\n    },\n    getShaderSource,\n  };\n};\n\nexport const depthToSpace = (context: ComputeContext, attributes: DepthToSpaceAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createDepthToSpaceProgramInfo(context.inputs[0], attributes));\n};\n\nexport const parseDepthToSpaceAttributes = (attributes: Record<string, unknown>): DepthToSpaceAttributes =>\n  createAttributeWithCacheKey({\n    blocksize: attributes.blocksize as number,\n    mode: attributes.mode as string,\n    format: attributes.format as 'NHWC' | 'NCHW',\n  });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface EinsumAttributes extends AttributeWithCacheKey {\n  readonly equation: string;\n}\n// The equation attribute value is a string which consists of left hand side (LHS) and optionally right hand side (RHS)\n// separated by '->'. Ex. \"ij,jk -> ik\" expresses matrix multiplication\n//     \"ij->ji\" expresses matrix transpose\n//      \"ii->i\" diagonal elements of a square matrix\n// LHS consists of a sequence of terms separated by commas. Each term corresponds to an input variable.\n// Each symbol corresponds to a dimension in the input variable. The symbol can be either a letter, 'a' to 'z' or 'A' to\n// 'Z' or '...' to represent arbitrary dimensions.\n\nconst symbolPattern = '[a-zA-Z]|\\\\.\\\\.\\\\.'; // The pattern each symbol in each term in the symbolic equation should match\nconst termPattern = '(' + symbolPattern + ')+'; // The pattern each term in the symbolic equation should match\nconst termPatternOnly = '^' + termPattern + '$'; // The patterns only matchs a term begin to end.\nconst lhsPattern = '(' + termPattern + ',)*' + termPattern; // The pattern the LHS should match\nconst lhsPatternOnly = '^' + lhsPattern + '$'; // The patterns only matchs a LHS begin to end.\n\ninterface SymbolInfo {\n  count: number; // Symbol corresponding to a dimmension of an input\n  inputIndices: number[]; // Number of input variables the symbol corresponds to\n  dimValue: number; // Number of dimensions the symbol corresponds to\n}\n\nclass EinsumTerm {\n  constructor(inputIndex = -1) {\n    this.symbolToIndices = new Map<string, number[]>();\n    this.inputIndex = inputIndex;\n  }\n\n  // Add a symbol to the term\n  addSymbol(symbol: string, index: number) {\n    let value = this.symbolToIndices.get(symbol);\n    if (value === undefined) {\n      value = [index];\n    } else {\n      value.push(index);\n    }\n    this.symbolToIndices.set(symbol, value);\n  }\n\n  symbolToIndices: Map<string, number[]>; // Map from symbol to dimensions of the input corresponding to the term\n  inputIndex: number; // -1 for output and 0, 1, 2, ... for inputs\n}\n\nclass EinsumEquation {\n  constructor(\n    inputs: readonly TensorView[],\n    public readonly equation: string,\n  ) {\n    this.hasEllipsis = false;\n    this.symbolToInfo = new Map<string, SymbolInfo>();\n    this.lhs = new Array<EinsumTerm>();\n    this.outputDims = [];\n    // As rhs needs to be updated allow using let instead of const for both lhs and rhs.\n    // eslint-disable-next-line prefer-const\n    let [lhs, rhs] = equation.includes('->') ? equation.split('->', 2) : [equation, ''];\n    if (!lhs.match(RegExp(lhsPatternOnly))) {\n      throw new Error('Invalid LHS term');\n    }\n    const inputTerms = lhs.split(',');\n    inputTerms.forEach((inputTerm, index) => {\n      const dims = inputs[index].dims.slice();\n      if (!inputTerm.match(RegExp(termPatternOnly))) {\n        throw new Error('Invalid LHS term');\n      }\n      const einsumTerm = this.processTerm(inputTerm, true, dims, index);\n      this.lhs.push(einsumTerm);\n    });\n\n    // Initialize the RHS if not specified\n    if (rhs === '') {\n      // Construct RHS from LHS terms/symbols\n      rhs += [...this.symbolToInfo.entries()]\n        .filter(([sym, info]) => info.count === 1 || sym === '...')\n        .map(([sym]) => sym)\n        .join('');\n    } else {\n      if (!rhs.match(RegExp(termPattern))) {\n        throw new Error('Invalid RHS');\n      }\n    }\n\n    // Compute output dims\n    const rhsSymbols = rhs.match(RegExp(symbolPattern, 'g'));\n    rhsSymbols?.forEach((symbol) => {\n      if (symbol === '...') {\n        this.outputDims = this.outputDims.concat(this.ellipsisDims);\n      } else {\n        const info = this.symbolToInfo.get(symbol);\n        if (info === undefined) {\n          throw new Error('Invalid RHS symbol');\n        }\n        this.outputDims.push(info.dimValue);\n      }\n    });\n    this.rhs = this.processTerm(rhs, false, this.outputDims);\n  } // End of EinsumEqation constructor\n\n  // Add a symbol to the equation\n  addSymbol(symbol: string, dimValue: number, inputIndex: number) {\n    let info = this.symbolToInfo.get(symbol);\n    if (info !== undefined) {\n      if (info.dimValue !== dimValue && info.count !== 1) {\n        throw new Error('Dimension mismatch');\n      } else {\n        info.count++;\n        info.inputIndices.push(inputIndex);\n      }\n    } else {\n      info = { count: 1, dimValue, inputIndices: [inputIndex] };\n    }\n    this.symbolToInfo.set(symbol, info);\n  }\n\n  // Process one input/output term\n  processTerm(term: string, isInput: boolean, dims: readonly number[], index = -1): EinsumTerm {\n    const rank = dims.length;\n    let ellipsis = false;\n    let ellipsisDims = [];\n    let nextDim = 0;\n    // For output empty string is allowed because the output may be reduced to a scalar value\n    if (!term.match(RegExp(termPatternOnly)) && !isInput && term !== '') {\n      throw new Error('Invalid LHS term');\n    }\n    const indexSymbols = term.match(RegExp(symbolPattern, 'g'));\n    const einsumTerm = new EinsumTerm(index);\n    // symbol can be either a lettre, 'a' to 'z' or 'A' to 'Z', or '...'\n    indexSymbols?.forEach((symbol: string, i: number) => {\n      if (symbol === '...') {\n        if (ellipsis) {\n          throw new Error('Only one ellipsis is allowed per input term');\n        }\n        ellipsis = true;\n        const ellipsisDimLength = rank - indexSymbols.length + 1;\n        if (ellipsisDimLength < 0) {\n          throw new Error('Ellipsis out of bounds');\n        }\n        ellipsisDims = dims.slice(nextDim, nextDim + ellipsisDimLength);\n        if (this.hasEllipsis) {\n          if (\n            this.ellipsisDims.length !== ellipsisDims.length ||\n            this.ellipsisDims.toString() !== ellipsisDims.toString()\n          ) {\n            throw new Error('Ellipsis dimensions mismatch');\n          }\n        } else if (isInput) {\n          this.hasEllipsis = true;\n          this.ellipsisDims = ellipsisDims;\n        } else {\n          throw new Error('Ellipsis must be specified in the LHS');\n        }\n        // Add '0', '1', '2', '3', '4', etc to represent ellipsis dimensions to avoid special handling\n        for (let j = 0; j < ellipsisDims.length; j++) {\n          const symbol = String.fromCharCode('0'.charCodeAt(0) + j);\n          einsumTerm.addSymbol(symbol, i + j);\n          this.addSymbol(symbol, dims[nextDim++], index);\n        }\n      } else {\n        einsumTerm.addSymbol(symbol, i + (this.hasEllipsis ? this.ellipsisDims.length - 1 : 0));\n        this.addSymbol(symbol, dims[nextDim++], index);\n      }\n    });\n    return einsumTerm;\n  }\n\n  symbolToInfo: Map<string, SymbolInfo>; // All symbols in the equation\n  hasEllipsis: boolean; // The equation has ellipsis or not\n  ellipsisDims: number[]; // The dimensions of the equation ellipsis corresponds to.\n  lhs: EinsumTerm[]; // Terms on the left-hand side of the equation\n  rhs: EinsumTerm; // Term on the right-hand side of the equation\n  outputDims: number[]; // Output dimensions of the equation\n} // End of class EinsumEquation\n\nconst appendMax = (name: string): string => name + '_max';\n\nconst createEinsumProgramInfo = (\n  inputShapes: Array<readonly number[]>,\n  dataType: number,\n  einsumEquation: EinsumEquation,\n  outputShape: readonly number[],\n): ProgramInfo => {\n  const ranks = inputShapes.map((dims) => dims.length);\n  const inputVars = ranks.map((rank, index) => inputVariable(`input${index}`, dataType, rank));\n  const outputSize = ShapeUtil.size(outputShape);\n  const output = outputVariable('output', dataType, outputShape.length);\n  const uniformsSymbols = [...einsumEquation.symbolToInfo.keys()].filter(\n    (symbol) => !einsumEquation.rhs.symbolToIndices.has(symbol),\n  );\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const idxCopy: string[] = [];\n    const initProd = 'var prod = 1.0;';\n    const initSum = 'var sum = 0.0;';\n    const updateSum = 'sum += prod;';\n    const reduceOpsSetIndices: string[] = [];\n    const reduceOpsLoopHeaders: string[] = [];\n    const reduceOpsLoopFooters: string[] = [];\n    const reduceOpCompute: string[] = [];\n    const isReduceOpsWithoutLoop = einsumEquation.symbolToInfo.size === einsumEquation.rhs.symbolToIndices.size;\n    einsumEquation.symbolToInfo.forEach((info, symbol) => {\n      if (einsumEquation.rhs.symbolToIndices.has(symbol)) {\n        const outputIndex = einsumEquation.rhs.symbolToIndices.get(symbol)?.[0];\n        if (outputIndex !== undefined) {\n          einsumEquation.lhs.forEach((term, i) => {\n            if (info.inputIndices.includes(i)) {\n              const indices = term.symbolToIndices.get(symbol);\n              if (indices === undefined) {\n                throw new Error('Invalid symbol error');\n              }\n              indices.forEach((index) => {\n                idxCopy.push(\n                  `${inputVars[i].indicesSet(\n                    `input${i}Indices`,\n                    index,\n                    output.indicesGet('outputIndices', outputIndex),\n                  )}`,\n                );\n              });\n            }\n          });\n        }\n      } else {\n        einsumEquation.lhs.forEach((term, i) => {\n          if (info.inputIndices.includes(i)) {\n            const indices = term.symbolToIndices.get(symbol);\n            if (indices === undefined) {\n              throw new Error('Invalid symbol error');\n            }\n            indices.forEach((index) => {\n              reduceOpsSetIndices.push(`${inputVars[i].indicesSet(`input${i}Indices`, index, `${symbol}`)}`);\n            });\n            reduceOpCompute.push(`prod *= ${inputVars[i].getByIndices(`input${i}Indices`)};`);\n          }\n        });\n        reduceOpsLoopHeaders.push(\n          `for(var ${symbol}: u32 = 0; ${symbol} < uniforms.${appendMax(symbol)}; ${symbol}++) {`,\n        );\n        reduceOpsLoopFooters.push('}');\n      }\n    });\n    const reduceOps = isReduceOpsWithoutLoop\n      ? [\n          ...idxCopy,\n          `let sum = ${inputVars.map((inputVar, i) => inputVar.getByIndices(`input${i}Indices`)).join(' * ')};`,\n        ]\n      : [\n          ...idxCopy,\n          initSum,\n          ...reduceOpsLoopHeaders,\n          ...reduceOpsSetIndices,\n          initProd,\n          ...reduceOpCompute,\n          updateSum,\n          ...reduceOpsLoopFooters,\n        ];\n    return `\n            ${shaderHelper\n              .registerUniforms(uniformsSymbols.map((symbol) => ({ name: `${appendMax(symbol)}`, type: 'u32' })))\n              .registerUniform('outputSize', 'u32')\n              .declareVariables(...inputVars, output)}\n\n            ${shaderHelper.mainStart()}\n            ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n            var outputIndices = ${output.offsetToIndices('global_idx')};\n            ${inputVars.map((_var, i) => `var input${i}Indices: ${inputVars[i].type.indices};`).join('\\n')}\n            ${reduceOps.join('\\n')};\n            ${output.setByOffset('global_idx', 'sum')};\n          }`;\n  };\n  return {\n    name: 'Einsum',\n    shaderCache: { hint: einsumEquation.equation, inputDependencies: inputShapes.map(() => 'rank') },\n    getRunData: () => {\n      // The symbols from uniformSymbols array are guaranteed to exist in einsumEquations.symbolToInfo map. The\n      // filter is added to make sure that dimValue is never 0.\n      const programUniformsInit: ProgramUniform[] = uniformsSymbols\n        .filter((symbol) => einsumEquation.symbolToInfo.has(symbol))\n        .map((symbol) => ({ type: DataType.uint32, data: einsumEquation.symbolToInfo.get(symbol)?.dimValue || 0 }));\n      programUniformsInit.push({ type: DataType.uint32, data: outputSize });\n      const programUniforms: ProgramUniform[] = inputShapes\n        .map((dims, _) => [...createTensorShapeVariables(dims)])\n        .reduce((acc, inputProgramUniforms) => acc.concat(inputProgramUniforms), programUniformsInit);\n      programUniforms.push(...createTensorShapeVariables(outputShape));\n      return {\n        outputs: [{ dims: outputShape, dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      };\n    },\n    getShaderSource,\n  };\n};\n\nexport const einsum = (context: ComputeContext, attributes: EinsumAttributes): void => {\n  const einsumEquation = new EinsumEquation(context.inputs, attributes.equation);\n  const outputShape = einsumEquation.outputDims;\n  const inputShapes = context.inputs.map((input, _) => input.dims);\n  context.compute(createEinsumProgramInfo(inputShapes, context.inputs[0].dataType, einsumEquation, outputShape));\n};\n\nexport const parseEinsumAttributes = (attributes: Record<string, unknown>): EinsumAttributes => {\n  const equation = (attributes.equation as string).replace(/\\s+/g, '');\n  return createAttributeWithCacheKey({ equation });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Expand requires 2 input.');\n  }\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\n    if (\n      shape[shapeIndex] !== inputShape[inputShapeIndex] &&\n      shape[shapeIndex] !== 1 &&\n      inputShape[inputShapeIndex] !== 1\n    ) {\n      throw new Error('Expand requires shape to be broadcastable to input');\n    }\n  }\n};\n\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\n  const diff = shape1.length - shape2.length;\n  const shape: number[] = [];\n  for (let i = 0; i < diff; ++i) {\n    shape.push(shape1[i]);\n  }\n  for (let i = 0; i < shape2.length; ++i) {\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\n  }\n  return shape;\n};\n\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\n  inputShape.length > shape.length ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\n\nconst createExpandProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\n  const dataType = inputs[0].dataType;\n  const isBoolOrScalar = dataType === DataType.bool || ShapeUtil.size(inputShape) === 1;\n  const iComponents =\n    dataType === DataType.bool ? 4 : inputShape.length > 0 && inputShape[inputShape.length - 1] % 4 === 0 ? 4 : 1;\n  const components = isBoolOrScalar\n    ? 4\n    : outputShape.length > 0 && outputShape[outputShape.length - 1] % 4 === 0\n      ? 4\n      : 1;\n  const outputSize = Math.ceil(ShapeUtil.size(outputShape) / components);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const input = inputVariable('input', dataType, inputShape.length, iComponents);\n    const output = outputVariable('output', dataType, outputShape.length, components);\n    let assignment: string;\n    if (dataType === DataType.bool) {\n      const singleAssignment = (resStr: string, x: number, typeCast = '') => `\n          let outputIndices${x} = ${output.offsetToIndices(`outputOffset + ${x}u`)};\n          let offset${x} = ${input.broadcastedIndicesToOffset(`outputIndices${x}`, output)};\n          let index${x} = offset${x} / 4u;\n          let component${x} = offset${x} % 4u;\n          ${resStr}[${x}] = ${typeCast}(${input.getByOffset(`index${x}`)}[component${x}]);\n        `;\n      assignment = `\n        let outputOffset = global_idx * ${components};\n        var data = vec4<u32>(0);\n        ${singleAssignment('data', 0, 'u32')}\n        ${singleAssignment('data', 1, 'u32')}\n        ${singleAssignment('data', 2, 'u32')}\n        ${singleAssignment('data', 3, 'u32')}\n        ${output.setByOffset('global_idx', 'data')}\n      }`;\n    } else {\n      assignment = `\n        let outputIndices = ${output.offsetToIndices(`global_idx * ${components}`)};\n        let inputOffset = ${input.broadcastedIndicesToOffset('outputIndices', output)};\n        let data = ${output.type.value}(${input.getByOffset(`inputOffset / ${iComponents}`)});\n        ${output.setByOffset('global_idx', 'data')}\n      }`;\n    }\n    return `\n    ${shaderHelper.registerUniform('vec_size', 'u32').declareVariables(input, output)}\n    ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n    ${assignment}`;\n  };\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    ...createTensorShapeVariables(inputShape, outputShape),\n  ];\n  return {\n    name: 'Expand',\n    shaderCache: { hint: `${outputShape.length};${iComponents}${components}`, inputDependencies: ['rank'] },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const expand = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createExpandProgramInfo(context.inputs), { inputs: [0] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport {\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglValueType,\n  UniformsArrayType,\n  WORKGROUP_SIZE,\n} from './common';\nimport * as unary from './unary-op';\n\n// GELU is defined as Y=0.5*X*(1+tanh(0.797885*X+0.035677*X*X*X)), where X may pre-add a bias.\n\nconst createFastGeluProgramInfo = (inputTensors: readonly TensorView[]): ProgramInfo => {\n  const dataType = inputTensors[0].dataType;\n  const outputSize = ShapeUtil.size(inputTensors[0].dims);\n  const biasLength = ShapeUtil.size(inputTensors[1].dims);\n  // can only use vec4 when bias length is multiple of 4\n  const useVec4 = biasLength % 4 === 0;\n  const getShaderSource = (shaderHelper: ShaderHelper): string => {\n    const x = inputVariable('x', dataType, [1], 4);\n    const bias = inputVariable('bias', dataType, [1], 4);\n    const y = outputVariable('y', dataType, [1], 4);\n\n    const uniforms: UniformsArrayType = [\n      { name: 'output_vec_size', type: 'u32' },\n      { name: 'bias_size', type: 'u32' },\n    ];\n\n    const singleElementBias = (i: 0 | 1 | 2 | 3) => `\n      let bias${i}_offset: u32 = (global_idx * 4 + ${i}) % uniforms.bias_size;\n      let bias${i} = ${bias.getByOffset(`bias${i}_offset / 4`)}[bias${i}_offset % 4];`;\n    const biasGetExpression = useVec4\n      ? `\n      let bias = ${bias.getByOffset('global_idx % (uniforms.bias_size / 4)')};`\n      : `${singleElementBias(0)}${singleElementBias(1)}${singleElementBias(2)}${singleElementBias(3)}\n      let bias = ${x.type.value}(bias0, bias1, bias2, bias3);`;\n\n    return `${shaderHelper.registerUniforms(uniforms).declareVariables(x, bias, y)}\n\n    ${unary.fastGeluImpl(tensorTypeToWsglValueType(dataType))}\n\n    ${shaderHelper.mainStart(WORKGROUP_SIZE)}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_vec_size')}\n\n      let x = ${x.getByOffset('global_idx')};\n      ${biasGetExpression}\n      let x_in = x + bias;\n      ${y.setByOffset('global_idx', unary.fastGeluExpression('x_in'))}\n    }`;\n  };\n\n  return {\n    name: 'FastGeluWithBias',\n    shaderCache: { hint: `${useVec4}`, inputDependencies: ['type', 'type'] },\n    getShaderSource,\n    getRunData: (inputs) => ({\n      outputs: [{ dims: inputs[0].dims, dataType: inputs[0].dataType }],\n      programUniforms: [\n        { type: DataType.uint32, data: Math.ceil(outputSize / 4) },\n        { type: DataType.uint32, data: biasLength },\n      ],\n      dispatchGroup: { x: Math.ceil(outputSize / WORKGROUP_SIZE / 4) },\n    }),\n  };\n};\n\nexport const fastGelu = (context: ComputeContext): void => {\n  if (context.inputs.length < 2 || ShapeUtil.size(context.inputs[1].dims) === 0) {\n    unary.fastGelu(context);\n  } else {\n    context.compute(createFastGeluProgramInfo(context.inputs));\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface GatherAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n};\n\nconst createGatherProgramInfo = (inputs: readonly TensorView[], attributes: GatherAttributes): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const indicesShape = inputs[1].dims;\n\n  const inputRank = inputShape.length;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n\n  const outputShape = inputShape.slice(0);\n  outputShape.splice(axis, 1, ...indicesShape);\n\n  const axisDimLimit = inputShape[axis];\n  const components = inputs[0].dataType === DataType.bool ? 4 : 1;\n  const outputSize = Math.ceil(ShapeUtil.size(outputShape) / components);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: axisDimLimit },\n    { type: DataType.uint32, data: axis },\n    ...createTensorShapeVariables(inputs[0].dims, inputs[1].dims, outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const data = inputVariable('data', inputs[0].dataType, inputs[0].dims.length, components);\n    const indices = inputVariable('inputIndices', inputs[1].dataType, inputs[1].dims.length);\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length, components);\n\n    const calcDataIndices = (x: number | string): string => {\n      const indicesRank = indicesShape.length;\n      let calcStr = `var indicesIndices${x}  = ${indices.type.indices}(0);`;\n      for (let i = 0; i < indicesRank; i++) {\n        calcStr += `${indicesRank > 1 ? `indicesIndices${x}[${i}]` : `indicesIndices${x}`} = ${\n          outputShape.length > 1 ? `outputIndices${x}[uniforms.axis + ${i}]` : `outputIndices${x}`\n        };`;\n      }\n      calcStr += `\n          var idx${x} = ${indices.getByIndices(`indicesIndices${x}`)};\n          if (idx${x} < 0) {\n            idx${x} = idx${x} + uniforms.axisDimLimit;\n          }\n          var dataIndices${x} : ${data.type.indices};\n        `;\n      for (let i = 0, j = 0; i < inputRank; i++) {\n        if (i === axis) {\n          calcStr += `${inputRank > 1 ? `dataIndices${x}[${i}]` : `dataIndices${x}`} = u32(idx${x});`;\n          j += indicesRank;\n        } else {\n          calcStr += `${inputRank > 1 ? `dataIndices${x}[${i}]` : `dataIndices${x}`} = ${\n            outputShape.length > 1 ? `outputIndices${x}[${j}]` : `outputIndices${x}`\n          };`;\n          j++;\n        }\n      }\n      return calcStr;\n    };\n    let assignment: string;\n    if (inputs[0].dataType === DataType.bool) {\n      const singleAssignment = (resStr: string, x: number, typeCast = '') => `\n          let outputIndices${x} = ${output.offsetToIndices(`outputOffset + ${x}u`)};\n          ${calcDataIndices(x)};\n          let offset${x} = ${data.indicesToOffset(`dataIndices${x}`)};\n          let index${x} = offset${x} / 4u;\n          let component${x} = offset${x} % 4u;\n          ${resStr}[${x}] = ${typeCast}(${data.getByOffset(`index${x}`)}[component${x}]);\n        `;\n      assignment = `\n        let outputOffset = global_idx * ${components};\n        var value = vec4<u32>(0);\n        ${singleAssignment('value', 0, 'u32')}\n        ${singleAssignment('value', 1, 'u32')}\n        ${singleAssignment('value', 2, 'u32')}\n        ${singleAssignment('value', 3, 'u32')}\n        ${output.setByOffset('global_idx', 'value')}\n      `;\n    } else {\n      assignment = `\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n      ${calcDataIndices('')};\n      let value = ${data.getByIndices('dataIndices')};\n      ${output.setByOffset('global_idx', 'value')};\n      `;\n    }\n    return `\n      ${shaderHelper\n        .registerUniform('outputSize', 'u32')\n        .registerUniform('axisDimLimit', 'i32')\n        .registerUniform('axis', 'u32')\n        .declareVariables(data, indices, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n        ${assignment}\n      }`;\n  };\n  return {\n    name: 'Gather',\n    shaderCache: { hint: attributes.cacheKey, inputDependencies: ['rank', 'rank'] },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseGatherAttributes = (attributes: Record<string, unknown>): GatherAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n\nexport const gather = (context: ComputeContext, attributes: GatherAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n  context.compute(createGatherProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper, UniformsArrayType } from './common';\n\nexport interface GatherNDAttributes extends AttributeWithCacheKey {\n  readonly batchDims: number;\n}\n\nconst computeSliceOffsets = (\n  context: ComputeContext,\n  indicesData: TensorView,\n  sizesFromSliceDimsData: number[],\n  batchDims: number,\n  inputDims: readonly number[],\n  numSlices: number,\n  numSlicesPerBatch: number,\n  inputBatchStride: number,\n  numSliceDims: number,\n) => {\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: numSlices },\n    { type: DataType.uint32, data: batchDims },\n    { type: DataType.uint32, data: inputDims },\n    { type: DataType.uint32, data: sizesFromSliceDimsData },\n    { type: DataType.uint32, data: numSlicesPerBatch },\n    { type: DataType.uint32, data: inputBatchStride },\n    { type: DataType.uint32, data: numSliceDims },\n  ];\n\n  const outputShape = [numSlices];\n  programUniforms.push(...createTensorShapeVariables(indicesData.dims, outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const indices = inputVariable('indices_data', indicesData.dataType, indicesData.dims.length);\n    const output = outputVariable('input_slice_offsets_data', DataType.uint32, 1, 1);\n    const variables = [indices, output];\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'batch_dims', type: 'u32' },\n      { name: 'input_dims', type: 'u32', length: inputDims.length },\n      { name: 'sizes_from_slice_dims_data', type: 'u32', length: sizesFromSliceDimsData.length },\n      { name: 'num_slices_per_batch', type: 'u32' },\n      { name: 'input_batch_stride', type: 'u32' },\n      { name: 'num_slice_dims', type: 'u32' },\n    ];\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    let batch_idx = global_idx / uniforms.num_slices_per_batch;\n    let base_offset = batch_idx * uniforms.input_batch_stride;\n\n    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;\n    var relative_slice_offset = 0;\n    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {\n      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);\n      let input_dim_idx = uniforms.batch_dims + dim_idx;\n      if (index < 0) {\n        ${\n          inputDims.length === 1\n            ? 'index += i32(uniforms.input_dims);'\n            : 'index += i32(uniforms.input_dims[input_dim_idx]);'\n        }\n      }\n      ${\n        sizesFromSliceDimsData.length === 1\n          ? 'relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);'\n          : 'relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);'\n      }\n    }\n\n    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);\n  }`;\n  };\n\n  return context.compute(\n    {\n      name: 'computeSliceOffsets',\n      shaderCache: { hint: `${inputDims.length}_${sizesFromSliceDimsData.length}`, inputDependencies: ['rank'] },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: context.inputs[1].dataType }],\n        dispatchGroup: { x: Math.ceil(numSlices / 64) },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [indicesData], outputs: [-1] },\n  )[0];\n};\n\nexport const gatherND = (context: ComputeContext, attributes: GatherNDAttributes) => {\n  const inputs = context.inputs;\n  const inputShape = inputs[0].dims;\n  const inputType = inputs[0].dataType;\n  const indicesShape = inputs[1].dims;\n  const numSliceDims = indicesShape[indicesShape.length - 1];\n  const numSlices = ShapeUtil.sizeToDimension(indicesShape, indicesShape.length - 1);\n  const sliceSize = ShapeUtil.sizeFromDimension(inputShape, attributes.batchDims + numSliceDims);\n  const numBatches = ShapeUtil.sizeToDimension(inputShape, attributes.batchDims);\n  const inputBatchStride = ShapeUtil.sizeFromDimension(inputShape, attributes.batchDims);\n  const numSlicesPerBatch = numSlices / numBatches;\n  const sizesFromSliceDims = new Array(numSliceDims);\n  let runningProduct = sliceSize;\n  for (let i = 0; i < numSliceDims; ++i) {\n    sizesFromSliceDims[numSliceDims - 1 - i] = runningProduct;\n    runningProduct *= inputShape[attributes.batchDims + numSliceDims - 1 - i];\n  }\n\n  const inputSliceOffsets = computeSliceOffsets(\n    context,\n    inputs[1],\n    sizesFromSliceDims,\n    attributes.batchDims,\n    inputShape,\n    numSlices,\n    numSlicesPerBatch,\n    inputBatchStride,\n    numSliceDims,\n  );\n\n  const lastIndicesDimension = attributes.batchDims + numSliceDims;\n  if (lastIndicesDimension > inputShape.length) {\n    throw new Error('last dimension of indices must not be larger than rank of input tensor');\n  }\n\n  const outputShape = indicesShape.slice(0, -1).concat(inputShape.slice(lastIndicesDimension));\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: sliceSize },\n    ...createTensorShapeVariables(inputs[0].dims, inputSliceOffsets.dims, outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const input = inputVariable('data', inputs[0].dataType, inputs[0].dims.length);\n    const indices = inputVariable('slice_offsets', DataType.uint32, inputSliceOffsets.dims.length);\n\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n    return `\n          ${shaderHelper\n            .registerUniform('output_size', 'u32')\n            .registerUniform('slice_size', 'u32')\n            .declareVariables(input, indices, output)}\n            ${shaderHelper.mainStart()}\n            ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];\n          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];\n        }`;\n  };\n  context.compute(\n    {\n      name: 'GatherND',\n      shaderCache: { hint: attributes.cacheKey, inputDependencies: ['rank', 'rank'] },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: inputType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [inputs[0], inputSliceOffsets] },\n  );\n};\n\nexport const parseGatherNDAttributes = (attributes: Record<string, unknown>): GatherNDAttributes => {\n  const batchDims = attributes.batch_dims as number;\n  return {\n    batchDims,\n    cacheKey: '',\n  };\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglValueType,\n  UniformsArrayType,\n} from './common';\n\nexport interface GatherBlockQuantizedAttributes extends AttributeWithCacheKey {\n  gatherAxis: number;\n  quantizeAxis: number;\n  blockSize: number;\n}\n\nexport const validateInputs = (inputs: readonly TensorView[], attributes: GatherBlockQuantizedAttributes): void => {\n  if (inputs.length < 3 || inputs.length > 4) {\n    throw new Error('GatherBlockQuantized requires 3 or 4 inputs.');\n  }\n  const quantizeAxis = ShapeUtil.normalizeAxis(attributes.quantizeAxis, inputs[0].dims.length);\n  const blockSize = attributes.blockSize;\n  const data = inputs[0];\n  const scales = inputs[2];\n  const zeroPoint = inputs.length === 4 ? inputs[3] : undefined;\n  if (\n    scales.dims.length !== data.dims.length ||\n    !data.dims\n      .map((d, i) => (i === quantizeAxis ? Math.ceil(d / blockSize) === scales.dims[i] : d === scales.dims[i]))\n      .reduce((a, b) => a && b, true)\n  ) {\n    throw new Error(\n      'Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.',\n    );\n  }\n  // TODO Uncomment the following check once the test case creation code is fixed to create data correctly aligned.\n  // const indices = inputs[1];\n  // const validIndex = (index: number) => index >= 0 && index < data.dims[attributes.gatherAxis];\n  // if (indices.dataType === DataType.int32 && indices.getInt32Array().some((v) => !validIndex(v)) ||\n  //     indices.dataType === DataType.int64 && indices.getBigInt64Array().some((v) => !validIndex(Number(v)))) {\n  //   throw new Error('Indices must be within the bounds of the gatherAxis.');\n  // }\n  if (zeroPoint) {\n    if (zeroPoint.dataType !== data.dataType) {\n      throw new Error('Zero point must have the same data type as the input tensor.');\n    }\n    if (\n      zeroPoint.dims.length !== scales.dims.length ||\n      !zeroPoint.dims.map((d, i) => d === scales.dims[i]).reduce((a, b) => a && b, true)\n    ) {\n      throw new Error(\n        'Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.',\n      );\n    }\n  }\n};\n\nconst createGatherBlockQuantizedProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: GatherBlockQuantizedAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const indicesShape = inputs[1].dims;\n  const inputRank = inputShape.length;\n  const gatherAxis = ShapeUtil.normalizeAxis(attributes.gatherAxis, inputRank);\n  const quantizeAxis = ShapeUtil.normalizeAxis(attributes.quantizeAxis, inputRank);\n  const outputShape = inputShape.slice(0);\n  outputShape.splice(gatherAxis, 1, ...indicesShape);\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputType = inputs[2].dataType;\n  const inputType = inputs[0].dataType;\n  const isSigned = inputType === DataType.int4; // input data type is either int4 or uint4.\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: quantizeAxis },\n    { type: DataType.uint32, data: gatherAxis },\n    { type: DataType.uint32, data: attributes.blockSize },\n    ...createTensorShapeVariables(...inputs.map((input, _) => input.dims), outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const data = inputVariable('data', inputs[0].dataType, inputs[0].dims.length);\n    const indices = inputVariable('inputIndices', inputs[1].dataType, inputs[1].dims.length);\n    const scales = inputVariable('scales', inputs[2].dataType, inputs[2].dims.length);\n    const zeroPoint =\n      inputs.length > 3 ? inputVariable('zeroPoint', inputs[3].dataType, inputs[3].dims.length) : undefined;\n    const output = outputVariable('output', outputType, outputShape.length);\n    const inputVariables = [data, indices, scales];\n    if (zeroPoint) {\n      inputVariables.push(zeroPoint);\n    }\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'quantize_axis', type: 'u32' },\n      { name: 'gather_axis', type: 'u32' },\n      { name: 'block_size', type: 'u32' },\n    ];\n    return `\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n        ${shaderHelper.mainStart()}\n        let output_indices = ${output.offsetToIndices('global_idx')};\n        var indices_indices = ${indices.type.indices}(0);\n        ${(() => {\n          if (indicesShape.length > 1) {\n            return `\n          for (var i: u32 = 0; i < ${indicesShape.length}; i++) {\n            let index = ${output.indicesGet('output_indices', 'uniforms.gather_axis + i')};\n            ${indices.indicesSet('indices_indices', 'i', 'index')};\n          }`;\n          } else {\n            return `indices_indices = ${output.indicesGet('output_indices', 'uniforms.gather_axis')};`;\n          }\n        })()};\n        var data_indices = ${data.type.indices}(0);\n        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {\n          let index = ${output.indicesGet('output_indices', 'i')};\n          ${data.indicesSet('data_indices', 'i', 'index')};\n        }\n        var index_from_indices = ${indices.getByIndices('indices_indices')};\n        if (index_from_indices < 0) {\n          index_from_indices += ${inputShape[gatherAxis]};\n        }\n        ${data.indicesSet('data_indices', 'uniforms.gather_axis', 'u32(index_from_indices)')};\n        for (var i = uniforms.gather_axis + 1; i < ${outputShape.length}; i++) {\n          let index = ${output.indicesGet('output_indices', `i + ${indicesShape.length} - 1`)};\n          ${data.indicesSet('data_indices', 'i', 'index')};\n        }\n        let data_offset = ${data.indicesToOffset('data_indices')};\n        let data_index = data_offset % 8;\n        // Convert 4-bit packed data to 8-bit packed data.\n        let packed_4bit_quantized_data = ${data.getByOffset('data_offset / 8')};\n        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;\n        let quantized_data_vec = ${isSigned ? 'unpack4xI8' : 'unpack4xU8'}(u32(packed_8bit_quantized_data));\n        let quantized_data = quantized_data_vec[data_index / 2];\n        var scale_indices = data_indices;\n        let quantize_axis_index = ${scales.indicesGet('data_indices', 'uniforms.quantize_axis')} / uniforms.block_size;\n        ${scales.indicesSet('scale_indices', 'uniforms.quantize_axis', 'quantize_axis_index')};\n        var scale = ${scales.getByIndices('scale_indices')};\n        ${(() => {\n          if (!zeroPoint) {\n            return 'var zero_point = 0';\n          } else {\n            return `\n              let zero_point_indices = scale_indices;\n              let zero_point_offset = ${zeroPoint.indicesToOffset('zero_point_indices')};\n              let zero_point_index = zero_point_offset % 8;\n              let packed_4bit_zero_points = ${zeroPoint.getByOffset('zero_point_offset / 8')};\n              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;\n              let zero_point_vec = ${isSigned ? 'unpack4xI8' : 'unpack4xU8'}(u32(packed_8bit_zero_points));\n              let zero_point = zero_point_vec[zero_point_index / 2];`;\n          }\n        })()};\n        let dequantized_data = ${tensorTypeToWsglValueType(outputType)}(quantized_data - zero_point) * scale;\n        ${output.setByOffset('global_idx', 'dequantized_data')};\n    }`;\n  };\n  return {\n    name: 'GatherBlockQuantized',\n    shaderCache: {\n      hint: `${attributes.cacheKey};${inputs\n        .filter((_, i) => i !== 1)\n        .map((input) => input.dims.join('_'))\n        .join(';')}`,\n      inputDependencies: Array.from({ length: inputs.length }, (_v, _i) => 'rank'),\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const gatherBlockQuantized = (context: ComputeContext, attributes: GatherBlockQuantizedAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs, attributes);\n  context.compute(createGatherBlockQuantizedProgramInfo(context.inputs, attributes));\n};\n\nexport const parseGatherBlockQuantizedAttributes = (\n  attributes: Record<string, unknown>,\n): GatherBlockQuantizedAttributes =>\n  createAttributeWithCacheKey({\n    blockSize: attributes.blockSize as number,\n    gatherAxis: attributes.gatherAxis as number,\n    quantizeAxis: attributes.quantizeAxis as number,\n  });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nexport interface GatherElementsAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('GatherElements requires 2 inputs.');\n  }\n\n  if (inputs[0].dims.length < 1) {\n    throw new Error('GatherElements requires that the data input be rank >= 1.');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`);\n  }\n};\n\nconst createGatherElementsProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: GatherElementsAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const inputOutputDataType = inputs[0].dataType;\n  const inputRank = inputShape.length;\n\n  const indicesShape = inputs[1].dims;\n  const indicesDataType = inputs[1].dataType;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n  const axisDimLimit = inputShape[axis];\n\n  const outputShape = indicesShape.slice(0);\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const input = inputVariable('input', inputOutputDataType, inputRank);\n  const indices = inputVariable('indicesInput', indicesDataType, indicesShape.length);\n  const output = outputVariable('output', inputOutputDataType, outputShape.length);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: axisDimLimit },\n    { type: DataType.uint32, data: axis },\n  ];\n  programUniforms.push(...createTensorShapeVariables(inputShape, indicesShape, outputShape));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'rank'];\n\n  // int64 indices would be treated as little endian i32 with assumption they fall in i32 limits\n  // That assumption is safe as it's not possible to allocate >2gb buffer for input tensor\n  // Input data will be treated as u32 or two u32 for 8-byte tensors\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper\n        .registerUniform('outputSize', 'u32')\n        .registerUniform('axisDimLimit', 'i32')\n        .registerUniform('axis', 'u32')\n        .declareVariables(input, indices, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n\n      var idx = ${indices.getByOffset('global_idx')};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${input.type.indices}(outputIndices);\n      ${input.indicesSet('inputIndices', 'uniforms.axis', 'u32(idx)')};\n      let value = ${input.getByIndices('inputIndices')};\n\n      ${output.setByOffset('global_idx', 'value')};\n  }`;\n\n  return {\n    name: 'GatherElements',\n    shaderCache: { inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseGatherElementsAttributes = (attributes: Record<string, unknown>): GatherElementsAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n\nexport const gatherElements = (context: ComputeContext, attributes: GatherElementsAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n  context.compute(createGatherElementsProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { GemmUtil, ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if (inputs[0].dataType !== inputs[1].dataType || (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst createGemmProgramInfo = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n  const aShape = inputs[0].dims.slice();\n  const bShape = inputs[1].dims.slice();\n  const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n    aShape,\n    attributes.transA,\n    bShape,\n    attributes.transB,\n    inputs.length === 3 ? inputs[2].dims : undefined,\n  );\n  const outputShape = [M, N];\n  if (!outputShape) {\n    throw new Error(\"Can't use gemm on the given tensors\");\n  }\n  const tileSize = 16;\n  const numTileN = Math.ceil(N / tileSize);\n  const numTileM = Math.ceil(M / tileSize);\n  // TODO: Find the condition when to use the naive one.\n  const useShared = true;\n\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: useShared ? numTileN : outputSize },\n    { type: DataType.uint32, data: M },\n    { type: DataType.uint32, data: N },\n    { type: DataType.uint32, data: K },\n    { type: DataType.float, data: attributes.alpha },\n    { type: DataType.float, data: attributes.beta },\n  ];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  if (inputs.length === 3) {\n    programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n    inputDependencies.push('rank');\n  }\n  programUniforms.push(...createTensorShapeVariables(outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    let line = '';\n    if (attributes.transA && attributes.transB) {\n      line = 'value += a[k * uniforms.M + m] * b[n * uniforms.K + k];';\n    } else if (attributes.transA && !attributes.transB) {\n      line = 'value += a[k * uniforms.M + m] * b[k * uniforms.N + n];';\n    } else if (!attributes.transA && attributes.transB) {\n      line = 'value += a[m * uniforms.K + k] * b[n * uniforms.K + k];';\n    } else if (!attributes.transA && !attributes.transB) {\n      line = 'value += a[m * uniforms.K + k] * b[k * uniforms.N + n];';\n    }\n\n    const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= uniforms.alpha;';\n    const a = inputVariable('a', inputs[0].dataType, inputs[0].dims);\n    const b = inputVariable('b', inputs[1].dataType, inputs[1].dims);\n    const dataType = a.type.value;\n    let c: IndicesHelper | null = null;\n    const variables = [a, b];\n    if (inputs.length === 3) {\n      c = inputVariable('c', inputs[2].dataType, inputs[2].dims.length);\n      variables.push(c);\n    }\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n    variables.push(output);\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'M', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'alpha', type: 'f32' },\n      { name: 'beta', type: 'f32' },\n    ];\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${(() => {\n      if (c != null) {\n        return `let cOffset = ${c.broadcastedIndicesToOffset('vec2(m, n)', output)}; value += ${\n          dataType\n        }(uniforms.beta) * ${c.getByOffset('cOffset')};`;\n      }\n      return '';\n    })()}\n    output[global_idx] = value;\n  }`;\n  };\n\n  const getShaderSourceShared = (shaderHelper: ShaderHelper) => {\n    const a = inputVariable('a', inputs[0].dataType, inputs[0].dims);\n    const b = inputVariable('b', inputs[1].dataType, inputs[1].dims);\n    let c: IndicesHelper | null = null;\n    const variables = [a, b];\n    if (inputs.length === 3) {\n      c = inputVariable('c', inputs[2].dataType, inputs[2].dims.length);\n      variables.push(c);\n    }\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n    variables.push(output);\n    const uniforms: UniformsArrayType = [\n      { name: 'num_tile_n', type: 'u32' },\n      { name: 'M', type: 'u32' },\n      { name: 'N', type: 'u32' },\n      { name: 'K', type: 'u32' },\n      { name: 'alpha', type: 'f32' },\n      { name: 'beta', type: 'f32' },\n    ];\n\n    let calcResult = '';\n    let fillWorkgroupMemory = '';\n    if (attributes.transA && attributes.transB) {\n      fillWorkgroupMemory = `\n      var col = tile_row_start + local_id.x;\n      var row = k_start + local_id.y;\n      if (col < uniforms.M && row < uniforms.K) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${a.type.value}(0);\n      }\n\n      col = k_start + local_id.x;\n      row = tile_col_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.N) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${b.type.value}(0);\n      }\n      `;\n      calcResult = `value += tile_a[k][local_id.y] * tile_b[local_id.x][k];`;\n    } else if (attributes.transA && !attributes.transB) {\n      fillWorkgroupMemory = `\n      var col = tile_row_start + local_id.x;\n      var row = k_start + local_id.y;\n      if (col < uniforms.M && row < uniforms.K) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${a.type.value}(0);\n      }\n\n      col = tile_col_start + local_id.x;\n      row = k_start + local_id.y;\n      if (col < uniforms.N && row < uniforms.K) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${b.type.value}(0);\n      }\n      `;\n      calcResult = `value += tile_a[k][local_id.y] * tile_b[k][local_id.x];`;\n    } else if (!attributes.transA && attributes.transB) {\n      fillWorkgroupMemory = `\n      var col = k_start + local_id.x;\n      var row = tile_row_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.M) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${a.type.value}(0);\n      }\n\n      col = k_start + local_id.x;\n      row = tile_col_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.N) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${b.type.value}(0);\n      }\n      `;\n      calcResult = `value += tile_a[local_id.y][k] * tile_b[local_id.x][k];`;\n    } else if (!attributes.transA && !attributes.transB) {\n      fillWorkgroupMemory = `\n      var col = k_start + local_id.x;\n      var row = tile_row_start + local_id.y;\n      if (col < uniforms.K && row < uniforms.M) {\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\n      } else {\n        tile_a[local_id.y][local_id.x] = ${a.type.value}(0);\n      }\n\n      col = tile_col_start + local_id.x;\n      row = k_start + local_id.y;\n      if (col < uniforms.N && row < uniforms.K) {\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\n      } else {\n        tile_b[local_id.y][local_id.x] = ${b.type.value}(0);\n      }\n      `;\n      calcResult = `value += tile_a[local_id.y][k] * tile_b[k][local_id.x];`;\n    }\n\n    const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= uniforms.alpha;';\n\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n  var<workgroup> tile_a: array<array<${a.type.storage}, ${tileSize}>, ${tileSize}>;\n  var<workgroup> tile_b: array<array<${b.type.storage}, ${tileSize}>, ${tileSize}>;\n  ${shaderHelper.mainStart([tileSize, tileSize, 1])}\n    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${tileSize};\n    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${tileSize};\n    let num_tiles = (uniforms.K - 1) / ${tileSize} + 1;\n    var k_start = 0u;\n    var value = ${output.type.value}(0);\n    for (var t: u32 = 0u; t < num_tiles; t++) {\n      ${fillWorkgroupMemory}\n      k_start = k_start + ${tileSize};\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < ${tileSize}; k++) {\n        ${calcResult}\n      }\n      workgroupBarrier();\n    }\n\n    ${calculateAlpha}\n    let m = tile_row_start + local_id.y;\n    let n = tile_col_start + local_id.x;\n    ${(() => {\n      if (c != null) {\n        return `let cOffset = ${c.broadcastedIndicesToOffset('vec2(m, n)', output)}; value += ${\n          output.type.value\n        }(uniforms.beta) * ${c.getByOffset('cOffset')};`;\n      }\n      return '';\n    })()}\n    if (m < uniforms.M && n < uniforms.N) {\n      output[m * uniforms.N + n] = value;\n    }\n  }`;\n  };\n\n  if (useShared) {\n    return {\n      name: 'GemmShared',\n      shaderCache: { hint: `${attributes.cacheKey}`, inputDependencies },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: numTileN * numTileM },\n        programUniforms,\n      }),\n      getShaderSource: getShaderSourceShared,\n    };\n  }\n\n  return {\n    name: 'Gemm',\n    shaderCache: { hint: `${attributes.cacheKey}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes => {\n  const transA = attributes.transA as boolean;\n  const transB = attributes.transB as boolean;\n  const alpha = attributes.alpha as number;\n  const beta = attributes.beta as number;\n  return {\n    transA,\n    transB,\n    alpha,\n    beta,\n    cacheKey: `${attributes.transA};${attributes.transB};${attributes.alpha === 1}`,\n  };\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, IndicesHelper, inputVariable, outputVariable, ShaderHelper } from './common';\n\nlet [idxN, idxC, idxH, idxW] = [0, 1, 2, 3]; // NCHW\ntype Mode = 'bilinear' | 'nearest' | 'bicubic';\ntype PaddingMode = 'zeros' | 'border' | 'reflection';\ntype Format = 'NHWC' | 'NCHW';\nexport interface GridSampeAttributes extends AttributeWithCacheKey {\n  alignCorners: number;\n  mode: Mode;\n  paddingMode: PaddingMode;\n  format: Format;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('only 4-D tensor is supported.');\n  }\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('input dimensions must be equal to grid dimensions');\n  }\n\n  if (inputs[0].dims.length - 2 !== inputs[1].dims[inputs[1].dims.length - 1]) {\n    throw new Error(`last dimension of grid must be equal to ${inputs[0].dims.length - 2}`);\n  }\n\n  if (inputs[0].dims[0] !== inputs[1].dims[0]) {\n    throw new Error('grid batch size must match input batch size');\n  }\n};\n\nconst gsGetCubicCoeffs = `\n  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {\n    let cubic_alpha = -0.75f;\n    let x_abs = abs(x);\n    var coeffs: vec4<f32>;\n    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);\n    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);\n    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);\n    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);\n    return coeffs;\n  }\n`;\n\nconst gsBicubicInterpolate = (dataType: string): string => `\n  fn gs_bicubic_interpolate(p: mat4x4<${dataType}>, x: f32, y: f32) -> ${dataType} {\n    var v: vec4<f32>;\n    var coeffs = gs_get_cubic_coeffs(x);\n    for (var i = 0; i < 4; i++) {\n      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];\n    }\n    coeffs = gs_get_cubic_coeffs(y);\n    let pixel = ${dataType}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);\n    return pixel;\n  }\n`;\n\nconst gsDenormalize = (attributes: GridSampeAttributes): string => `\n  fn gs_denormalize(n: f32, length: i32) -> f32 {\n    ${\n      attributes.alignCorners === 0\n        ? `\n    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]\n    return ((n + 1.0) * f32(length) - 1.0) / 2.0;\n    `\n        : `\n    // alignCorners: true => [-1, 1] to [0, length - 1]\n    return (n + 1.0) / 2.0 * (f32(length - 1));\n    `\n    }\n  }\n`;\n\nconst gsReflect = (attributes: GridSampeAttributes): string => `\n  ${\n    attributes.paddingMode === 'reflection'\n      ? `\n      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {\n        var dx = 0.0;\n        var fx = f32(x);\n        let range = x_max - x_min;\n        if (fx < x_min) {\n          dx = x_min - fx;\n          let n = u32(dx / range);\n          let r = dx - f32(n) * range;\n          if (n % 2 == 0) {\n            fx = x_min + r;\n          } else {\n            fx = x_max - r;\n          }\n        } else if (fx > x_max) {\n          dx = fx - x_max;\n          let n = u32(dx / range);\n          let r = dx - f32(n) * range;\n          if (n % 2 == 0) {\n            fx = x_max - r;\n          } else {\n            fx = x_min + r;\n          }\n        }\n        return u32(fx);\n      }`\n      : ''\n  }\n`;\n\nconst pixelAtGrid = (input: IndicesHelper, dataType: string, attributes: GridSampeAttributes): string =>\n  `\n  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${dataType} {\n     var pixel = ${dataType}(0);\n     var indices = vec4<u32>(0);\n     indices[${idxN}] = batch;\n     indices[${idxC}] = channel;` +\n  (() => {\n    switch (attributes.paddingMode) {\n      case 'zeros':\n        return `\n          if (r >= 0 && r < H && c >=0 && c < W) {\n            indices[${idxH}] = u32(r);\n            indices[${idxW}] = u32(c);\n          }\n        `;\n      case 'border':\n        return `\n          indices[${idxH}] = u32(clamp(r, 0, H - 1));\n          indices[${idxW}] = u32(clamp(c, 0, W - 1));\n        `;\n      case 'reflection':\n        return `\n          indices[${idxH}] = gs_reflect(r, border[1], border[3]);\n          indices[${idxW}] = gs_reflect(c, border[0], border[2]);\n        `;\n      default:\n        throw new Error(`padding mode ${attributes.paddingMode} is not supported`);\n    }\n  })() +\n  `\n    return ${input.getByIndices('indices')};\n  }\n`;\n\nconst computePixel = (output: IndicesHelper, dataType: string, attributes: GridSampeAttributes): string =>\n  (() => {\n    switch (attributes.mode) {\n      case 'nearest':\n        return `\n          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${idxN}], indices[${idxC}], border);\n        `;\n      case 'bilinear':\n        return `\n          let x1 = i32(floor(x));\n          let y1 = i32(floor(y));\n          let x2 = x1 + 1;\n          let y2 = y1 + 1;\n\n          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${idxN}], indices[${idxC}], border);\n          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${idxN}], indices[${idxC}], border);\n          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${idxN}], indices[${idxC}], border);\n          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${idxN}], indices[${idxC}], border);\n\n          let dx2 = ${dataType}(f32(x2) - x);\n          let dx1 = ${dataType}(x - f32(x1));\n          let dy2 = ${dataType}(f32(y2) - y);\n          let dy1 = ${dataType}(y - f32(y1));\n          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);\n        `;\n      case 'bicubic':\n        return `\n          let x0 = i32(floor(x)) - 1;\n          let y0 = i32(floor(y)) - 1;\n          var p: mat4x4<${dataType}>;\n          for (var h = 0; h < 4; h++) {\n            for (var w = 0; w < 4; w++) {\n              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${idxN}], indices[${idxC}], border);\n            }\n          }\n\n          let dx = x - f32(x0 + 1);\n          let dy = y - f32(y0 + 1);\n          let result = gs_bicubic_interpolate(p, dx, dy);\n        `;\n      default:\n        throw new Error(`mode ${attributes.mode} is not supported`);\n    }\n  })() + `${output.setByOffset('global_idx', 'result')}`;\n\nconst createGridSampleProgramInfo = (inputs: readonly TensorView[], attributes: GridSampeAttributes): ProgramInfo => {\n  const x = inputVariable('x', inputs[0].dataType, inputs[0].dims.length);\n  // discard last dimension for using vec2 to access grid data\n  const gridShape = [inputs[1].dims[0], inputs[1].dims[1], inputs[1].dims[2]];\n  const grid = inputVariable('grid', inputs[1].dataType, gridShape.length, 2);\n  let outputShape = [inputs[0].dims[0], inputs[0].dims[1], inputs[1].dims[1], inputs[1].dims[2]];\n  if (attributes.format === 'NHWC') {\n    outputShape = [inputs[0].dims[0], inputs[1].dims[1], inputs[1].dims[2], inputs[0].dims[3]];\n    [idxN, idxC, idxH, idxW] = [0, 3, 1, 2];\n  }\n  const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n  const dataType = x.type.value;\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    ...createTensorShapeVariables(inputs[0].dims, gridShape, outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(x, grid, output)}\n  ${gsGetCubicCoeffs}\n  ${gsBicubicInterpolate(dataType)}\n  ${gsDenormalize(attributes)}\n  ${gsReflect(attributes)}\n  ${pixelAtGrid(x, dataType, attributes)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n      let H_in = i32(uniforms.x_shape[${idxH}]);\n      let W_in = i32(uniforms.x_shape[${idxW}]);\n\n      ${\n        attributes.alignCorners === 0\n          ? `\n      let x_min = -0.5;\n      let x_max = f32(W_in) - 0.5;\n      let y_min = -0.5;\n      let y_max = f32(H_in) - 0.5;\n      `\n          : `\n      let x_min = 0.0;\n      let x_max = f32(W_in) - 1.0;\n      let y_min = 0.0;\n      let y_max = f32(H_in) - 1.0;\n      `\n      };\n      let border = vec4<f32>(x_min, y_min, x_max, y_max);\n\n      let indices = ${output.offsetToIndices('global_idx')};\n      var grid_indices = vec3<u32>(indices[${idxN}], indices[${idxH}], indices[${idxW}]);\n      let nxy = ${grid.getByIndices('grid_indices')};\n      var x = gs_denormalize(f32(nxy[0]), W_in);\n      var y = gs_denormalize(f32(nxy[1]), H_in);\n\n      ${computePixel(output, dataType, attributes)}\n  }`;\n\n  return {\n    name: 'GridSample',\n    shaderCache: { hint: `${attributes.cacheKey}`, inputDependencies: ['type', 'type'] },\n    getRunData: (inputs) => {\n      const outputSize = ShapeUtil.size(outputShape);\n      return {\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      };\n    },\n    getShaderSource,\n  };\n};\n\nexport const gridSample = (context: ComputeContext, attributes: GridSampeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGridSampleProgramInfo(context.inputs, attributes));\n};\n\nexport const parseGridSampleAttributes = (attributes: Record<string, unknown>): GridSampeAttributes =>\n  createAttributeWithCacheKey({\n    alignCorners: attributes.align_corners as number,\n    mode: attributes.mode as Mode,\n    paddingMode: attributes.padding_mode as PaddingMode,\n    format: attributes.format as Format,\n  });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, GpuDataType, ProgramUniform } from '../types';\n\nimport {\n  applyAttention,\n  AttentionAttrs,\n  AttentionMaskType,\n  AttentionParameters,\n  AttentionQkvFormat,\n} from './attention';\nimport { inputVariable, outputVariable, ShaderHelper, UniformsArrayType } from './common';\nimport { createTransposeProgramInfo, TransposeAttributes } from './transpose';\n\nconst getInput = (inputs: readonly TensorView[], i: number) =>\n  inputs.length > i && inputs[i].dims.length > 0 ? inputs[i] : undefined;\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: AttentionAttrs): AttentionParameters => {\n  const query = inputs[0];\n  const key = getInput(inputs, 1);\n  const value = getInput(inputs, 2);\n  const bias = getInput(inputs, 3);\n  const keyPaddingMask = getInput(inputs, 4);\n  const attentionBias = getInput(inputs, 5);\n  const pastKey = getInput(inputs, 6);\n  const pastValue = getInput(inputs, 7);\n\n  // ---------------------------------------------------------------\n  // Notations:\n  //    B: batch_size\n  //    N: num_heads\n  //    H: head_size of Q and K\n  //    H_v: head_size of V\n  //    D: hidden_size for Q and K, where D = N * H\n  //    D_v: hidden_size of V, where D_v = N * H_v\n  //    S: q_sequence_length\n  //    P: past_sequence_length of kv cache\n  //    L: kv_sequence_length\n  //    T: total_sequence_length = P + L\n  //    M: max_sequence_length of kv cache when past and present share buffer\n  // ---------------------------------------------------------------\n  // MultiHeadAttention inputs:\n  // ---------------------------------------------------------------\n  //  Q_K_V_BSNH - no packing:\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, L, D)\n  //     value            (V)       : (B, L, D_v)\n  //  Q_K_V_BSNH_BNSH_BNSH - cross attention (kv cache is not used, L == T, D == D_v):\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, N, L, H)\n  //     value            (V)       : (B, N, L, H_v)\n  //  Q_KV_BSNH_BSN2H - packed kv (kv cache is not used, bias is not allowed for packed kv):\n  //     query            (Q)       : (B, S, D)\n  //     key              (K/V)     : (B, L, N, 2, H)\n  //     value                      : None\n  //  QKV_BSN3H - packed qkv (kv cache is not used, S == L, D == D_v):\n  //     query            (Q/K/V)   : (B, S, N, 3, H)\n  //     key                        : None\n  //     value                      : None\n  //\n  //  Other inputs:\n  //     bias             (Q/K/V)   : None or (D + D + D_v)\n  //     key_padding_mask (K/V)     : (B) or (3 * B + 2) or (B, T) or (B, S, T)\n  //     attention_bias             : None or (B, N, S, T), (1, N, S, T), (B, 1, S, T) or (1, 1, S, T)\n  //     past_key                   : (B, N, P, H) or None. Past state is only allowed for Q_K_V_BSNH.\n  //     past_value                 : (B, N, P, H) or None. Past state is only allowed for Q_K_V_BSNH.\n  //\n  //  Not Supported:\n  //     key_padding_mask, packed kv, packed qkv, and broadcast for attention_bias.\n\n  if (query.dims.length !== 3 && query.dims.length !== 5) {\n    throw new Error('Input query is expected to have 3 or 5 dimensions');\n  }\n\n  const batchSize = query.dims[0];\n  const sequenceLength = query.dims[1];\n  const hiddenSize = query.dims.length === 3 ? query.dims[2] : attributes.numHeads * query.dims[4];\n  let kvSequenceLength = sequenceLength;\n\n  let pastSequenceLength = 0;\n  let maxSequenceLength = 0;\n  const headSize = Math.floor(hiddenSize / attributes.numHeads);\n  if (pastKey && pastValue && ShapeUtil.size(pastKey.dims) && ShapeUtil.size(pastValue.dims)) {\n    if (pastKey.dims.length !== 4) {\n      throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n    }\n    if (pastKey.dims[0] !== batchSize || pastKey.dims[1] !== attributes.numHeads || pastKey.dims[3] !== headSize) {\n      throw new Error('Input \"past_key\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n    }\n    if (\n      pastValue.dims[0] !== batchSize ||\n      pastValue.dims[1] !== attributes.numHeads ||\n      pastValue.dims[3] !== headSize\n    ) {\n      throw new Error('Input \"past_value\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n    }\n    if (pastKey.dims[2] !== pastValue.dims[2]) {\n      throw new Error('Input \"past_key\" and \"past_value\" shall have same dim 2 (past_sequence_length)');\n    }\n    if (pastValue.dims.length !== 4) {\n      throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n    }\n    pastSequenceLength = pastKey.dims[2];\n    maxSequenceLength = pastKey.dims[2];\n  } else if ((pastKey && ShapeUtil.size(pastKey.dims)) || (pastValue && ShapeUtil.size(pastValue.dims))) {\n    throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n  }\n\n  let qkvFormat: AttentionQkvFormat;\n  if (key && ShapeUtil.size(key.dims) > 0) {\n    if (query.dims.length !== 3) {\n      throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n    }\n    if (key.dims.length < 3 || key.dims.length > 5) {\n      throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n    }\n    if (query.dims[0] !== key.dims[0]) {\n      throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n    }\n\n    if (key.dims.length === 3) {\n      if (key.dims[2] !== query.dims[2]) {\n        throw new Error('Input \"query\" and \"key\" shall have same dim 2 (hidden_size)');\n      }\n      qkvFormat = AttentionQkvFormat.qkvBSNH;\n      kvSequenceLength = key.dims[1];\n    } else if (key.dims.length === 5) {\n      if (key.dims[2] !== attributes.numHeads || key.dims[3] !== 2 || key.dims[4] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n      }\n      if (value) {\n        throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n      }\n      qkvFormat = AttentionQkvFormat.qKvBSNHxBSN2H;\n      kvSequenceLength = key.dims[1];\n    } else {\n      // key_dims.size() == 4 (cross-attention with past_key)\n      if (key.dims[1] !== attributes.numHeads || key.dims[3] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n      }\n\n      qkvFormat = AttentionQkvFormat.unknown; // Q_K_V_BSNH_BNSH_BNSH\n      kvSequenceLength = key.dims[2];\n    }\n  } else {\n    // packed QKV\n    if (query.dims.length !== 5) {\n      throw new Error('Input \"query\" is expected to have 5 dimensions when key is empty');\n    }\n    if (query.dims[2] !== attributes.numHeads || query.dims[3] !== 3) {\n      throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n    }\n\n    qkvFormat = AttentionQkvFormat.qkvBSN3H;\n  }\n\n  if (bias && ShapeUtil.size(bias.dims) > 0) {\n    if (bias.dims.length !== 1) {\n      throw new Error('Input \"bias\" is expected to have 1 dimension');\n    }\n\n    if (key) {\n      if (key.dims.length === 5 && key.dims[3] === 2) {\n        throw new Error('bias is not allowed for packed kv.');\n      }\n    }\n  }\n\n  const totalSequenceLength = pastSequenceLength + kvSequenceLength;\n\n  let maskType: AttentionMaskType = AttentionMaskType.none;\n  if (keyPaddingMask && ShapeUtil.size(keyPaddingMask.dims) > 0) {\n    maskType = AttentionMaskType.maskUnknown;\n    const maskDims = keyPaddingMask.dims;\n    if (maskDims.length === 1) {\n      if (maskDims[0] === batchSize) {\n        maskType = AttentionMaskType.mask1dKeySeqLen;\n      } else if (maskDims[0] === 3 * batchSize + 2) {\n        maskType = AttentionMaskType.mask1DKeySeqLenStart;\n      }\n    } else if (maskDims.length === 2 && maskDims[0] === batchSize && maskDims[1] === totalSequenceLength) {\n      maskType = AttentionMaskType.mask2dKeyPadding;\n    }\n    if (maskType === AttentionMaskType.maskUnknown) {\n      throw new Error('Input \"key_padding_mask\" shape shall be (batch_size) or (batch_size, total_sequence_length)');\n    }\n    throw new Error('Mask not supported');\n  }\n\n  let passPastInKv = false;\n  let vHiddenSize = hiddenSize;\n  if (value && ShapeUtil.size(value.dims) > 0) {\n    if (value.dims.length !== 3 && value.dims.length !== 4) {\n      throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n    }\n\n    if (query.dims[0] !== value.dims[0]) {\n      throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n    }\n\n    if (value.dims.length === 3) {\n      if (kvSequenceLength !== value.dims[1]) {\n        throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[2];\n    } else {\n      // Q_K_V_BSNH_BNSH_BNSH\n      if (kvSequenceLength !== value.dims[2]) {\n        throw new Error('Input \"key\" and \"value\" shall have the same dim 2 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[1] * value.dims[3];\n      passPastInKv = true;\n    }\n  }\n\n  const broadcastResPosBias = false;\n\n  if (keyPaddingMask && ShapeUtil.size(keyPaddingMask.dims) > 0) {\n    throw new Error('Key padding mask is not supported');\n  }\n\n  if (attentionBias && ShapeUtil.size(attentionBias.dims) > 0) {\n    if (attentionBias.dims.length !== 4) {\n      throw new Error('Input \"attention_bias\" is expected to have 4 dimensions');\n    }\n\n    // TODO: support broadcasting the first and second dimensions of attention_bias.\n    if (\n      attentionBias.dims[0] !== batchSize ||\n      attentionBias.dims[1] !== attributes.numHeads ||\n      attentionBias.dims[2] !== sequenceLength ||\n      attentionBias.dims[3] !== totalSequenceLength\n    ) {\n      throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n    }\n  }\n\n  return {\n    batchSize,\n    sequenceLength,\n    pastSequenceLength,\n    kvSequenceLength,\n    totalSequenceLength,\n    maxSequenceLength,\n    inputHiddenSize: 0,\n    hiddenSize,\n    vHiddenSize,\n    headSize,\n    vHeadSize: Math.floor(vHiddenSize / attributes.numHeads),\n    numHeads: attributes.numHeads,\n    isUnidirectional: false,\n    pastPresentShareBuffer: false,\n    maskFilterValue: attributes.maskFilterValue,\n    maskType,\n    scale: attributes.scale,\n    broadcastResPosBias,\n    passPastInKv,\n    qkvFormat,\n  };\n};\n\nexport const parseMultiHeadAttentionAttributes = (attributes: AttentionAttrs): AttentionAttrs =>\n  createAttributeWithCacheKey({ ...attributes });\n\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({ perm: [0, 2, 1, 3] });\n\nconst addBiasTranspose = (\n  context: ComputeContext,\n  qkv: TensorView,\n  bias: TensorView,\n  batchSize: number,\n  sequenceLength: number,\n  hiddenSize: number,\n  biasOffset: number,\n) => {\n  const outputShape = [batchSize, sequenceLength, hiddenSize];\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: biasOffset },\n    { type: DataType.uint32, data: hiddenSize },\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('qkv_with_bias', qkv.dataType, outputShape);\n    const qkvInput = inputVariable('qkv', qkv.dataType, outputShape);\n    const biasInput = inputVariable('bias', bias.dataType, outputShape);\n\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'bias_offset', type: 'u32' },\n      { name: 'hidden_size', type: 'u32' },\n    ];\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(qkvInput, biasInput, output)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`;\n  };\n\n  return context.compute(\n    {\n      name: 'MultiHeadAttentionAddBias',\n      shaderCache: { inputDependencies: ['type', 'type'] },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: qkv.dataType, gpuDataType: GpuDataType.default }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [qkv, bias], outputs: [-1] },\n  )[0];\n};\n\nexport const maybeTransposeToBNSHAndAddBias = (\n  context: ComputeContext,\n  batchSize: number,\n  numHeads: number,\n  sequenceLength: number,\n  headSize: number,\n  input: TensorView,\n  bias?: TensorView,\n  biasOffset?: number,\n) => {\n  // const newDims = [];\n\n  let reshapedInput = input;\n  if (!(bias && ShapeUtil.size(bias.dims) > 0)) {\n    if (input.dims.length === 3) {\n      reshapedInput = input.reshape([batchSize, sequenceLength, numHeads, headSize]);\n    }\n    if (numHeads === 1 || sequenceLength === 1) {\n      return reshapedInput;\n    }\n    return context.compute(createTransposeProgramInfo(reshapedInput, weightTransposeAttribute.perm), {\n      inputs: [reshapedInput],\n      outputs: [-1],\n    })[0];\n  } else {\n    if (sequenceLength === 1) {\n      throw new Error('AddBiasReshape is not implemented. Please export your model with packed QKV or KV');\n    } else {\n      reshapedInput = addBiasTranspose(\n        context,\n        input,\n        bias,\n        batchSize,\n        sequenceLength,\n        numHeads * headSize,\n        biasOffset!,\n      );\n      reshapedInput = reshapedInput.reshape([batchSize, sequenceLength, numHeads, headSize]);\n      if (numHeads === 1 || sequenceLength === 1) {\n        return reshapedInput;\n      }\n      return context.compute(createTransposeProgramInfo(reshapedInput, weightTransposeAttribute.perm), {\n        inputs: [reshapedInput],\n        outputs: [-1],\n      })[0];\n    }\n  }\n};\n\nexport const multiHeadAttention = (context: ComputeContext, attributes: AttentionAttrs): void => {\n  const params = validateInputs(context.inputs, attributes);\n  const query = context.inputs[0];\n  const key = getInput(context.inputs, 1);\n  const value = getInput(context.inputs, 2);\n  const bias = getInput(context.inputs, 3);\n  const keyPaddingMask = getInput(context.inputs, 4);\n  const attentionBias = getInput(context.inputs, 5);\n  const pastKey = getInput(context.inputs, 6);\n  const pastValue = getInput(context.inputs, 7);\n  if (query.dims.length === 5) {\n    throw new Error('Packed QKV is not implemented');\n  }\n\n  if (key?.dims.length === 5) {\n    throw new Error('Packed KV is not implemented');\n  }\n\n  // applyAttention expects BNSH inputs\n  const kvBNSH = key && value && key.dims.length === 4 && value.dims.length === 4;\n\n  const Q = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.sequenceLength,\n    params.headSize,\n    query,\n    bias,\n    0,\n  );\n\n  if (kvBNSH) {\n    return applyAttention(context, Q, key, value, keyPaddingMask, undefined, pastKey, pastValue, attentionBias, params);\n  }\n  if (!key || !value) {\n    throw new Error('key and value must be provided');\n  }\n  const K = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.kvSequenceLength,\n    params.headSize,\n    key,\n    bias,\n    params.hiddenSize,\n  );\n\n  const V = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.kvSequenceLength,\n    params.vHeadSize,\n    value,\n    bias,\n    2 * params.hiddenSize,\n  );\n\n  applyAttention(context, Q, K, V, keyPaddingMask, undefined, pastKey, pastValue, attentionBias, params);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform, TensorInfo } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n} from './common';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly numOutputs: number;\n  readonly splitSizes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n};\n\nconst createSplitAttributesFromInputs = (\n  inputs: readonly TensorView[],\n  attributes: SplitAttributes,\n): SplitAttributes => {\n  const splitSizes: number[] = [];\n  let numOutputs: number = attributes.numOutputs;\n  if (inputs[1].dims[0] > 0) {\n    inputs[1].getBigInt64Array().forEach((v) => splitSizes.push(Number(v)));\n    numOutputs = splitSizes.length;\n  }\n  return createAttributeWithCacheKey({ numOutputs, axis: attributes.axis, splitSizes });\n};\n\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n    if (index < ${getElementAt('uniforms.size_in_split_axis', 'i', numberOfTensors)}) {\n        return i;\n    }\n    }\n    return ${numberOfTensors}u;\n}`;\nconst writeBufferDataImpl = (outputs: readonly IndicesHelper[]) => {\n  const numberOfTensors = outputs.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = outputs[i].setByIndices('indices', 'input[global_idx]');\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (output_number == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (output_number == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n      fn writeBufferData(output_number: u32, indices: ${outputs[0].type.indices}, global_idx: u32) {\n        ${codeLines.join('\\n')}\n      }`;\n};\n\nexport const createSplitProgramInfo = (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const inputSize = ShapeUtil.size(inputShape);\n  const dataType = inputs[0].dataType;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n  const outputs = new Array<IndicesHelper>(attributes.numOutputs);\n  const input = inputVariable('input', dataType, inputShape.length);\n  const sizeInSplitAxis = new Array<number>(attributes.numOutputs);\n  const outputsTensorInfo: TensorInfo[] = [];\n  const outputShapes: number[][] = [];\n  let previousSum = 0;\n  const programUniforms: ProgramUniform[] = [{ type: DataType.uint32, data: inputSize }];\n  for (let i = 0; i < attributes.numOutputs; i++) {\n    previousSum += attributes.splitSizes[i];\n    sizeInSplitAxis[i] = previousSum;\n    const outputShape = inputShape.slice();\n    outputShape[axis] = attributes.splitSizes[i];\n    outputShapes.push(outputShape);\n    outputs[i] = outputVariable(`output${i}`, dataType, outputShape.length);\n    outputsTensorInfo.push({ dims: outputShapes[i], dataType: inputs[0].dataType });\n  }\n  programUniforms.push(\n    { type: DataType.uint32, data: sizeInSplitAxis },\n    ...createTensorShapeVariables(inputShape, ...outputShapes),\n  );\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper\n    .registerUniform('input_size', 'u32')\n    .registerUniform('size_in_split_axis', 'u32', sizeInSplitAxis.length)\n    .declareVariables(input, ...outputs)}\n  ${calculateOutputIndexImpl(sizeInSplitAxis.length)}\n  ${writeBufferDataImpl(outputs)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.input_size')}\n\n    var indices = ${input.offsetToIndices('global_idx')};\n    var index = ${input.indicesGet('indices', axis)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${getElementAt('uniforms.size_in_split_axis', 'output_number - 1u', sizeInSplitAxis.length)};\n      ${input.indicesSet('indices', axis, 'index')};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;\n  return {\n    name: 'Split',\n    shaderCache: { hint: attributes.cacheKey, inputDependencies: ['rank'] },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: outputsTensorInfo,\n      dispatchGroup: { x: Math.ceil(inputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\n  validateInputs(context.inputs);\n  const updatedAttributes =\n    context.inputs.length === 1 ? attributes : createSplitAttributesFromInputs(context.inputs, attributes);\n  context.compute(createSplitProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n};\n\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\n  const axis = attributes.axis as number;\n  const splitSizes: number[] = attributes.splitSizes as number[];\n  const numOutputs = (attributes.numOutputs as number) < 0 ? splitSizes.length : (attributes.numOutputs as number);\n  if (numOutputs !== splitSizes.length) {\n    throw new Error('numOutputs and splitSizes lengh must be equal');\n  }\n  return createAttributeWithCacheKey({ axis, numOutputs, splitSizes });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext } from '../types';\n\nimport { applyAttention, AttentionMaskType, AttentionParameters, AttentionQkvFormat } from './attention';\nimport { maybeTransposeToBNSHAndAddBias } from './multihead-attention';\nimport { createSplitProgramInfo, SplitAttributes } from './split';\nimport { createTransposeProgramInfo, TransposeAttributes } from './transpose';\nexport interface GroupQueryAttentionAttributes {\n  numHeads: number;\n  kvNumHeads: number;\n  scale: number;\n  softcap: number;\n  doRotary: number;\n  rotaryInterleaved: number;\n  smoothSoftmax: boolean;\n  localWindowSize: number;\n}\n\nexport const validateInputs = (\n  inputs: readonly TensorView[],\n  attributes: GroupQueryAttentionAttributes,\n): AttentionParameters => {\n  if (attributes.doRotary) {\n    throw new Error('GroupQuerryAttention do_rotary attribute is not supported');\n  }\n  if (attributes.doRotary && inputs.length <= 7) {\n    throw new Error('cos_cache and sin_cache inputs are required if do_rotary is specified');\n  }\n  const query = inputs[0];\n  const key = inputs[1];\n  const value = inputs[2];\n  const pastKey = inputs[3];\n  const pastValue = inputs[4];\n  if (attributes.localWindowSize !== -1) {\n    throw new Error('Local attention is not supported');\n  }\n  if (attributes.softcap !== 0) {\n    throw new Error('Softcap is not supported');\n  }\n  if (attributes.rotaryInterleaved !== 0) {\n    throw new Error('Rotary interleaved is not supported');\n  }\n  if (attributes.smoothSoftmax) {\n    throw new Error('Smooth softmax is not supported');\n  }\n  // Abbreviation and Meanings:\n  //   B:    batch_size\n  //   S:    sequence_length (input sequence length of query)\n  //   P:    past_sequence_length (past sequence length of key or value)\n  //   L:    kv_sequence_length (input sequence length of key or value)\n  //   M:    max_sequence_length\n  //   T:    total_sequence_length = past_sequence_length + kv_sequence_length\n  //   N:    num_heads\n  //   H:    head size for Q and K, aka q_head_size or k_head_size or qk_head_size\n  //   H_v:  v_head_size\n  //   D_i:  input hidden size\n  //   D:    hidden size for Q and K (D = N * H), aka q_hidden_size or k_hidden_size or qk_hidden_size\n  //   D_v:  v_hidden_size = num_heads * v_head_size\n\n  //     past_key                   : (B, N, S*, H)\n  //     past_value                 : (B, N, S*, H)\n  // When no packing for q/k/v:\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, L, D) or (B, N, S*, H)\n  //     value            (V)       : (B, L, D_v) or (B, N, S*, H)\n  // When packed kv is used:\n  //     query            (Q)       : (B, S, D)\n  //     key              (K)       : (B, L, N, 2, H)\n  //     value            (V)       : None\n  // When packed qkv is used:\n  //     query            (Q)       : (B, L, N, 3, H) or (B, S, 3*D)\n  //     key              (K)       : None\n  //     value            (V)       : None\n\n  if (query.dims.length !== 3 && query.dims.length !== 5) {\n    throw new Error('Input query is expected to have 3 or 5 dimensions');\n  }\n\n  const dmmhaPacking = false;\n  const batchSize = query.dims[0];\n  const sequenceLength = query.dims[1];\n  let hiddenSize =\n    query.dims.length === 3 ? (dmmhaPacking ? query.dims[2] / 3 : query.dims[2]) : attributes.numHeads * query.dims[4];\n  let kvSequenceLength = sequenceLength;\n\n  let pastSequenceLength = 0;\n  const packedQKV = !key || key.dims.length === 0;\n  const headSize = !packedQKV\n    ? Math.floor(hiddenSize / attributes.numHeads)\n    : Math.floor(hiddenSize / (attributes.numHeads + 2 * attributes.kvNumHeads));\n  if (packedQKV) {\n    hiddenSize = headSize * attributes.numHeads;\n  }\n  const hasPastKey = pastKey && pastKey.dims.length !== 0;\n  const hasPastValue = pastValue && pastValue.dims.length !== 0;\n  // Currenly the onnxruntime GQA specification only support key/value BNSH format.\n  const isPastkvBSNH =\n    hasPastKey &&\n    pastKey.dims.length === 4 &&\n    pastKey.dims[0] === batchSize &&\n    pastKey.dims[1] !== attributes.kvNumHeads &&\n    pastKey.dims[2] === attributes.kvNumHeads &&\n    pastKey.dims[3] === headSize;\n\n  if (isPastkvBSNH) {\n    throw new Error('BSNH pastKey/pastValue is not supported');\n  }\n  if (hasPastKey && hasPastValue) {\n    if (pastKey.dims.length !== 4) {\n      throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n    }\n    if (pastValue.dims.length !== 4) {\n      throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n    }\n    pastSequenceLength = pastKey.dims[2];\n  } else if (hasPastKey || hasPastValue) {\n    throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n  }\n\n  let qkvFormat: AttentionQkvFormat = AttentionQkvFormat.qkvBNSH;\n  if (key && key.dims.length > 0) {\n    if (query.dims.length !== 3) {\n      throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n    }\n    if (key.dims.length < 3 || key.dims.length > 5) {\n      throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n    }\n    if (query.dims[0] !== key.dims[0]) {\n      throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n    }\n\n    if (key.dims.length === 3) {\n      if (query.dims[2] % key.dims[2] !== 0) {\n        throw new Error('Dimension 2 of \"query\" should be a multiple of \"key\"');\n      }\n      kvSequenceLength = key.dims[1];\n    } else if (key.dims.length === 5) {\n      if (key.dims[2] !== attributes.numHeads || key.dims[3] !== 2 || key.dims[4] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n      }\n      if (value) {\n        throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n      }\n      kvSequenceLength = key.dims[1];\n    } else {\n      // key_dims.size() == 4 (cross-attention with past_key)\n      if (key.dims[1] !== attributes.numHeads || key.dims[3] !== headSize) {\n        throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n      }\n      kvSequenceLength = key.dims[2];\n    }\n  } else {\n    // packed QKV\n    if (query.dims.length !== 3 && query.dims.length !== 5) {\n      throw new Error('Input \"query\" is expected to have 3 or 5 dimensions when key is empty');\n    }\n    if (query.dims.length === 5 && (query.dims[2] !== attributes.numHeads || query.dims[3] !== 3)) {\n      throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n    }\n\n    qkvFormat = AttentionQkvFormat.qkvBSN3H;\n  }\n\n  const maskType: AttentionMaskType = AttentionMaskType.none;\n  let passPastInKv = false;\n  let vHiddenSize = attributes.kvNumHeads ? headSize * attributes.kvNumHeads : hiddenSize;\n  if (value && value.dims.length > 0) {\n    if (value.dims.length !== 3 && value.dims.length !== 4) {\n      throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n    }\n\n    if (query.dims[0] !== value.dims[0]) {\n      throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n    }\n\n    if (value.dims.length === 3) {\n      if (kvSequenceLength !== value.dims[1]) {\n        throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[2];\n    } else {\n      if (kvSequenceLength !== value.dims[2]) {\n        throw new Error('Input \"past_key\" and \"past_value\" shall have the same dim 2 (kv_sequence_length)');\n      }\n      vHiddenSize = value.dims[1] * value.dims[3];\n      passPastInKv = true;\n    }\n  }\n  const seqlLens = inputs.length > 4 ? inputs[5] : undefined;\n  if (seqlLens && seqlLens.dims.length !== 1 && seqlLens.dims[0] !== batchSize) {\n    throw new Error('Input \"seqlens\" is expected to have 1 dimension and the same dim 0 as batch_size');\n  }\n  const totalSequenceLength = -1;\n  const maxSequenceLength = -1;\n  const broadcastResPosBias = false;\n\n  return {\n    batchSize,\n    sequenceLength,\n    pastSequenceLength,\n    kvSequenceLength,\n    totalSequenceLength,\n    maxSequenceLength,\n    inputHiddenSize: 0,\n    hiddenSize,\n    vHiddenSize,\n    headSize,\n    vHeadSize: Math.floor(vHiddenSize / attributes.kvNumHeads),\n    numHeads: attributes.numHeads,\n    kvNumHeads: attributes.kvNumHeads,\n    nReps: attributes.numHeads / attributes.kvNumHeads,\n    pastPresentShareBuffer: false,\n    maskType,\n    scale: attributes.scale,\n    broadcastResPosBias,\n    passPastInKv,\n    qkvFormat,\n  };\n};\n\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({ perm: [0, 2, 1, 3] });\n\nconst maybeTransposeToBNSH = (context: ComputeContext, input: TensorView, params: AttentionParameters) => {\n  let reshapedInput = input;\n  const numHeads = params.kvNumHeads!;\n  if (input.dims.length === 3 && params.kvSequenceLength !== 0) {\n    reshapedInput = input.reshape([params.batchSize, params.kvSequenceLength, numHeads, params.headSize]);\n    reshapedInput = context.compute(createTransposeProgramInfo(reshapedInput, weightTransposeAttribute.perm), {\n      inputs: [reshapedInput],\n      outputs: [-1],\n    })[0];\n  }\n\n  return reshapedInput;\n};\n\nexport const groupQueryAttention = (context: ComputeContext, attributes: GroupQueryAttentionAttributes): void => {\n  const params = validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 5) {\n    throw new Error('Packed QKV is not implemented');\n  }\n\n  if (context.inputs[1]?.dims.length === 5) {\n    throw new Error('Packed KV is not implemented');\n  }\n\n  const q = context.inputs[0];\n  const k = context.inputs[1] && context.inputs[1].dims.length > 0 ? context.inputs[1] : undefined;\n  const v = context.inputs[2] && context.inputs[2].dims.length > 0 ? context.inputs[2] : undefined;\n  const pastKey = context.inputs[3] && context.inputs[3].dims.length !== 0 ? context.inputs[3] : undefined;\n  const pastValue = context.inputs[4] && context.inputs[4].dims.length !== 0 ? context.inputs[4] : undefined;\n  const seqLens = context.inputs.length > 4 ? context.inputs[5] : undefined;\n  const totalSequenceLengthInput = context.inputs.length > 5 ? context.inputs[6] : undefined;\n  const kvNumHeads = params.kvNumHeads ? params.kvNumHeads : params.numHeads;\n\n  // TODO Remove explicit split operation and use indexing in Attention implementation to avoid overhead.\n\n  const splitAttributes: SplitAttributes = createAttributeWithCacheKey({\n    axis: 2,\n    numOutputs: 3,\n    splitSizes: [params.numHeads * params.headSize, kvNumHeads * params.headSize, kvNumHeads * params.headSize],\n  });\n  const [query, key, value] =\n    !k && !v\n      ? context.compute(createSplitProgramInfo([q], splitAttributes), { inputs: [q], outputs: [-1, -1, -1] })\n      : [q, k!, v!];\n\n  const Q = maybeTransposeToBNSHAndAddBias(\n    context,\n    params.batchSize,\n    params.numHeads,\n    params.sequenceLength,\n    params.headSize,\n    query,\n    undefined,\n    0,\n  );\n  applyAttention(\n    context,\n    Q,\n    maybeTransposeToBNSH(context, key, params),\n    maybeTransposeToBNSH(context, value, params),\n    undefined,\n    undefined,\n    pastKey,\n    pastValue,\n    undefined,\n    params,\n    seqLens,\n    totalSequenceLengthInput,\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\nimport { createTransposeProgramInfo } from './transpose';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n} from './common';\n\nexport interface InstanceNormAttributes {\n  epsilon: number;\n  format: 'NHWC' | 'NCHW';\n}\n\nconst computeChannelScaleShift = (\n  context: ComputeContext,\n  input: TensorView,\n  scale: TensorView,\n  bias: TensorView,\n  n: number,\n  h: number,\n  c: number,\n  epsilon: number,\n) => {\n  const components = getMaxComponents(h);\n  const f32Type = components === 1 ? 'f32' : `vec${components}f`;\n  const wgType = components === 1 ? 'vec2f' : `mat2x${components}f`;\n  const unitsOfWork = n * c;\n  let workgroupSize = 64;\n  if (unitsOfWork === 1) {\n    workgroupSize = 256;\n  }\n  const inputShape = [n, c, h / components];\n  const outputShape = [n, c, 2];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank', 'type', 'type'];\n  const programUniforms: ProgramUniform[] = [];\n  programUniforms.push(...createTensorShapeVariables(inputShape, outputShape));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const x = inputVariable('x', input.dataType, 3, components);\n    const s = inputVariable('scale', scale.dataType, scale.dims);\n    const b = inputVariable('bias', bias.dataType, bias.dims);\n    const output = outputVariable('output', DataType.float, 3, 2);\n    const variables = [x, s, b, output];\n    return `\n  var<workgroup> workgroup_shared : array<${wgType}, ${workgroupSize}>;\n  const workgroup_size = ${workgroupSize}u;\n  ${shaderHelper.declareVariables(...variables)}\n  ${shaderHelper.mainStart(workgroupSize)}\n    let batch = workgroup_index / uniforms.x_shape[1];\n    let channel = workgroup_index % uniforms.x_shape[1];\n    let hight = uniforms.x_shape[2];\n    // initialize workgroup memory\n    var sum = ${f32Type}(0);\n    var squared_sum = ${f32Type}(0);\n    for (var h = local_idx; h < hight; h += workgroup_size) {\n      let value = ${f32Type}(${x.get('batch', 'channel', 'h')});\n      sum += value;\n      squared_sum += value * value;\n    }\n    workgroup_shared[local_idx] = ${wgType}(sum, squared_sum);\n    workgroupBarrier();\n\n    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (local_idx < currSize) {\n        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (local_idx == 0) {\n      let sum_final = ${sumVector('workgroup_shared[0][0]', components)} / f32(hight * ${components});\n      let squared_sum_final = ${sumVector('workgroup_shared[0][1]', components)} / f32(hight * ${components});\n\n      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${epsilon}));\n      let channel_scale = inv_std_dev * f32(scale[channel]);\n      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;\n      output[workgroup_index] = vec2f(channel_scale, channel_shift);\n    }\n  }`;\n  };\n\n  return context.compute(\n    {\n      name: 'InstanceNormComputeChannelScaleShift',\n      // TODO: use epsilon as uniform. Currently epsilon as uniform fails test_instancenorm_epsilon.\n      shaderCache: { hint: `${components};${epsilon};${workgroupSize}`, inputDependencies },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: DataType.float }],\n        dispatchGroup: { x: unitsOfWork },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [input, scale, bias], outputs: [-1] },\n  )[0];\n};\n\nconst createInstanceNormProgramInfo = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: InstanceNormAttributes,\n) => {\n  const xShape = inputs[0].dims;\n  const outputShape = xShape;\n  const axis = 2;\n  const N = xShape[0];\n  const C = xShape[1];\n  const H = ShapeUtil.sizeFromDimension(xShape, axis);\n  const components = getMaxComponents(H);\n  const outputSize = ShapeUtil.size(outputShape) / components;\n  // compute channel scale and channel shift.\n  const channelScaleShift = computeChannelScaleShift(\n    context,\n    inputs[0],\n    inputs[1],\n    inputs[2],\n    N,\n    H,\n    C,\n    attributes.epsilon,\n  );\n\n  const inputShape = [N, C, H / components];\n  const scaleShape = [N, C];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'none'];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const x = inputVariable('x', inputs[0].dataType, inputShape.length, components);\n    const scale = inputVariable('scale_shift', DataType.float, scaleShape.length, 2);\n    const output = outputVariable('output', inputs[0].dataType, inputShape.length, components);\n    const variables = [x, scale, output];\n    return `\n  ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(...variables)}\n  ${shaderHelper.mainStart()}\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n      let batch = outputIndices[0];\n      let channel = outputIndices[1];\n      let scale_shift = ${scale.getByIndices('vec2<u32>(batch, channel)')};\n      let value = ${x.getByOffset('global_idx')} * ${output.type.value}(scale_shift.x) + ${output.type.value}(scale_shift.y);\n      ${output.setByOffset('global_idx', 'value')};\n  }`;\n  };\n\n  context.compute(\n    {\n      name: 'InstanceNormalization',\n      shaderCache: { hint: `${components}`, inputDependencies },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms: [\n          { type: DataType.uint32, data: outputSize },\n          ...createTensorShapeVariables(inputShape, scaleShape, inputShape),\n        ],\n      }),\n      getShaderSource,\n    },\n    { inputs: [inputs[0], channelScaleShift] },\n  );\n};\n\nconst createInstanceNormNHWCProgramInfo = (\n  context: ComputeContext,\n  inputs: readonly TensorView[],\n  attributes: InstanceNormAttributes,\n) => {\n  const xShape = inputs[0].dims;\n  const outputShape = xShape;\n  const N = xShape[0];\n  const C = xShape[xShape.length - 1];\n  const H = ShapeUtil.sizeFromDimension(xShape, 1) / C;\n  const components = getMaxComponents(C);\n  const outputSize = ShapeUtil.size(outputShape) / components;\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: H },\n    { type: DataType.uint32, data: Math.floor(C / components) },\n  ];\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n\n  // 1. transpose x from NHWC to NCHW\n  let needTranspose = false;\n  const transposedXPerm = [0, xShape.length - 1];\n  for (let i = 0; i < xShape.length - 2; i++) {\n    needTranspose = needTranspose || xShape[i + 1] !== 1;\n    transposedXPerm.push(i + 1);\n  }\n\n  needTranspose = needTranspose && xShape[xShape.length - 1] !== 1;\n\n  const transposedX = needTranspose\n    ? context.compute(createTransposeProgramInfo(context.inputs[0], transposedXPerm), {\n        inputs: [context.inputs[0]],\n        outputs: [-1],\n      })[0]\n    : context.inputs[0].reshape(Array.from({ length: xShape.length }, (_, i) => xShape[transposedXPerm[i]]));\n  // 2. compute channel scale and channel shift.\n  const channelScaleShift = computeChannelScaleShift(\n    context,\n    transposedX,\n    inputs[1],\n    inputs[2],\n    N,\n    H,\n    C,\n    attributes.epsilon,\n  );\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const scaleType = components === 1 ? 'vec2f' : `mat${components}x2f`;\n    const scaleData = (num: number) => {\n      const index = num === 0 ? 'x' : 'y';\n      const f32Type = components === 1 ? 'f32' : `vec${components}f`;\n      switch (components) {\n        case 1:\n          return `${dataType}(${f32Type}(scale.${index}))`;\n        case 2:\n          return `vec2<${dataType}>(${f32Type}(scale[0].${index}, scale[1].${index}))`;\n        case 4:\n          return `vec4<${dataType}>(${f32Type}(scale[0].${index}, scale[1].${index}, scale[2].${index}, scale[3].${index}))`;\n        default:\n          throw new Error(`Not supported compoents ${components}`);\n      }\n    };\n    const inputHelper = inputVariable('input', inputs[0].dataType, inputs[0].dims, components);\n    const outputHelper = outputVariable('output', inputs[0].dataType, outputShape, components);\n\n    return `\n  @group(0) @binding(0) var<storage, read> input : array<${inputHelper.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scale_input : array<${scaleType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${outputHelper.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${shaderHelper.mainStart()}\n    let current_image_number = global_idx / (uniforms.C * uniforms.H);\n    let current_channel_number = global_idx % uniforms.C;\n\n    let scale_offset = current_image_number * uniforms.C + current_channel_number;\n    let scale = scale_input[scale_offset];\n    output[global_idx] = fma(input[global_idx], ${scaleData(0)}, ${scaleData(1)});\n  }`;\n  };\n  context.compute(\n    {\n      name: 'InstanceNormalizationNHWC',\n      shaderCache: { hint: `${components}`, inputDependencies },\n      getRunData: () => ({\n        outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n        dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n        programUniforms,\n      }),\n      getShaderSource,\n    },\n    { inputs: [inputs[0], channelScaleShift] },\n  );\n};\n\nexport const instanceNorm = (context: ComputeContext, attributes: InstanceNormAttributes): void => {\n  if (attributes.format === 'NHWC') {\n    createInstanceNormNHWCProgramInfo(context, context.inputs, attributes);\n  } else {\n    createInstanceNormProgramInfo(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  castToF32,\n  fillVector,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\n\ninterface LayerNormAttributes {\n  simplified: boolean;\n  axis: number;\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 2) {\n    throw new Error('layerNorm requires at least 2 inputs.');\n  }\n};\n\nconst createLayerNormProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: LayerNormAttributes,\n  outputCount: number,\n): ProgramInfo => {\n  const simplified = attributes.simplified;\n\n  const xShape = inputs[0].dims;\n  const scale = inputs[1];\n  const bias = !simplified && inputs[2];\n\n  const outputShape = xShape;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, xShape.length);\n  const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n  const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n\n  const scaleSize = ShapeUtil.size(scale.dims);\n  const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\n  if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\n    throw new Error(`Size of X.shape()[axis:] == ${normSize}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${scaleSize} and bias size of ${biasSize}`);\n  }\n\n  const meanInvStdDevDim: number[] = [];\n  for (let i = 0; i < xShape.length; ++i) {\n    if (i < axis) {\n      meanInvStdDevDim.push(xShape[i]);\n    } else {\n      meanInvStdDevDim.push(1);\n    }\n  }\n  const components = getMaxComponents(normSize);\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['type', 'type'];\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: normCount },\n    { type: DataType.float, data: normSize },\n    { type: DataType.uint32, data: Math.floor(normSize / components) },\n    { type: DataType.float, data: attributes.epsilon },\n  ];\n  if (bias) {\n    inputDependencies.push('type');\n  }\n  const hasMeanDataOutput = outputCount > 1;\n  const hasInvStdOutput = outputCount > 2;\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const variables = [\n      inputVariable('x', inputs[0].dataType, inputs[0].dims, components),\n      inputVariable('scale', scale.dataType, scale.dims, components),\n    ];\n    if (bias) {\n      variables.push(inputVariable('bias', bias.dataType, bias.dims, components));\n    }\n    variables.push(outputVariable('output', inputs[0].dataType, outputShape, components));\n    if (hasMeanDataOutput) {\n      variables.push(outputVariable('mean_data_output', DataType.float, meanInvStdDevDim));\n    }\n    if (hasInvStdOutput) {\n      variables.push(outputVariable('inv_std_output', DataType.float, meanInvStdDevDim));\n    }\n\n    const uniforms: UniformsArrayType = [\n      { name: 'norm_count', type: 'u32' },\n      { name: 'norm_size', type: 'f32' },\n      { name: 'norm_size_vectorized', type: 'u32' },\n      { name: 'epsilon', type: 'f32' },\n    ];\n    return `\n  ${shaderHelper.registerUniforms(uniforms).declareVariables(...variables)}\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.norm_count')}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${fillVector('f32', components)};\n    var mean_square_vector = ${fillVector('f32', components)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${castToF32(dataType, components, 'x[h + offset]')};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${sumVector('mean_vector', components)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${sumVector('mean_square_vector', components)} / uniforms.norm_size ${\n      simplified ? '' : '- mean * mean'\n    } + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${castToF32(dataType, components, 'x[j + offset]')};\n      let f32scale = ${castToF32(dataType, components, 'scale[j]')};\n      output[j + offset] = ${variables[0].type.value}((f32input ${simplified ? '' : '- mean'}) * inv_std_dev * f32scale\n        ${bias ? `+ ${castToF32(dataType, components, 'bias[j]')}` : ''}\n      );\n    }\n\n    ${hasMeanDataOutput ? 'mean_data_output[global_idx] = mean' : ''};\n    ${hasInvStdOutput ? 'inv_std_output[global_idx] = inv_std_dev' : ''};\n  }`;\n  };\n  const outputs = [{ dims: outputShape, dataType: inputs[0].dataType }];\n  if (hasMeanDataOutput) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n  if (hasInvStdOutput) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n\n  return {\n    name: 'LayerNormalization',\n    shaderCache: { hint: `${components};${outputCount};${simplified}`, inputDependencies },\n    getRunData: () => ({\n      outputs,\n      dispatchGroup: { x: Math.ceil(normCount / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const layerNorm = (context: ComputeContext, attributes: LayerNormAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createLayerNormProgramInfo(context.inputs, attributes, context.outputCount));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TensorView } from '../../tensor-view';\nimport { BroadcastUtil, ShapeUtil } from '../../util';\nimport { ComputeContext } from '../types';\n\nimport { createNaiveMatmulProgramInfo } from './matmul-shaders';\nimport { createMatmulProgramInfo } from './3rd-party/matmul_packed_webgpu';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const outputShape = BroadcastUtil.calcShape(context.inputs[0].dims, context.inputs[1].dims, true);\n  if (!outputShape) {\n    throw new Error(\"Can't use matmul on the given tensors\");\n  }\n  const N = outputShape[outputShape.length - 1];\n  const K = context.inputs[0].dims[context.inputs[0].dims.length - 1];\n  if (N < 8 && K < 8) {\n    context.compute(createNaiveMatmulProgramInfo(context.inputs, { activation: '' }, outputShape));\n  } else {\n    const M = outputShape[outputShape.length - 2];\n    const batchA = ShapeUtil.size(context.inputs[0].dims.slice(0, -2));\n    const batchB = ShapeUtil.size(context.inputs[1].dims.slice(0, -2));\n    if (batchA !== 1 && M === 1 && batchB === 1) {\n      // Optimization for batched vec-mat-mul\n      const reshapedA = context.inputs[0].reshape([1, batchA, K]);\n      const reshapedB = context.inputs[1].reshape([1, K, N]);\n      const matmulOutputShape = [1, batchA, N];\n      const matmulInputs = [reshapedA, reshapedB];\n      context.compute(createMatmulProgramInfo(matmulInputs, { activation: '' }, outputShape, matmulOutputShape), {\n        inputs: matmulInputs,\n      });\n    } else {\n      context.compute(createMatmulProgramInfo(context.inputs, { activation: '' }, outputShape));\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  tensorTypeToWsglStorageType,\n} from './common';\n\n//  TODO support quantization bits not equal to 4\nexport interface MatMulNBitsAttributes extends AttributeWithCacheKey {\n  k: number;\n  n: number;\n  accuracyLevel: number;\n  bits: number;\n  blockSize: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: MatMulNBitsAttributes): void => {\n  if (inputs.length < 3 || inputs.length > 4) {\n    throw new Error('MatMulNBits requires 3 or 4 inputs');\n  }\n  const a = inputs[0];\n  const aRank = a.dims.length;\n  if (a.dims[aRank - 1] !== attributes.k) {\n    throw new Error('The last dim of input shape does not match the k value');\n  }\n  const nBlocksPerCol = Math.floor((attributes.k + attributes.blockSize - 1) / attributes.blockSize);\n  const blobSize = (attributes.blockSize / 8) * attributes.bits;\n  const b = inputs[1];\n  if (!ShapeUtil.areEqual(b.dims, [attributes.n, nBlocksPerCol, blobSize])) {\n    throw new Error('The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize');\n  }\n  const scales = inputs[2];\n  const scalesShape = scales.dims;\n  if (ShapeUtil.size(scalesShape) !== attributes.n * nBlocksPerCol) {\n    throw new Error('scales input size error.');\n  }\n  if (inputs.length === 4) {\n    const zeroPoints = inputs[3];\n    const zeroPointsShape = zeroPoints.dims;\n    const expectedZeroPointsSize =\n      attributes.bits > 4 ? attributes.n * nBlocksPerCol : attributes.n * Math.floor((nBlocksPerCol + 1) / 2);\n    if (ShapeUtil.size(zeroPointsShape) !== expectedZeroPointsSize) {\n      throw new Error('zeroPoints input size error.');\n    }\n  }\n};\n\nexport const createMatMulNBitsProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: MatMulNBitsAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const aRank = inputShape.length;\n  const dimAOuter = inputShape[aRank - 2];\n  const dimInner = attributes.k;\n  const dimBOuter = attributes.n;\n  const batchDims = inputShape.slice(0, aRank - 2);\n  const batchSize = ShapeUtil.size(batchDims);\n  const blobSize = inputs[1].dims[2];\n  const blobSizeInWords = blobSize / 4;\n  const dataType = inputs[0].dataType;\n  const aComponents = getMaxComponents(attributes.k);\n  const bComponents = getMaxComponents(blobSizeInWords);\n  const components = getMaxComponents(dimBOuter);\n  const outputShape = batchDims.concat([dimAOuter, dimBOuter]);\n  const outputNumber = dimAOuter > 1 && (dimBOuter / components) % 2 === 0 ? 2 : 1;\n  const dispatchSize = ShapeUtil.size(outputShape) / components / outputNumber;\n\n  const workgroupSize = 64;\n\n  const programUniforms: ProgramUniform[] = [];\n  const inputShapeTemp = [batchSize, dimAOuter, dimInner / aComponents];\n  const bShape = ShapeUtil.convertShape(inputs[1].dims).slice();\n  bShape.splice(-1, 1, blobSizeInWords / bComponents);\n  programUniforms.push(...createTensorShapeVariables(inputShapeTemp));\n  programUniforms.push(...createTensorShapeVariables(bShape));\n  programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n  if (inputs.length === 4) {\n    programUniforms.push(...createTensorShapeVariables(ShapeUtil.convertShape(inputs[3].dims)));\n  }\n  const outputShapeTemp = [batchSize, dimAOuter, dimBOuter / components];\n  programUniforms.push(...createTensorShapeVariables(outputShapeTemp));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const inputRank = inputShapeTemp.length;\n    const a = inputVariable('a', inputs[0].dataType, inputRank, aComponents);\n    const b = inputVariable('b', DataType.uint32, bShape.length, bComponents);\n    const scales = inputVariable('scales', inputs[2].dataType, inputs[2].dims.length);\n    const inputVariables = [a, b, scales];\n    const zeroPoints =\n      inputs.length === 4 ? inputVariable('zero_points', DataType.uint32, inputs[3].dims.length) : undefined;\n    if (zeroPoints) {\n      inputVariables.push(zeroPoints);\n    }\n    const outputRank = outputShapeTemp.length;\n    const output = outputVariable('output', inputs[0].dataType, outputRank, components);\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n    const qDqDataType = (() => {\n      switch (aComponents) {\n        case 1:\n          return `array<${dataType}, 8>`;\n        case 2:\n          return `mat4x2<${dataType}>`;\n        case 4:\n          return `mat2x4<${dataType}>`;\n        default:\n          throw new Error(`${aComponents}-component is not supported.`);\n      }\n    })();\n\n    const processOneWord = (): string => {\n      let calcStr = `\n          // reuse a data\n            var input_offset = ${a.indicesToOffset(`${a.type.indices}(batch, row, word_offset)`)};\n            var a_data: ${qDqDataType};\n            for (var j: u32 = 0; j < ${8 / aComponents}; j++) {\n              a_data[j] = ${a.getByOffset('input_offset')};\n              input_offset++;\n            }\n          `;\n      for (let c = 0; c < components * outputNumber; c++) {\n        calcStr += `\n            b_value = ${bComponents === 1 ? `b${c}_data` : `b${c}_data[i]`};\n            b_value_lower = unpack4xU8(b_value & b_mask);\n            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);\n            b_quantized_values = ${qDqDataType}(${Array.from(\n              { length: 4 },\n              (_, i) => `${dataType}(b_value_lower[${i}]), ${dataType}(b_value_upper[${i}])`,\n            ).join(', ')});\n            b_dequantized_values = ${(() => {\n              if (aComponents === 1) {\n                return `${qDqDataType}(${Array.from(\n                  { length: 8 },\n                  (_, i) => `(b_quantized_values[${i}] - ${zeroPoints ? `zero_point${c}` : 'zero_point'}) * scale${c}`,\n                ).join(', ')});`;\n              } else {\n                return `(b_quantized_values - ${qDqDataType}(${Array(8)\n                  .fill(`${zeroPoints ? `zero_point${c}` : 'zero_point'}`)\n                  .join(',')})) * scale${c};`;\n              }\n            })()};\n            workgroup_shared[local_id.x * ${outputNumber} + ${Math.floor(c / components)}]${components > 1 ? `[${c % components}]` : ''} += ${Array.from(\n              { length: 8 / aComponents },\n              (_, i) =>\n                `${\n                  aComponents === 1\n                    ? `a_data[${i}] * b_dequantized_values[${i}]`\n                    : `dot(a_data[${i}], b_dequantized_values[${i}])`\n                }`,\n            ).join(' + ')};\n          `;\n      }\n      return calcStr;\n    };\n    const prepareScaleAndZeroPoint = (): string => {\n      let calcStr = `\n            var col_index = col * ${components};\n            ${\n              zeroPoints\n                ? `\n            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;\n            var zero_point_byte_count: u32;\n            var zero_point_word_index: u32;\n            var zero_point_byte_offset: u32;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32;\n            var zero_point_word: u32;`\n                : `\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${dataType}(${8.0});`\n            }\n            `;\n      for (let c = 0; c < components * outputNumber; c++) {\n        calcStr += `\n            let scale${c} = ${scales.getByOffset(`col_index * nBlocksPerCol + block`)};\n            ${\n              zeroPoints\n                ? `\n            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);\n            zero_point_word_index = zero_point_byte_count >> 0x2u;\n            zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            zero_point_word = ${zeroPoints.getByOffset('zero_point_word_index')} >> zero_point_bits_offset;\n            let zero_point${c} = ${dataType}((zero_point_word) & 0xFu);`\n                : ''\n            }\n            col_index += 1;`;\n      }\n      return calcStr;\n    };\n    const prepareBData = (): string => {\n      let calcStr = `col_index = col * ${components};`;\n      for (let c = 0; c < components * outputNumber; c++) {\n        calcStr += `\n            let b${c}_data = ${b.getByIndices(`${b.type.indices}(col_index, block, word)`)};\n            col_index += 1;`;\n      }\n      calcStr += `\n            var b_value: u32;\n            let b_mask: u32 = 0x0F0F0F0Fu;\n            var b_value_lower: vec4<u32>;\n            var b_value_upper: vec4<u32>;\n            var b_quantized_values: ${qDqDataType};\n            var b_dequantized_values: ${qDqDataType};`;\n      return calcStr;\n    };\n    return `\n        var<workgroup> workgroup_shared: array<${output.type.value}, ${outputNumber * workgroupSize}>;\n        ${shaderHelper.declareVariables(...inputVariables, output)}\n        ${shaderHelper.mainStart([workgroupSize, 1, 1])}\n          let output_indices = ${output.offsetToIndices(`(global_idx / ${workgroupSize}) * ${outputNumber}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let nBlocksPerCol = uniforms.b_shape[1];\n\n          for (var block = local_id.x; block < nBlocksPerCol; block += ${workgroupSize}) {\n            //process one block\n            var word_offset: u32 = block * ${attributes.blockSize / aComponents};\n            ${prepareScaleAndZeroPoint()}\n            for (var word: u32 = 0; word < ${blobSizeInWords}; word += ${bComponents}) {\n              ${prepareBData()}\n              for (var i: u32 = 0; i < ${bComponents}; i++) {\n                ${processOneWord()}\n                word_offset += ${8 / aComponents};\n              }\n            }\n          }\n          workgroupBarrier();\n\n          if (local_id.x < ${outputNumber}) {\n            var output_value: ${output.type.value} = ${output.type.value}(0);\n            var workgroup_shared_offset: u32 = local_id.x;\n            for (var b: u32 = 0u; b < ${workgroupSize}u; b++) {\n              output_value += workgroup_shared[workgroup_shared_offset];\n              workgroup_shared_offset += ${outputNumber};\n            }\n            ${output.setByIndices(`${output.type.indices}(batch, row, col + local_id.x)`, 'output_value')};\n          }\n        }`;\n  };\n  return {\n    name: 'MatMulNBits',\n    shaderCache: {\n      hint: `${attributes.blockSize};${attributes.bits};${aComponents};${bComponents};${components};${outputNumber};${workgroupSize}`,\n      inputDependencies: Array(inputs.length).fill('rank'),\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: dispatchSize },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\n// Currently, only support blockSize = 32.\nexport const createMatMulNBitsBlockSize32ProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: MatMulNBitsAttributes,\n): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const aRank = inputShape.length;\n  const dimAOuter = inputShape[aRank - 2];\n  const dimInner = attributes.k;\n  const dimBOuter = attributes.n;\n  const batchDims = inputShape.slice(0, aRank - 2);\n  const batchSize = ShapeUtil.size(batchDims);\n  const blobSize = inputs[1].dims[2];\n  const blobSizeInWords = blobSize / 4;\n  const dataType = inputs[0].dataType;\n  const aComponents = getMaxComponents(attributes.k);\n  const bComponents = getMaxComponents(blobSizeInWords);\n  const outputShape = batchDims.concat([dimAOuter, dimBOuter]);\n\n  const workgroupSize = 128;\n  const workgroupY = dimBOuter % 8 === 0 ? 8 : dimBOuter % 4 === 0 ? 4 : 1;\n  const workgroupX = workgroupSize / workgroupY;\n  const tileSize = workgroupX * bComponents * 8; // each uint32 has 8 data.\n  const aLengthPerTile = tileSize / aComponents;\n  const blocksPerTile = tileSize / attributes.blockSize;\n  const dispatchSize = ShapeUtil.size(outputShape) / workgroupY;\n\n  const programUniforms: ProgramUniform[] = [];\n  const inputShapeTemp = [batchSize, dimAOuter, dimInner / aComponents];\n  const bShape = ShapeUtil.convertShape(inputs[1].dims).slice();\n  bShape.splice(-1, 1, blobSizeInWords / bComponents);\n  programUniforms.push(...createTensorShapeVariables(inputShapeTemp));\n  programUniforms.push(...createTensorShapeVariables(bShape));\n  programUniforms.push(...createTensorShapeVariables(inputs[2].dims));\n  if (inputs.length === 4) {\n    programUniforms.push(...createTensorShapeVariables(ShapeUtil.convertShape(inputs[3].dims)));\n  }\n  const outputShapeTemp = [batchSize, dimAOuter, dimBOuter];\n  programUniforms.push(...createTensorShapeVariables(outputShapeTemp));\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const inputRank = inputShapeTemp.length;\n    const a = inputVariable('a', inputs[0].dataType, inputRank, aComponents);\n    const b = inputVariable('b', DataType.uint32, bShape.length, bComponents);\n    const scales = inputVariable('scales', inputs[2].dataType, inputs[2].dims.length);\n    const inputVariables = [a, b, scales];\n    const zeroPoints =\n      inputs.length === 4 ? inputVariable('zero_points', DataType.uint32, inputs[3].dims.length) : undefined;\n    if (zeroPoints) {\n      inputVariables.push(zeroPoints);\n    }\n    const outputRank = outputShapeTemp.length;\n    const output = outputVariable('output', inputs[0].dataType, outputRank);\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const readA = () => {\n      switch (aComponents) {\n        case 1:\n          return `\n          let a_data0 = vec4<${dataType}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);\n          let a_data1 = vec4<${dataType}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;\n        case 2:\n          return `\n          let a_data0 = vec4<${dataType}>(sub_a[word_offset], sub_a[word_offset + 1]);\n          let a_data1 = vec4<${dataType}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;\n        case 4:\n          return `\n          let a_data0 = sub_a[word_offset];\n          let a_data1 = sub_a[word_offset + 1];`;\n        default:\n          throw new Error(`${aComponents}-component is not supported.`);\n      }\n    };\n\n    return `\n        var<workgroup> sub_a: array<${a.type.value}, ${aLengthPerTile}>;\n        var<workgroup> inter_results: array<array<${output.type.value}, ${workgroupX}>, ${workgroupY}>;\n        ${shaderHelper.declareVariables(...inputVariables, output)}\n        ${shaderHelper.mainStart([workgroupX, workgroupY, 1])}\n          let output_indices = ${output.offsetToIndices(`workgroup_index * ${workgroupY}`)};\n          let col = output_indices[2];\n          let row = output_indices[1];\n          let batch = output_indices[0];\n          let n_blocks_per_col = uniforms.b_shape[1];\n          let num_tiles =  (n_blocks_per_col - 1) / ${blocksPerTile} + 1;\n\n          // Loop over shared dimension.\n          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {\n            let a_col_start = tile * ${aLengthPerTile};\n            // load one tile A data into shared memory.\n            for (var a_offset = local_idx; a_offset < ${aLengthPerTile}; a_offset += ${workgroupSize})\n            {\n              let a_col = a_col_start + a_offset;\n              if (a_col < uniforms.a_shape[2])\n              {\n                sub_a[a_offset] = ${a.getByIndices(`${a.type.indices}(batch, row, a_col)`)};\n              } else {\n                sub_a[a_offset] = ${a.type.value}(0);\n              }\n            }\n            workgroupBarrier();\n\n            // each thread process one block\n            let b_row = col + local_id.y;\n            let block = tile * ${blocksPerTile} + local_id.x;\n            ${\n              zeroPoints\n                ? `\n            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;\n            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);\n            let zero_point_word_index = zero_point_byte_count >> 0x2u;\n            let zero_point_byte_offset = zero_point_byte_count & 0x3u;\n            let zero_point_nibble_offset: u32 = block & 0x1u;\n            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            let zero_point_word = ${zeroPoints.getByOffset('zero_point_word_index')} >> zero_point_bits_offset;\n            let zero_point = ${dataType}((zero_point_word) & 0xFu);`\n                : `\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${dataType}(${8.0});`\n            }\n            let scale = ${scales.getByOffset(`b_row * n_blocks_per_col + block`)};\n            let b_data = ${b.getByIndices(`${b.type.indices}(b_row, block, 0)`)};\n            var word_offset = local_id.x * ${attributes.blockSize / aComponents};\n            for (var i: u32 = 0; i < ${bComponents}; i++) {\n              ${readA()}\n              let b_value = ${bComponents === 1 ? `b_data` : `b_data[i]`};\n              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);\n              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);\n              let b_quantized_values = mat2x4<${dataType}>(${Array.from(\n                { length: 4 },\n                (_, i) => `${dataType}(b_value_lower[${i}]), ${dataType}(b_value_upper[${i}])`,\n              ).join(', ')});\n              let b_dequantized_values = (b_quantized_values - mat2x4<${dataType}>(${Array(8).fill('zero_point').join(',')})) * scale;\n              inter_results[local_id.y][local_id.x] += ${Array.from(\n                { length: 2 },\n                (_, i) => `${`dot(a_data${i}, b_dequantized_values[${i}])`}`,\n              ).join(' + ')};\n              word_offset += ${8 / aComponents};\n            }\n            workgroupBarrier();\n          }\n\n          if (local_idx < ${workgroupY}) {\n            var output_value: ${output.type.value} = ${output.type.value}(0);\n            for (var b = 0u; b < ${workgroupX}; b++) {\n              output_value += inter_results[local_idx][b];\n            }\n            if (col + local_idx < uniforms.output_shape[2])\n            {\n              ${output.setByIndices(`${output.type.indices}(batch, row, col + local_idx)`, 'output_value')}\n            }\n          }\n        }`;\n  };\n  return {\n    name: 'BlockwiseMatMulNBits32',\n    shaderCache: {\n      hint: `${attributes.blockSize};${aComponents};${bComponents};${workgroupX};${workgroupY}`,\n      inputDependencies: Array(inputs.length).fill('rank'),\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: dispatchSize },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const matMulNBits = (context: ComputeContext, attributes: MatMulNBitsAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (\n    attributes.blockSize === 32 &&\n    context.adapterInfo.isVendor('intel') &&\n    context.adapterInfo.isArchitecture('gen-12lp')\n  ) {\n    context.compute(createMatMulNBitsBlockSize32ProgramInfo(context.inputs, attributes));\n  } else {\n    context.compute(createMatMulNBitsProgramInfo(context.inputs, attributes));\n  }\n};\n\nexport const parseMatMulNBitsAttributes = (attributes: Record<string, unknown>): MatMulNBitsAttributes =>\n  createAttributeWithCacheKey(attributes as Omit<MatMulNBitsAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\ninterface PadAttributes {\n  // 0-constant, 1-reflect, 2-edge, 3-wrap\n  readonly mode: number;\n  readonly value: number;\n  readonly pads: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('Too few inputs');\n  }\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.float16) {\n    throw new Error('Input type must be float or float16.');\n  }\n\n  if (inputs.length >= 2) {\n    let validPads = inputs[0].dims.length * 2 === inputs[1].dims[0];\n    if (inputs.length === 4) {\n      validPads = inputs[3].dims[0] * 2 === inputs[1].dims[0];\n    }\n    if (!validPads) {\n      throw new Error('The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].');\n    }\n  }\n};\n\nconst getPadConstant = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n            k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n              break;\n            }\n            offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n        `;\n  }\n\n  return `\n          value = ${output.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${block}\n            value = x[offset];\n          }\n      `;\n};\n\nconst getPadReflect = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${getElementAt('uniforms.x_shape', i, inputRank)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n            `;\n  }\n\n  return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n};\n\nconst getPadEdge = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n                  k = i32(${getElementAt('uniforms.x_shape', i, inputRank)}) - 1;\n                }\n                offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n            `;\n  }\n\n  return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n};\n\nconst getPadWrap = (output: IndicesHelper, inputRank: number, padsLength: number): string => {\n  let block = '';\n  for (let i = inputRank - 1; i >= 0; --i) {\n    block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${getElementAt('uniforms.pads', i, padsLength)};\n                if (k < 0)  {\n                  k += i32(${getElementAt('uniforms.x_shape', i, inputRank)}]);\n                }\n                if (k >= i32(${getElementAt('uniforms.x_shape', i, inputRank)})) {\n                  k -= i32(${getElementAt('uniforms.x_shape', i, inputRank)});\n                }\n                offset += k * i32(${getElementAt('uniforms.x_strides', i, inputRank)});\n            `;\n  }\n\n  return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n};\n\nconst getPadSnippet = (output: IndicesHelper, inputRank: number, attributes: PadAttributes): string => {\n  switch (attributes.mode) {\n    case 0:\n      return getPadConstant(output, inputRank, attributes.pads.length);\n    case 1:\n      return getPadReflect(output, inputRank, attributes.pads.length);\n    case 2:\n      return getPadEdge(output, inputRank, attributes.pads.length);\n    case 3:\n      return getPadWrap(output, inputRank, attributes.pads.length);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst createPadProgramInfo = (inputs: readonly TensorView[], attributes: PadAttributes): ProgramInfo => {\n  const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), attributes.pads);\n  const inputDims = inputs[0].dims;\n  const outputSize = ShapeUtil.size(outputShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.int32, data: attributes.pads },\n  ];\n\n  const isValueFromInput = inputs.length >= 3 && inputs[2].data;\n  if (attributes.mode === 0) {\n    programUniforms.push({ type: isValueFromInput ? inputs[2].dataType : DataType.float, data: attributes.value });\n  }\n\n  programUniforms.push(...createTensorShapeVariables(inputs[0].dims, outputShape));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank'];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n    const input = inputVariable('x', inputs[0].dataType, inputDims.length);\n    const dataType = input.type.value;\n    const padSnippet = getPadSnippet(output, inputDims.length, attributes);\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'pads', type: 'i32', length: attributes.pads.length },\n    ];\n    if (attributes.mode === 0) {\n      uniforms.push({ name: 'constant_value', type: (isValueFromInput ? dataType : 'f32') as UniformDataElementType });\n    }\n\n    return `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n            ${shaderHelper.mainStart()}\n            ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n\n            let indices = ${output.offsetToIndices('global_idx')};\n\n            var value = ${dataType}(0);\n            ${padSnippet}\n            output[global_idx] = value;\n        }`;\n  };\n\n  return {\n    name: 'Pad',\n    shaderCache: { hint: `${attributes.mode}${isValueFromInput}`, inputDependencies },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nconst createPadAttributesFromInputs = (inputs: readonly TensorView[], attributes: PadAttributes): PadAttributes => {\n  if (inputs.length > 1) {\n    const bigInt64Pads = inputs[1].getBigInt64Array();\n    const value =\n      inputs.length >= 3 && inputs[2].data\n        ? inputs[2].dataType === DataType.float16\n          ? inputs[2].getUint16Array()[0]\n          : inputs[2].getFloat32Array()[0]\n        : 0.0;\n\n    const inputRank = inputs[0].dims.length;\n    const updatePads = new Int32Array(2 * inputRank).fill(0);\n    if (inputs.length >= 4) {\n      const axes = inputs[3].getBigInt64Array();\n      for (let i = 0; i < axes.length; i++) {\n        updatePads[Number(axes[i])] = Number(bigInt64Pads[i]);\n        updatePads[Number(axes[i]) + inputRank] = Number(bigInt64Pads[i + axes.length]);\n      }\n    } else {\n      bigInt64Pads.forEach((v, i) => (updatePads[Number(i)] = Number(v)));\n    }\n\n    const pads: number[] = [];\n    updatePads.forEach((v) => pads.push(v));\n\n    return { mode: attributes.mode, value, pads };\n  } else {\n    return attributes;\n  }\n};\n\nexport const pad = (context: ComputeContext, attributes: PadAttributes): void => {\n  validateInputs(context.inputs);\n  const updatedAttributes = createPadAttributesFromInputs(context.inputs, attributes);\n  context.compute(createPadProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { PoolConvUtil, ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramInputTensorInfoDependency, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (env.webgpu.validateInputContent && (!inputs || inputs.length !== 1)) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes | MaxPoolAttributes>(\n  input: TensorView,\n  attributes: AttributeType,\n  isGlobalOperator: boolean,\n): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = input.dims.slice();\n  if (isChannelsLast) {\n    inputShapeAsChannelFirst.splice(1, 0, inputShapeAsChannelFirst.pop()!); // Move channel to the second position.\n  }\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n    isGlobalOperator,\n    inputShapeAsChannelFirst,\n    strides,\n    dilations,\n    kernelShape,\n    pads,\n    attributes.autoPad,\n  );\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, { kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey });\n  } else {\n    Object.assign(newAttributes, { kernelShape, strides, pads, cacheKey: attributes.cacheKey });\n  }\n  const outputShapeAsChannelLast = outputShapeAsChannelFirst.slice();\n  outputShapeAsChannelLast.push(outputShapeAsChannelLast.splice(1, 1)[0]);\n  return [newAttributes, isChannelsLast ? outputShapeAsChannelLast : outputShapeAsChannelFirst];\n};\n\nconst getUniformAndPadInfo = <AttributeType extends AveragePoolAttributes | MaxPoolAttributes>(\n  outputShape: readonly number[],\n  attributes: AttributeType,\n): [ProgramUniform[], UniformsArrayType, boolean, boolean, boolean] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const outputSize = ShapeUtil.size(outputShape);\n  const kernelSize = ShapeUtil.size(attributes.kernelShape);\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: kernelSize },\n  ];\n  const uniforms: UniformsArrayType = [\n    { name: 'outputSize', type: 'u32' },\n    { name: 'kernelSize', type: 'u32' },\n  ];\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const pwStartEndNotZero = !!(pwStart + pwEnd);\n    programUniforms.push(\n      { type: DataType.uint32, data: kw },\n      { type: DataType.uint32, data: sw },\n      { type: DataType.uint32, data: pwStart },\n      { type: DataType.uint32, data: pwEnd },\n    );\n    uniforms.push(\n      { name: 'kw', type: 'u32' },\n      { name: 'sw', type: 'u32' },\n      { name: 'pwStart', type: 'u32' },\n      { name: 'pwEnd', type: 'u32' },\n    );\n\n    let phStartEndNotZero = false;\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      phStartEndNotZero = !!(phStart + phEnd);\n      programUniforms.push(\n        { type: DataType.uint32, data: kh },\n        { type: DataType.uint32, data: sh },\n        { type: DataType.uint32, data: phStart },\n        { type: DataType.uint32, data: phEnd },\n      );\n\n      uniforms.push(\n        { name: 'kh', type: 'u32' },\n        { name: 'sh', type: 'u32' },\n        { name: 'phStart', type: 'u32' },\n        { name: 'phEnd', type: 'u32' },\n      );\n    }\n    return [programUniforms, uniforms, true, pwStartEndNotZero, phStartEndNotZero];\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    programUniforms.push(\n      { type: DataType.uint32, data: kernelStrides },\n      { type: DataType.uint32, data: attributes.pads },\n      { type: DataType.uint32, data: attributes.strides },\n    );\n    uniforms.push(\n      { name: 'kernelStrides', type: 'u32', length: kernelStrides.length },\n      { name: 'pads', type: 'u32', length: attributes.pads.length },\n      { name: 'strides', type: 'u32', length: attributes.strides.length },\n    );\n\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    return [programUniforms, uniforms, !!hasPads, false, false];\n  }\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes | MaxPoolAttributes>(\n  shaderHelper: ShaderHelper,\n  x: IndicesHelper,\n  rank: number,\n  outputShapeRank: number,\n  attributes: AttributeType,\n  op1: string,\n  op2: string,\n  start: number,\n  uniforms: UniformsArrayType,\n  hasPads: boolean,\n  pwStartEndNotZero: boolean,\n  phStartEndNotZero: boolean,\n): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const dataType = x.type.value;\n  const output = outputVariable('output', x.type.tensor, outputShapeRank);\n\n  if (attributes.kernelShape.length <= 2) {\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    if (pwStartEndNotZero) {\n      codeW = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${dimIdxW}] = indices[${dimIdxW}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}]\n                      >= uniforms.x_shape[${dimIdxW}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${x.indicesToOffset('xIndices')}];\n                  ${op1}\n                }`;\n    } else {\n      codeW = `\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${dimIdxW}] = indices[${dimIdxW}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${x.indicesToOffset('xIndices')}];\n                  ${op1}\n                }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      if (phStartEndNotZero) {\n        codeH = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= uniforms.x_shape[${dimIdxH}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * uniforms.sh - uniforms.phStart + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n              var xIndices = ${output.offsetToIndices('global_idx')};\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const stridesRank = attributes.kernelShape.length;\n    const padsRank = attributes.pads.length;\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${x.indicesToOffset('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            ${shaderHelper.registerUniforms(uniforms).declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n              let indices = ${output.offsetToIndices('global_idx')};\n              var xIndices = ${output.offsetToIndices('global_idx')};\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / ${getElementAt('uniforms.kernelStrides', 'j', stridesRank)};\n                  offset -= offsets[j] * ${getElementAt('uniforms.kernelStrides', 'j', stridesRank)};\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * ${getElementAt(\n                    'uniforms.strides',\n                    `j - ${rank - stridesRank}u`,\n                    stridesRank,\n                  )}\n                    + offsets[j - ${rank - stridesRank}u] - ${getElementAt('uniforms.pads', 'j - 2u', padsRank)};\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC' | 'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst createShaderKeyFromAttributes = (attributes: PoolCommonAttributes): string =>\n  `${attributes.format};${attributes.ceilMode};${attributes.autoPad};${attributes.kernelShape.length}`;\n\nconst createAveragePoolShaderKeyFromAttributes = (attributes: AveragePoolAttributes): string =>\n  `${createShaderKeyFromAttributes(attributes)};${attributes.countIncludePad}`;\n\nconst createMaxPoolShaderKeyFromAttributes = (attributes: MaxPoolAttributes): string =>\n  `${createShaderKeyFromAttributes(attributes)};${attributes.storageOrder};${attributes.dilations}`;\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number],\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo = (\n  name: string,\n  input: TensorView,\n  isGlobalOperator: boolean,\n  attributes: AveragePoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    input,\n    attributes,\n    isGlobalOperator,\n  );\n  const x = inputVariable('x', input.dataType, input.dims.length);\n  const dataType = x.type.value;\n\n  const op1 = 'value += x_val;';\n  let op2 = '';\n  if (adjustedAttributes.countIncludePad) {\n    op2 += `value /= ${dataType}(uniforms.kernelSize);`;\n  } else {\n    op2 += `value /= ${dataType}(i32(uniforms.kernelSize) - pad);`;\n  }\n  const [programUniforms, uniforms, hasPads, pwStartEndNotZero, phStartEndNotZero] = getUniformAndPadInfo(\n    outputShape,\n    adjustedAttributes,\n  );\n  programUniforms.push(...createTensorShapeVariables(input.dims, outputShape));\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank'];\n  return {\n    name,\n    shaderCache: {\n      hint: `${attributes.cacheKey};${hasPads};${pwStartEndNotZero};${phStartEndNotZero}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: input.dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource: (shaderHelper) =>\n      generatePoolingCode(\n        shaderHelper,\n        x,\n        input.dims.length,\n        outputShape.length,\n        adjustedAttributes,\n        op1,\n        op2,\n        0.0,\n        uniforms,\n        hasPads,\n        pwStartEndNotZero,\n        phStartEndNotZero,\n      ),\n  };\n};\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n  const averagePoolAttributes = { countIncludePad, ...attr, cacheKey: '' };\n  return { ...averagePoolAttributes, cacheKey: createAveragePoolShaderKeyFromAttributes(averagePoolAttributes) };\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createAveragePoolProgramInfo('AveragePool', context.inputs[0], false, attributes));\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return { format, ...globalPoolAttributes, cacheKey: format };\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createAveragePoolProgramInfo('GlobalAveragePool', context.inputs[0], true, attributes));\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo = (\n  name: string,\n  input: TensorView,\n  isGlobalOperator: boolean,\n  attributes: MaxPoolAttributes,\n): ProgramInfo => {\n  const [adjustedAttributes, outputShape] = getAdjustedPoolAttributesAndOutputShape(\n    input,\n    attributes,\n    isGlobalOperator,\n  );\n  const op1 = `\n      value = max(x_val, value);\n    `;\n  const op2 = '';\n  const x = inputVariable('x', input.dataType, input.dims.length);\n  const inputDependencies: ProgramInputTensorInfoDependency[] = ['rank'];\n  const [programUniforms, uniforms, hasPads, pwStartEndNotZero, phStartEndNotZero] = getUniformAndPadInfo(\n    outputShape,\n    adjustedAttributes,\n  );\n  programUniforms.push(...createTensorShapeVariables(input.dims, outputShape));\n  return {\n    name,\n    shaderCache: {\n      hint: `${attributes.cacheKey};${hasPads};${pwStartEndNotZero};${phStartEndNotZero}`,\n      inputDependencies,\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: input.dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource: (shaderHelper) =>\n      generatePoolingCode(\n        shaderHelper,\n        x,\n        input.dims.length,\n        outputShape.length,\n        adjustedAttributes,\n        op1,\n        op2,\n        input.dataType === DataType.float16 ? -65504 : -1e5,\n        uniforms,\n        hasPads,\n        pwStartEndNotZero,\n        phStartEndNotZero,\n      ),\n  };\n};\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createMaxPoolProgramInfo('MaxPool', context.inputs[0], false, attributes));\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n  const maxPoolAttributes = { storageOrder, dilations, ...attr, cacheKey: '' };\n  return { ...maxPoolAttributes, cacheKey: createMaxPoolShaderKeyFromAttributes(maxPoolAttributes) };\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return { format, ...globalPoolAttributes, cacheKey: format };\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createMaxPoolProgramInfo('GlobalMaxPool', context.inputs[0], true, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\nexport interface DequantizeLinerAttributes extends AttributeWithCacheKey {\n  axis: number;\n  blockSize: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: DequantizeLinerAttributes): void => {\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('DequantizeLinear requires 2 or 3 inputs.');\n  }\n  if (inputs.length === 3 && inputs[1].dims === inputs[2].dims) {\n    throw new Error('x-scale and x-zero-point must have the same shape.');\n  }\n  if (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType) {\n    throw new Error('x and x-zero-point must have the same data type.');\n  }\n  if (inputs[0].dataType === DataType.int32 && inputs.length > 2) {\n    throw new Error('In the case of dequantizing int32 there is no zero point.');\n  }\n  if (inputs[1].dims.length !== 0 && inputs[1].dims.length !== 1 && inputs[1].dims.length !== inputs[0].dims.length) {\n    throw new Error('scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.');\n  }\n  // validate scale and zero-point input shapes\n  if (inputs.length > 2) {\n    // zero-point input type should be the same as input data type.\n    if (inputs[0].dataType !== inputs[2].dataType) {\n      throw new Error('x and x-zero-point must have the same data type.');\n    }\n    // Scale and zero-point inputs must have the same shape\n    if (inputs[1].dims.length !== inputs[2].dims.length) {\n      throw new Error('scale and zero-point inputs must have the same rank.');\n    }\n    if (!inputs[1].dims.map((d, i) => d === inputs[2].dims[i]).reduce((a, b) => a && b, true)) {\n      throw new Error('scale and zero-point inputs must have the same shape.');\n    }\n  }\n  // Validate blockSize\n  if (attributes.blockSize > 0) {\n    // Block qunatization\n    if (inputs[1].dims.length === 0 || (inputs[1].dims.length === 1 && inputs[1].dims[0] === 1)) {\n      throw new Error('blockSize must be set only for block quantization.');\n    }\n    if (\n      !inputs[1].dims.map((d, i) => i === attributes.axis || d === inputs[0].dims[i]).reduce((a, b) => a && b, true)\n    ) {\n      throw new Error('For block qunatization, scale input shape to match the input shape except for the axis');\n    }\n    // Scale input rank should be same as the input rank\n    if (inputs[1].dims.length !== inputs[0].dims.length) {\n      throw new Error('For block qunatization the scale input rank must be the same as the x rank.');\n    }\n    const dI = inputs[0].dims[attributes.axis];\n    const si = inputs[1].dims[attributes.axis];\n    if (attributes.blockSize < Math.ceil(dI / si) || attributes.blockSize > Math.ceil(dI / (si - 1) - 1)) {\n      throw new Error('blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].');\n    }\n  }\n};\n\nconst createDequantizeLinearProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: DequantizeLinerAttributes,\n): ProgramInfo => {\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n  const inputType = inputs[0].dataType;\n  const isSigned = inputType === DataType.int8;\n  const outputShape = inputs[0].dims; // output shape is same as the input shape\n  const dataType = inputs[1].dataType; // output type is same as the the scale input type\n  const outputSize = ShapeUtil.size(outputShape);\n  const isPacked = inputType === DataType.int8 || inputType === DataType.uint8;\n  const inputShape = isPacked ? [Math.ceil(ShapeUtil.size(inputs[0].dims) / 4)] : inputs[0].dims;\n  const scaleShape = inputs[1].dims;\n  const zeroPointInput = inputs.length > 2 ? inputs[2] : undefined;\n  const zeroPointShape = zeroPointInput\n    ? isPacked\n      ? [Math.ceil(ShapeUtil.size(zeroPointInput.dims) / 4)]\n      : zeroPointInput.dims\n    : undefined;\n  // Scales input is a scaler for per-tensor/per-layer quantization, 1-D tensor for per-axis quantization\n  // or tensor with same rank as input for blocked quantization.\n  const perLayerQuantization = scaleShape.length === 0 || (scaleShape.length === 1 && scaleShape[0] === 1);\n  const perAxisQuantization = perLayerQuantization === false && scaleShape.length === 1;\n  // Left unnecessary commented-out assignment for documentation\n  // const blockQuantization = perLayerQuantization === false && perAxisQuantization === false;\n  const maxComponents = getMaxComponents(outputSize);\n  const useComponents = perLayerQuantization && (!isPacked || maxComponents === 4);\n  const components = useComponents ? maxComponents : 1;\n  const inputComponent = useComponents && !isPacked ? maxComponents : 1;\n  const input = inputVariable('input', isPacked ? DataType.uint32 : inputType, inputShape.length, inputComponent);\n  const scale = inputVariable('scale', dataType, scaleShape.length);\n  const zeroPoint = zeroPointInput\n    ? inputVariable('zero_point', isPacked ? DataType.uint32 : inputType, zeroPointShape!.length)\n    : undefined;\n  const output = outputVariable('output', dataType, outputShape.length, components);\n  const inputVariables = [input, scale];\n  if (zeroPoint) {\n    inputVariables.push(zeroPoint);\n  }\n  const inputShapes = [inputShape, scaleShape];\n  if (zeroPointInput) {\n    inputShapes.push(zeroPointShape!);\n  }\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize / components },\n    { type: DataType.uint32, data: axis },\n    { type: DataType.uint32, data: attributes.blockSize },\n    ...createTensorShapeVariables(...inputShapes, outputShape),\n  ];\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniforms: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'axis', type: 'u32' },\n      { name: 'block_size', type: 'u32' },\n    ];\n    return `\n      ${shaderHelper.registerUniforms(uniforms).declareVariables(...inputVariables, output)}\n      ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n          let output_indices = ${output.offsetToIndices('global_idx')};\n\n          // Set input x\n          ${(() => {\n            if (isPacked) {\n              return `\n            let input = ${input.getByOffset('global_idx / 4')};\n            let x_vec = ${isSigned ? 'unpack4xI8(input)' : 'unpack4xU8(input)'};\n            let x_value = ${components === 1 ? 'x_vec[global_idx % 4]' : 'x_vec'};`;\n            } else {\n              return `let x_value = ${input.getByOffset('global_idx')};`;\n            }\n          })()};\n\n          // Set scale input\n          ${(() => {\n            if (perLayerQuantization) {\n              // scale input is a scalar ()\n              return `let scale_value= ${scale.getByOffset('0')}`;\n            } else if (perAxisQuantization) {\n              // scale input is a 1D tensor\n              return `\n            let scale_index = ${output.indicesGet('output_indices', 'uniforms.axis')};\n            let scale_value= ${scale.getByOffset('scale_index')};`;\n            } else {\n              // Block quantization. Scale input rank is same as input/output rank.\n              return `\n            var scale_indices: ${scale.type.indices} = output_indices;\n            let index = ${scale.indicesGet('scale_indices', 'uniforms.axis')} / uniforms.block_size;\n            ${scale.indicesSet('scale_indices', 'uniforms.axis', 'index')};\n            let scale_value= ${scale.getByIndices('scale_indices')};`;\n            }\n          })()};\n\n          // Set zero-point input\n          ${(() => {\n            if (zeroPoint) {\n              if (perLayerQuantization) {\n                // zero-point input is a scalar\n                if (isPacked) {\n                  return `\n                let zero_point_input = ${zeroPoint.getByOffset('0')};\n                let zero_point_vec =  ${isSigned ? 'unpack4xI8(zero_point_input)' : 'unpack4xU8(zero_point_input)'};\n                let zero_point_value= zero_point_vec[0]`;\n                } else {\n                  return `let zero_point_value = ${zeroPoint.getByOffset('0')}`;\n                }\n              } else if (perAxisQuantization) {\n                // zero-point input is a 1D tensor\n                if (isPacked) {\n                  return `\n                let zero_point_index = ${output.indicesGet('output_indices', 'uniforms.axis')};\n                let zero_point_input = ${zeroPoint.getByOffset('zero_point_index / 4')};\n                let zero_point_vec =  ${isSigned ? 'unpack4xI8(zero_point_input)' : 'unpack4xU8(zero_point_input)'};\n                let zero_point_value = zero_point_vec[zero_point_index % 4]`;\n                } else {\n                  return `\n                let zero_point_index = ${output.indicesGet('output_indices', 'uniforms.axis')};\n                let zero_point_value = ${zeroPoint.getByOffset('zero_point_index')};`;\n                }\n              } else {\n                // BlockedQuantization. The zero-point input shape is same as the input shape except along axis.\n                if (isPacked) {\n                  return `\n                let zero_point_offset = ${scale.indicesToOffset('scale_indices')};\n                let zero_point_input = ${zeroPoint.getByOffset('zero_point_offset / 4')};\n                let zero_point_vec = ${isSigned ? 'unpack4xI8(zero_point_input)' : 'unpack4xU8(zero_point_input)'};\n                let zero_point_value = zero_point_vec[zero_point_offset % 4];`;\n                } else {\n                  return `let zero_point_value = ${zeroPoint.getByIndices('scale_indices')};`;\n                }\n              }\n            } else {\n              return `let zero_point_value = ${isPacked ? (isSigned ? 'i32' : 'u32') : input.type.value}(0);`;\n            }\n          })()};\n      // Compute and write output\n      ${output.setByOffset('global_idx', `${output.type.value}(x_value - zero_point_value) * scale_value`)};\n      }`;\n  };\n  return {\n    name: 'DequantizeLinear',\n    shaderCache: {\n      hint: attributes.cacheKey,\n      inputDependencies: zeroPoint ? ['rank', 'rank', 'rank'] : ['rank', 'rank'],\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / components / 64), y: 1, z: 1 },\n      programUniforms,\n    }),\n  };\n};\n\nexport const dequantizeLinear = (context: ComputeContext, attributes: DequantizeLinerAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  context.compute(createDequantizeLinearProgramInfo(context.inputs, attributes));\n};\n\nexport const parseDequantizeLinearAttributes = (attributes: Record<string, unknown>): DequantizeLinerAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number, blockSize: attributes.blockSize as number });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env } from 'onnxruntime-common';\n\nimport { DataType } from '../../../wasm-common';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  outputVariable,\n  ShaderHelper,\n  UniformDataElementType,\n  UniformsArrayType,\n} from './common';\n\nconst validateInputsContent = (start: number, limit: number, delta: number): void => {\n  const sameStartLimit = start === limit;\n  const increasingRangeNegativeStep = start < limit && delta < 0;\n  const decreasingRangePositiveStep = start > limit && delta > 0;\n\n  if (sameStartLimit || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n    throw new Error(\"Range these inputs' contents are invalid.\");\n  }\n};\n\nconst createRangeProgramInfo = (start: number, limit: number, delta: number, dataType: DataType): ProgramInfo => {\n  const numElements = Math.abs(Math.ceil((limit - start) / delta));\n  const outputShape: number[] = [numElements];\n  const outputSize = numElements;\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: dataType, data: start },\n    { type: dataType, data: delta },\n    ...createTensorShapeVariables(outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const output = outputVariable('output', dataType, outputShape.length);\n    const wgslType = output.type.value;\n    const uniforms: UniformsArrayType = [\n      { name: 'outputSize', type: 'u32' },\n      { name: 'start', type: wgslType as UniformDataElementType },\n      { name: 'delta', type: wgslType as UniformDataElementType },\n    ];\n    return `\n        ${shaderHelper.registerUniforms(uniforms).declareVariables(output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n        output[global_idx] = uniforms.start + ${wgslType}(global_idx) * uniforms.delta;\n      }`;\n  };\n\n  return {\n    name: 'Range',\n    shaderCache: { hint: `${dataType}` },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const range = (context: ComputeContext): void => {\n  let start = 0;\n  let limit = 0;\n  let delta = 0;\n  if (context.inputs[0].dataType === DataType.int32) {\n    start = context.inputs[0].getInt32Array()[0];\n    limit = context.inputs[1].getInt32Array()[0];\n    delta = context.inputs[2].getInt32Array()[0];\n  } else if (context.inputs[0].dataType === DataType.float) {\n    start = context.inputs[0].getFloat32Array()[0];\n    limit = context.inputs[1].getFloat32Array()[0];\n    delta = context.inputs[2].getFloat32Array()[0];\n  }\n  if (env.webgpu.validateInputContent) {\n    validateInputsContent(start, limit, delta);\n  }\n\n  context.compute(createRangeProgramInfo(start, limit, delta, context.inputs[0].dataType), { inputs: [] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  atomicOutputVariable,\n  createTensorShapeVariables,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n} from './common';\n\nexport interface ScatterNDAttributes extends AttributeWithCacheKey {\n  reduction: string;\n}\n\ntype ReductionType = 'i32' | 'u32' | 'f32';\n\nconst atomicReductionSnippet = (reduction: string, ptr: string, v: string, type: ReductionType) => {\n  if (reduction !== 'none' && type !== 'i32' && type !== 'u32' && type !== 'f32') {\n    throw new Error(`Input ${type} is not supported with reduction ${reduction}.`);\n  }\n\n  const floatStart = `{\n                var oldValue = 0;\n                loop {\n                  let newValueF32 =`;\n  const floatEnd = `;\n                  let newValue = bitcast<i32>(newValueF32);\n                  let res = atomicCompareExchangeWeak(&${ptr}, oldValue, newValue);\n                  if res.exchanged {\n                    break;\n                  }\n                  oldValue = res.old_value;\n                }\n              }`;\n\n  switch (reduction) {\n    case 'none':\n      return `${ptr}=${v};`;\n    case 'add':\n      if (type === 'i32' || type === 'u32') {\n        return `atomicAdd(&${ptr}, bitcast<${type}>(${v}));`;\n      } else {\n        // atomicAdd only supports uint/int type. For float, we use\n        // atomicCompareExchangeWeak to simulate.\n        return `\n              ${floatStart}bitcast<${type}>(oldValue) + (${v})${floatEnd}`;\n      }\n    case 'max':\n      if (type === 'i32' || type === 'u32') {\n        return `atomicMax(&${ptr}, bitcast<${type}>(${v}));`;\n      } else {\n        // atomicMax only supports uint/int type. For float, we use\n        // atomicCompareExchangeWeak to simulate.\n        return `\n                ${floatStart}max(bitcast<f32>(oldValue), (${v}))${floatEnd}`;\n      }\n    case 'min':\n      if (type === 'i32' || type === 'u32') {\n        return `atomicMin(&${ptr}, bitcast<${type}>(${v}));`;\n      } else {\n        // atomicMin only supports uint/int type. For float, we use\n        // atomicCompareExchangeWeak to simulate.\n        return `${floatStart}min(bitcast<${type}>(oldValue), (${v}))${floatEnd}`;\n      }\n    case 'mul':\n      // atomicMul is not supported, we use atomicCompareExchangeWeak to simulate.\n      return `${floatStart}(bitcast<${type}>(oldValue) * (${v}))${floatEnd}`;\n\n    default:\n      throw new Error(`Reduction ${reduction} is not supported.`);\n  }\n};\n\nconst createScatterNDProgramInfo = (inputs: readonly TensorView[], attributes: ScatterNDAttributes): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const indicesShape = inputs[1].dims;\n  const outputShape = inputShape;\n  // TODO: support bool with components 4.\n  const components = 1;\n  const outputSize = Math.ceil(ShapeUtil.size(indicesShape) / components);\n  const lastIndexDimension = indicesShape[indicesShape.length - 1];\n  const numUpdatesElements = ShapeUtil.sizeFromDimension(inputShape, lastIndexDimension);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: lastIndexDimension },\n    { type: DataType.uint32, data: numUpdatesElements },\n    ...createTensorShapeVariables(inputs[1].dims, inputs[2].dims, outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const indices = inputVariable('indices', inputs[1].dataType, inputs[1].dims.length);\n    const updates = inputVariable('updates', inputs[2].dataType, inputs[2].dims.length, components);\n    const output =\n      attributes.reduction !== 'none' && attributes.reduction !== ''\n        ? atomicOutputVariable('output', inputs[0].dataType, outputShape.length)\n        : outputVariable('output', inputs[0].dataType, outputShape.length, components);\n\n    return `\n      ${shaderHelper\n        .registerUniform('output_size', 'u32')\n        .registerUniform('last_index_dimension', 'u32')\n        .registerUniform('num_updates_elements', 'u32')\n        .declareVariables(indices, updates, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n  var data_offset = 0u;\n  let indices_start = uniforms.last_index_dimension * global_idx;\n  let indices_end = indices_start + uniforms.last_index_dimension;\n  for (var i = indices_start; i < indices_end; i++) {\n    var index = i32(indices[i].x);\n    ${\n      inputs[0].dims.length === 1\n        ? `\n    let element_count_dim = uniforms.output_strides;\n    let dim_value = uniforms.output_shape;`\n        : `\n    let element_count_dim = uniforms.output_strides[i - indices_start];\n    let dim_value = uniforms.output_shape[i - indices_start + uniforms.last_index_dimension];`\n    }\n    if (index >= 0) {\n      if (index >= i32(dim_value)) {\n        index = i32(dim_value - 1);\n      }\n    } else {\n      if (index < -i32(dim_value)) {\n        index = 0;\n      } else {\n        index += i32(dim_value);\n      }\n    }\n    data_offset += u32((u32(index) * element_count_dim));\n  }\n\n  for (var i = 0u; i < uniforms.num_updates_elements; i++) {\n    let value = updates[uniforms.num_updates_elements * global_idx + i];\n    ${atomicReductionSnippet(\n      attributes.reduction,\n      'output[data_offset + i]',\n      'value',\n      output.type.value as ReductionType,\n    )}\n  }\n\n      }`;\n  };\n  return {\n    name: 'ScatterND',\n    shaderCache: {\n      hint: `${attributes.cacheKey}_${attributes.reduction}`,\n      inputDependencies: ['rank', 'rank'],\n    },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n    getShaderSource,\n  };\n};\n\nexport const parseScatterNDAttributes = (attributes: Record<string, unknown>): ScatterNDAttributes =>\n  createAttributeWithCacheKey({ reduction: attributes.reduction as string });\n\nexport const scatterND = (context: ComputeContext, attributes: ScatterNDAttributes): void => {\n  context.compute(createScatterNDProgramInfo(context.inputs, attributes), {\n    inputs: [context.inputs[1], context.inputs[2]],\n    outputs: [],\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n} from './common';\n\ntype CoordinateTransformMode =\n  | 'half_pixel'\n  | 'asymmetric'\n  | 'pytorch_half_pixel'\n  | 'tf_half_pixel_for_nn'\n  | 'align_corners'\n  | 'tf_crop_and_resize'\n  | 'half_pixel_symmetric';\n\ntype KeepAspectRatioPolicy = 'stretch' | 'not_smaller' | 'not_larger';\n\ntype Mode = 'nearest' | 'linear' | 'cubic';\n\ntype NearestMode = 'round_prefer_floor' | 'round_prefer_ceil' | 'floor' | 'ceil' | 'simple';\n\nexport interface ResizeAttributes extends AttributeWithCacheKey {\n  antialias: number;\n  axes: number[];\n  coordinateTransformMode: CoordinateTransformMode;\n  cubicCoeffA: number;\n  excludeOutside: boolean;\n  extrapolationValue: number;\n  keepAspectRatioPolicy: KeepAspectRatioPolicy;\n  mode: Mode;\n  nearestMode: NearestMode;\n}\n\nconst validateScales = (scales: number[], attributes: ResizeAttributes): void => {\n  scales.every(\n    (value) =>\n      value > 0 ||\n      (() => {\n        throw new Error('Resize requires scales input values to be positive');\n      }),\n  );\n  // Check scales dims based on mode: LINEAR, CUBIC\n  if (scales.length > 0) {\n    if (attributes.mode === 'linear') {\n      if (\n        !(\n          scales.length === 2 ||\n          scales.length === 3 ||\n          (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n          (scales.length === 4 && scales[0] === 1 && scales[3] === 1) ||\n          (scales.length === 5 && scales[0] === 1 && scales[1] === 1)\n        )\n      ) {\n        throw new Error(\n          `For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`,\n        );\n      }\n    } else if (attributes.mode === 'cubic') {\n      if (\n        !(\n          scales.length === 2 ||\n          (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n          (scales.length === 4 && scales[0] === 1 && scales[3] === 1)\n        )\n      ) {\n        throw new Error('Resize requires scales input size to be 2 or 4 for cubic mode');\n      }\n    }\n  }\n};\n\nconst updateScales = (scales: readonly number[], axes: readonly number[], rank: number): number[] => {\n  axes.every(\n    (value) =>\n      (value >= 0 && value < rank) ||\n      (() => {\n        throw new Error('Resize requires axes input values to be positive and less than rank');\n      }),\n  );\n  const newScales = new Array(rank).fill(1.0);\n  axes.forEach((value, index) => (newScales[value] = scales[index]));\n  return newScales;\n};\n\nconst validateInputs = (\n  inputs: readonly TensorView[],\n  attributes: ResizeAttributes,\n  opsetVersion: number,\n  scales: number[],\n  sizes: number[],\n  roi: number[],\n): void => {\n  const [roiInputIndex, scalesInputIndex, sizesInputIndex] =\n    opsetVersion > 10 ? [1, 2, 3] : [-1, inputs.length > 1 ? 1 : -1, -1];\n  const rank = inputs[0].dims.length;\n  if (roiInputIndex > 0 && inputs.length > roiInputIndex && inputs[roiInputIndex].dims.length > 0) {\n    inputs[roiInputIndex].getFloat32Array().forEach((value) => roi.push(value));\n  } else if (attributes.coordinateTransformMode === 'tf_crop_and_resize') {\n    throw new Error('Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize');\n  }\n\n  if (\n    scalesInputIndex > 0 &&\n    inputs.length > scalesInputIndex &&\n    inputs[scalesInputIndex].dims.length === 1 &&\n    inputs[scalesInputIndex].dims[0] > 0\n  ) {\n    inputs[scalesInputIndex].getFloat32Array().forEach((value) => scales.push(value));\n    if (\n      scales.length !== 0 &&\n      scales.length !== rank &&\n      opsetVersion >= 18 &&\n      scales.length !== attributes.axes.length\n    ) {\n      throw new Error('Resize requires scales input size to be same as input rank or axes size for opset 18 and up');\n    }\n    validateScales(scales, attributes);\n    if (attributes.axes.length > 0) {\n      updateScales(scales, attributes.axes, rank).forEach((value, index) => (scales[index] = value));\n    }\n  }\n  if (\n    sizesInputIndex > 0 &&\n    inputs.length > sizesInputIndex &&\n    inputs[sizesInputIndex].dims.length === 1 &&\n    inputs[sizesInputIndex].dims[0] > 0\n  ) {\n    inputs[sizesInputIndex].getBigInt64Array().forEach((value) => sizes.push(Number(value)));\n    if (sizes.length !== 0 && sizes.length !== rank && opsetVersion >= 18 && sizes.length !== attributes.axes.length) {\n      throw new Error('Resize requires sizes input size to be same as input rank or axes size for opset 18 and up');\n    }\n  }\n\n  if (attributes.axes.length > 0) {\n    if (scales.length !== 0 && scales.length !== attributes.axes.length) {\n      throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\n    }\n    if (sizes.length !== 0 && sizes.length !== attributes.axes.length) {\n      throw new Error('Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\n    }\n  }\n  if (typeof scales !== 'undefined' && typeof sizes !== 'undefined' && scales.length > 0 && sizes.length > rank) {\n    throw new Error('Resize requires only of scales or sizes to be specified');\n  }\n};\n\nconst getSafeIntegerDivision = (a: string, b: string, c: string, dType: string): string => `\n  // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n  // offset-by-one error later in floor().\n  let big = (${a}) * (${b});\n  let whole = ${dType}(big / (${c}));\n  let fract = ${dType}(big % (${c})) / ${dType}(${c});\n  return whole + fract;\n`;\n\nconst getOriginalCoordinateFromResizedCoordinate = (\n  coordinateTransferMode: CoordinateTransformMode,\n  dType: string,\n): string =>\n  `fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${dType} { ` +\n  (() => {\n    switch (coordinateTransferMode) {\n      case 'asymmetric':\n        return `\n          if (xScale < 1.0 || floor(xScale) != xScale) {\n            return ${dType}(xResized) / ${dType}(xScale);\n          } else {\n            ${getSafeIntegerDivision('xResized', 'lengthOriginal', 'lengthResized', dType)}\n          }\n        `;\n      case 'pytorch_half_pixel':\n        return `if (lengthResized > 1) {\n                    return (${dType}(xResized) + 0.5) / ${dType}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;\n      case 'tf_half_pixel_for_nn':\n        return `return (${dType}(xResized) + 0.5) / ${dType}(xScale);`;\n      case 'align_corners':\n        return `if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    ${getSafeIntegerDivision('xResized', 'lengthOriginal - 1', 'lengthResized - 1', dType)}\n                  }`;\n      case 'tf_crop_and_resize':\n        return `if (lengthResized > 1) {\n                    return ${dType}(roiStart) * ${dType}(lengthOriginal - 1) +\n                        (${dType}(xResized) * ${dType}(roiEnd - roiStart) * ${dType}(lengthOriginal - 1)) /\n                        ${dType}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${dType}(roiStart + roiEnd) * ${dType}(lengthOriginal - 1);\n                  }`;\n      case 'half_pixel_symmetric':\n        return `const outputWidth = ${dType}xScale * ${dType}(lengthResized);\n                  const adjustment = ${dType}(lengthResized) / outputWidth;\n                  const center = ${dType}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${dType}(xResized) + 0.5) / ${dType}(xScale)) - 0.5;`;\n      case 'half_pixel':\n        return `return ((${dType}(xResized) + 0.5) / ${dType}(xScale)) - 0.5;`;\n      default:\n        throw new Error(`Coordinate transform mode ${coordinateTransferMode} is not supported`);\n    }\n  })() +\n  '}';\n\nconst getNearestPixelFromOriginal = (nearestMode: NearestMode, opsetVersion: number, dType: string): string =>\n  `fn getNearestPixelFromOriginal(xOriginal: ${dType}, isDownSample: bool) -> ${dType} {` +\n  (() => {\n    switch (nearestMode) {\n      case 'round_prefer_ceil':\n        return 'if (fract(xOriginal) == 0.5) { \\\n            return ceil(xOriginal); \\\n          } else { \\\n            return round(xOriginal); \\\n          }';\n      case 'floor':\n        return 'return floor(xOriginal);';\n      case 'ceil':\n        return 'return ceil(xOriginal);';\n      case 'round_prefer_floor':\n        return 'if (fract(xOriginal) == 0.5) { \\\n                    return floor(xOriginal); \\\n                  } else { \\\n                    return round(xOriginal); \\\n                  }';\n      case 'simple':\n      default:\n        if (opsetVersion < 11) {\n          return 'if (isDownSample) \\\n                    { \\\n                      return ceil(xOriginal); \\\n                    } else { \\\n                      return xOriginal; \\\n                    }';\n        }\n        throw new Error(`Nearest mode ${nearestMode} is not supported`);\n    }\n  })() +\n  '}';\n\nconst updateRoI = (roi: readonly number[], axes: readonly number[], rank: number): number[] => {\n  const roiTmp = new Array(rank).fill(0).concat(new Array(rank).fill(1));\n  const roiLocal = roi.length === 0 ? roiTmp : roi.slice();\n  if (axes.length > 0) {\n    axes.forEach((v, i) => {\n      roiTmp[v] = roiLocal[i];\n      roiTmp[i + rank] = roiLocal[axes.length + i];\n    });\n    return roiTmp;\n  }\n  return roiLocal;\n};\n\nconst initOutputShape = (\n  inputShape: readonly number[],\n  scales: readonly number[],\n  sizes: readonly number[],\n  axes: readonly number[],\n): number[] => {\n  let outputShape: number[] = [];\n  if (sizes.length > 0) {\n    if (axes.length > 0) {\n      inputShape.forEach((v) => outputShape.push(v));\n      if (Math.max(...axes) > inputShape.length) {\n        throw new Error('axes is out of bound');\n      }\n      axes.forEach((v, i) => (outputShape[v] = sizes[i]));\n    } else {\n      sizes.forEach((v) => outputShape.push(v));\n    }\n  } else {\n    if (scales.length === 0) {\n      throw new Error('Resize requires either scales or sizes.');\n    } else {\n      outputShape = inputShape.map((value, index) => Math.round(value * scales[index]));\n    }\n  }\n  return outputShape;\n};\n\nconst adjustOutputShape = (inputShape: readonly number[], scales: number[], attributes: ResizeAttributes) => {\n  const scaleInPolicy = (() => {\n    switch (attributes.keepAspectRatioPolicy) {\n      case 'not_larger':\n        return attributes.axes.length > 0\n          ? Math.min(...attributes.axes.map((i) => scales[i]), Number.MAX_VALUE)\n          : Math.min(...scales, Number.MAX_VALUE);\n      case 'not_smaller':\n        return attributes.axes.length > 0\n          ? Math.max(...attributes.axes.map((i) => scales[i]), Number.MIN_VALUE)\n          : Math.max(...scales, Number.MIN_VALUE);\n      default:\n        throw new Error(`Keep aspect ratio policy ${attributes.keepAspectRatioPolicy} is not supported`);\n    }\n  })();\n  scales.fill(1.0, 0, scales.length);\n  const adjustedOutputShape = inputShape.slice();\n  if (attributes.axes.length > 0) {\n    attributes.axes.forEach((v) => (scales[v] = scaleInPolicy));\n    attributes.axes.forEach((v) => (adjustedOutputShape[v] = Math.round(inputShape[v] * scales[v])));\n  } else {\n    scales.fill(scaleInPolicy, 0, scales.length);\n    adjustedOutputShape.forEach((v, i) => (adjustedOutputShape[i] = Math.round(v * scales[i])));\n  }\n  return adjustedOutputShape;\n};\n\nconst calculateOriginalIndicesFromOutputIndices = (\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  outputShape: readonly number[],\n  scalesLength: number,\n  roiLength: number,\n): string => `\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${output.type.indices}) -> array<${\n      output.type.value\n    }, ${outputShape.length}> {\n      var original_indices: array<${output.type.value}, ${outputShape.length}>;\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var output_index = ${output.indicesGet('output_indices', 'i')};\n        var scale = ${getElementAt('uniforms.scales', 'i', scalesLength)};\n        var roi_low = ${getElementAt('uniforms.roi', 'i', roiLength)};\n        var roi_hi = ${getElementAt('uniforms.roi', `i + ${inputShape.length}`, roiLength)};\n        if (scale == 1.0) {\n          original_indices[i] = ${output.type.value}(output_index);\n        } else {\n          var input_shape_i = ${getElementAt('uniforms.input_shape', 'i', inputShape.length)};\n          var output_shape_i = ${getElementAt('uniforms.output_shape', 'i', outputShape.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`;\n\nconst calculateInputIndicesFromOutputIndices = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  outputShape: readonly number[],\n  scalesLength: number,\n  roiLength: number,\n  useExtrapolation: boolean,\n): string => `\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${output.type.indices}) -> ${input.type.indices} {\n      var input_indices: ${input.type.indices};\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var output_index = ${output.indicesGet('output_indices', 'i')};\n        var input_index: u32;\n        var scale = ${getElementAt('uniforms.scales', 'i', scalesLength)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${getElementAt('uniforms.roi', 'i', roiLength)};\n          var roi_hi = ${getElementAt('uniforms.roi', `i + ${inputShape.length}`, roiLength)};\n          var input_shape_i = ${getElementAt('uniforms.input_shape', 'i', inputShape.length)};\n          var output_shape_i = ${getElementAt('uniforms.output_shape', 'i', outputShape.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${useExtrapolation} || (original_idx >= 0 && original_idx < ${output.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${output.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${input.indicesSet('input_indices', 'i', 'input_index')}\n      }\n      return input_indices;\n    }`;\nconst checkInputIndices = (input: IndicesHelper, inputShape: readonly number[]): string => `\n    fn checkInputIndices(input_indices: ${input.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${inputShape.length}; i++) {\n        var input_index = ${input.indicesGet('input_indices', 'i')};\n        if (input_index < 0 || input_index >= ${getElementAt('uniforms.input_shape', 'i', inputShape.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`;\n\nconst setChannelAndBatchIndices = (\n  input: IndicesHelper,\n  channelIdx: number,\n  batchIdx: number,\n  spacialDims: number,\n): string =>\n  input.rank > spacialDims\n    ? `\n    ${input.indicesSet('input_indices', channelIdx, 'channel')};\n    ${input.indicesSet('input_indices', batchIdx, 'batch')};\n`\n    : '';\n\nconst bilinearInterpolation = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  useExtrapolation: boolean,\n  extrapolationValue: number,\n): string => {\n  const isNchw = true;\n  const [batchIdx, heightIdx, widthIdx, channelIdx] =\n    inputShape.length === 2 ? [-1, 0, 1, -1] : isNchw ? [0, 2, 3, 1] : [0, 1, 2, 3];\n  const dType = input.type.value;\n  return `\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${dType} {\n      var input_indices: ${input.type.indices};\n      ${input.indicesSet('input_indices', heightIdx, `max(0, min(row, ${inputShape[heightIdx]} - 1))`)};\n      ${input.indicesSet('input_indices', widthIdx, `max(0, min(col, ${inputShape[widthIdx]} - 1))`)};\n      ${setChannelAndBatchIndices(input, channelIdx, batchIdx, 2)}\n      return ${input.getByIndices('input_indices')};\n    }\n\n    fn bilinearInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${dType} = originalIndices[${heightIdx}];\n      var col:${dType} = originalIndices[${widthIdx}];\n      ${\n        useExtrapolation\n          ? `if (row < 0 || row > (${inputShape[heightIdx]} - 1) || col < 0 || col > (${inputShape[widthIdx]} - 1)) {\n        return ${extrapolationValue};\n      }`\n          : ''\n      };\n      row = max(0, min(row, ${inputShape[heightIdx]} - 1));\n      col = max(0, min(col, ${inputShape[widthIdx]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${inputShape.length > 2 ? `u32(originalIndices[${channelIdx}])` : '0'};\n      var batch: u32 =  ${inputShape.length > 2 ? `u32(originalIndices[${batchIdx}])` : '0'};\n      var x11: ${dType} = getInputValue(batch, channel, row1, col1);\n      var x12: ${dType} = getInputValue(batch, channel, row1, col2);\n      var x21: ${dType} = getInputValue(batch, channel, row2, col1);\n      var x22: ${dType} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${dType} = abs(row - ${dType}(row1));\n      var dx2: ${dType} = abs(${dType}(row2) - row);\n      var dy1: ${dType} = abs(col - ${dType}(col1));\n      var dy2: ${dType} = abs(${dType}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`;\n};\n\nconst bicubicInterpolation = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  outputShape: readonly number[],\n  scales: readonly number[],\n  roi: readonly number[],\n  cubicCoeffA: number,\n  useExtrapolation: boolean,\n  extrapolationValue: number,\n  excludeOutside: boolean,\n): string => {\n  const is2D = inputShape.length === 2;\n  const isNchw = true;\n  const [heightIdx, widthIdx] = is2D ? [0, 1] : isNchw ? [2, 3] : [1, 2];\n  const dType = input.type.value;\n  const createCubicInterpolationFunction = (idx: number): string => {\n    const direction = idx === heightIdx ? 'row' : 'col';\n    return `\n      fn ${direction}CubicInterpolation(input_indices: ${input.type.indices}, output_indices: ${\n        output.type.indices\n      }) -> ${dType} {\n        var output_index = ${output.indicesGet('output_indices', idx)};\n        var originalIdx: ${dType} = getOriginalCoordinateFromResizedCoordinate(output_index, ${scales[idx]},\n        ${outputShape[idx]}, ${inputShape[idx]}, ${roi[idx]}, ${roi[idx]} + ${inputShape.length});\n        var fractOriginalIdx: ${dType} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${useExtrapolation} && (originalIdx < 0 || originalIdx > (${inputShape[idx]} - 1))) {\n          return ${extrapolationValue};\n        }\n        var data: array<${dType}, 4> = array<${dType}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${direction}: ${dType} = originalIdx + ${dType}(i);\n          if (${direction} < 0 || ${direction} >= ${inputShape[idx]}) {\n            ${(() => {\n              if (excludeOutside) {\n                return `coefs[i + 1] = 0.0;\n                        continue;`;\n              } else if (useExtrapolation) {\n                return `return ${extrapolationValue};`;\n              } else {\n                return `${direction} = max(0, min(${direction}, ${inputShape[idx]} - 1));`;\n              }\n            })()};\n          }\n        var input_indices_copy: ${input.type.indices} = input_indices;\n          ${input.indicesSet('input_indices_copy', idx, `u32(${direction})`)};\n          data[i + 1] = ${\n            idx === heightIdx\n              ? input.getByIndices('input_indices_copy')\n              : 'rowCubicInterpolation(input_indices_copy, output_indices)'\n          };\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`;\n  };\n\n  return `\n    ${createCubicInterpolationFunction(heightIdx)};\n    ${createCubicInterpolationFunction(widthIdx)};\n  fn getCubicInterpolationCoefs(s: ${dType}) -> array<${dType}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${dType}, 4> = array<${dType}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${dType} = 1.0 - absS;\n    var twoMinusAbsS: ${dType} = 2.0 - absS;\n    var onePlusAbsS: ${dType} = 1.0 + absS;\n    coeffs[0] = ((${cubicCoeffA} * onePlusAbsS - 5 * ${cubicCoeffA}) * onePlusAbsS + 8 * ${\n      cubicCoeffA\n    }) * onePlusAbsS - 4 * ${cubicCoeffA};\n    coeffs[1] = ((${cubicCoeffA} + 2) * absS - (${cubicCoeffA} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${cubicCoeffA} + 2) * oneMinusAbsS - (${cubicCoeffA} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${cubicCoeffA} * twoMinusAbsS - 5 * ${cubicCoeffA}) * twoMinusAbsS + 8 * ${\n      cubicCoeffA\n    }) * twoMinusAbsS - 4 * ${cubicCoeffA};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${dType}, 4>, coefs: array<${dType}, 4>) -> ${dType} {\n    var coefsSum: ${dType} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n    var input_indices: ${input.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `;\n};\n\nconst trilinearInterpolation = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n  useExtrapolation: boolean,\n  extrapolationValue: number,\n): string => {\n  const isNchw = true;\n  const [batchIdx, depthIdx, heightIdx, widthIdx, channelIdx] =\n    inputShape.length === 3 ? [-1, 0, 1, 2, -1] : isNchw ? [0, 2, 3, 4, 1] : [0, 1, 2, 3, 4];\n  const dType = input.type.value;\n  return `\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${dType} {\n      var input_indices: ${input.type.indices};\n      ${input.indicesSet('input_indices', depthIdx, `max(0, min(depth, ${inputShape[depthIdx]} - 1))`)};\n      ${input.indicesSet('input_indices', heightIdx, `max(0, min(height, ${inputShape[heightIdx]} - 1))`)};\n      ${input.indicesSet('input_indices', widthIdx, `max(0, min(width, ${inputShape[widthIdx]} - 1))`)};\n      ${setChannelAndBatchIndices(input, channelIdx, batchIdx, 3)}\n      return ${input.getByIndices('input_indices')};\n    }\n\n    fn trilinearInterpolation(output_indices: ${output.type.indices}) -> ${dType} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${dType} = originalIndices[${depthIdx}];\n      var height:${dType} = originalIndices[${heightIdx}];\n      var width:${dType} = originalIndices[${widthIdx}];\n      ${\n        useExtrapolation\n          ? `if (depth < 0 || depth > (${inputShape[depthIdx]} - 1) || height < 0 || height > (${\n              inputShape[heightIdx]\n            } - 1) || width < 0 || (width > ${inputShape[widthIdx]} - 1)) {\n      return ${extrapolationValue};\n        }`\n          : ''\n      };\n\n    depth = max(0, min(depth, ${inputShape[depthIdx]} - 1));\n      height = max(0, min(height, ${inputShape[heightIdx]} - 1));\n      width = max(0, min(width, ${inputShape[widthIdx]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${inputShape.length > 3 ? `u32(originalIndices[${channelIdx}])` : '0'};\n      var batch: u32 =  ${inputShape.length > 3 ? `u32(originalIndices[${batchIdx}])` : '0'};\n\n      var x111: ${dType} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${dType} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${dType} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${dType} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${dType} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${dType} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${dType} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${dType} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${dType} = abs(depth - ${dType}(depth1));\n      var dx2: ${dType} = abs(${dType}(depth2) - depth);\n      var dy1: ${dType} = abs(height - ${dType}(height1));\n      var dy2: ${dType} = abs(${dType}(height2) - height);\n      var dz1: ${dType} = abs(width - ${dType}(width1));\n      var dz2: ${dType} = abs(${dType}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`;\n};\n\nconst createResizeProgramInfo = (\n  inputTensor: TensorView,\n  attributes: ResizeAttributes,\n  opsetVersion: number,\n  scalesInput: readonly number[],\n  sizes: readonly number[],\n  roiInput: readonly number[],\n): ProgramInfo => {\n  const inputShape = inputTensor.dims;\n  const roi = updateRoI(roiInput, attributes.axes, inputShape.length);\n\n  let outputShape = initOutputShape(inputShape, scalesInput, sizes, attributes.axes);\n  let scales = scalesInput.slice();\n  if (scalesInput.length === 0) {\n    scales = inputShape.map((value, index) => (value === 0 ? 1.0 : outputShape[index] / value));\n    if (attributes.keepAspectRatioPolicy !== 'stretch') {\n      outputShape = adjustOutputShape(inputShape, scales, attributes);\n    }\n  }\n  const output = outputVariable('output', inputTensor.dataType, outputShape.length);\n  const input = inputVariable('input', inputTensor.dataType, inputShape.length);\n  const outputSize = ShapeUtil.size(outputShape);\n  const noScale = inputShape.length === outputShape.length && inputShape.every((d, i) => d === outputShape[i]);\n  const useExtrapolation = attributes.coordinateTransformMode === 'tf_crop_and_resize';\n  const extrapolationValue = attributes.extrapolationValue;\n  const dataType = input.type.value;\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${\n        noScale\n          ? ''\n          : `\n      ${getOriginalCoordinateFromResizedCoordinate(attributes.coordinateTransformMode, dataType)};\n      ${(() => {\n        switch (attributes.mode) {\n          case 'nearest':\n            return `\n              ${checkInputIndices(input, inputShape)};\n              ${getNearestPixelFromOriginal(attributes.nearestMode, opsetVersion, dataType)};\n              ${calculateInputIndicesFromOutputIndices(\n                input,\n                output,\n                inputShape,\n                outputShape,\n                scales.length,\n                roi.length,\n                useExtrapolation,\n              )};\n              `;\n          case 'linear':\n            return `\n              ${calculateOriginalIndicesFromOutputIndices(output, inputShape, outputShape, scales.length, roi.length)};\n              ${(() => {\n                if (inputShape.length === 2 || inputShape.length === 4) {\n                  return `${bilinearInterpolation(input, output, inputShape, useExtrapolation, extrapolationValue)}`;\n                } else if (inputShape.length === 3 || inputShape.length === 5) {\n                  return `${trilinearInterpolation(input, output, inputShape, useExtrapolation, extrapolationValue)}`;\n                } else {\n                  throw Error('Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.');\n                }\n              })()};\n            `;\n          case 'cubic':\n            return `\n            ${(() => {\n              if (inputShape.length === 2 || inputShape.length === 4) {\n                return `${bicubicInterpolation(\n                  input,\n                  output,\n                  inputShape,\n                  outputShape,\n                  scales,\n                  roi,\n                  attributes.cubicCoeffA,\n                  useExtrapolation,\n                  attributes.extrapolationValue,\n                  attributes.excludeOutside,\n                )}`;\n              } else {\n                throw Error('Cubic mode only supports input dims 2 and 4 are supported in linear mode.');\n              }\n            })()};\n            `;\n          default:\n            throw Error('Invalid resize mode');\n        }\n      })()};\n      `\n      }\n      ${shaderHelper\n        .registerUniform('output_size', 'u32')\n        .registerUniform('scales', 'f32', scales.length)\n        .registerUniform('roi', 'f32', roi.length)\n        .declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n        ${\n          noScale\n            ? 'output[global_idx] = input[global_idx];'\n            : `\n        let output_indices = ${output.offsetToIndices('global_idx')};\n        var input_indices: ${input.type.indices};\n        ${(() => {\n          switch (attributes.mode) {\n            case 'nearest':\n              return `input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${input.getByIndices('input_indices')};\n                } else {\n                  output[global_idx] = ${attributes.extrapolationValue};\n                }`;\n            case 'linear':\n              return `output[global_idx] = ${\n                inputShape.length === 2 || inputShape.length === 4 ? 'bilinearInterpolation' : 'trilinearInterpolation'\n              }(output_indices);`;\n            case 'cubic':\n              return 'output[global_idx] = bicubicInterpolation(output_indices);';\n            default:\n              throw Error(`Unsupported resize mode: ${attributes.mode}`);\n          }\n        })()};\n`\n        }\n      }`;\n\n  return {\n    name: 'Resize',\n    shaderCache: {\n      hint: `${attributes.cacheKey}|${opsetVersion}|${\n        scales.length > 0 ? (attributes.mode === 'cubic' ? scales : scales.length) : ''\n      }|${sizes.length > 0 ? sizes : ''}|${roi.length > 0 ? roi : ''}|${noScale}|${\n        attributes.mode === 'nearest' ? inputShape.length : inputShape\n      }`,\n      inputDependencies: ['rank'],\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputTensor.dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        { type: DataType.float, data: scales },\n        { type: DataType.float, data: roi },\n        ...createTensorShapeVariables(inputShape, outputShape),\n      ],\n    }),\n  };\n};\n\nconst getOpsetVersionFromCustomDataBuffer = (context: ComputeContext): number => {\n  const customDataBuffer = context.customDataBuffer;\n  const customDataBuffer32 = new Uint32Array(customDataBuffer, customDataBuffer.byteOffset, 1);\n  const opsetVersion = customDataBuffer32[0];\n  return opsetVersion;\n};\n\nexport const resize = (context: ComputeContext, attributes: ResizeAttributes): void => {\n  const scales: number[] = [];\n  const sizes: number[] = [];\n  const roi: number[] = [];\n\n  // Note that scales in resize are always f32. roi can be f32 or f16.\n  // TODO: Currently this code does not support f16 for roi when passed as optional input.\n\n  const opsetVersion = getOpsetVersionFromCustomDataBuffer(context);\n  if (attributes.antialias !== 0) {\n    throw Error('Only default value (0) for Antialias attribute is supported');\n  }\n  validateInputs(context.inputs, attributes, opsetVersion, scales, sizes, roi);\n  context.compute(createResizeProgramInfo(context.inputs[0], attributes, opsetVersion, scales, sizes, roi), {\n    inputs: [0],\n  });\n};\n\nexport const parseResizeAttributes = (attributes: Record<string, unknown>): ResizeAttributes => {\n  const antialias = attributes.antialias as number;\n  const axes = attributes.axes as number[];\n  const coordinateTransformMode: CoordinateTransformMode =\n    attributes.coordinateTransformMode as CoordinateTransformMode;\n  const cubicCoeffA = attributes.cubicCoeffA as number;\n  const excludeOutside = (attributes.excludeOutside as number) !== 0;\n  const extrapolationValue = attributes.extrapolationValue as number;\n  const keepAspectRatioPolicy: KeepAspectRatioPolicy = attributes.keepAspectRatioPolicy as KeepAspectRatioPolicy;\n  const mode: Mode = attributes.mode as Mode;\n  // If nearestMode is not specified, use simple mode.\n  const nearestMode: NearestMode = (attributes.nearestMode === '' ? 'simple' : attributes.nearestMode) as NearestMode;\n  return createAttributeWithCacheKey({\n    antialias,\n    axes,\n    coordinateTransformMode,\n    cubicCoeffA,\n    excludeOutside,\n    extrapolationValue,\n    keepAspectRatioPolicy,\n    mode,\n    nearestMode,\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper, WORKGROUP_SIZE } from './common';\n\nexport interface RotaryEmbeddingAttributes {\n  readonly interleaved: boolean;\n  readonly numHeads: number;\n  readonly rotaryEmbeddingDim: number;\n  readonly scale: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: RotaryEmbeddingAttributes): void => {\n  const [input, positionIds, cosCache, sinCache] = inputs;\n  const { numHeads, rotaryEmbeddingDim } = attributes;\n\n  if (input.dims.length !== 3 && input.dims.length !== 4) {\n    throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${input.dims.length}`);\n  }\n  if (\n    !ShapeUtil.areEqual(positionIds.dims, []) &&\n    !ShapeUtil.areEqual(positionIds.dims, [1]) &&\n    positionIds.dims.length !== 2\n  ) {\n    throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${positionIds.dims.length}`);\n  }\n  if (cosCache.dims.length !== 2) {\n    throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${cosCache.dims.length}`);\n  }\n  if (sinCache.dims.length !== 2) {\n    throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${sinCache.dims.length}`);\n  }\n  if (!ShapeUtil.areEqual(cosCache.dims, sinCache.dims)) {\n    throw new Error(\"Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape\");\n  }\n\n  if (rotaryEmbeddingDim > 0 && numHeads === 0) {\n    throw new Error('num_heads must be provided if rotary_embedding_dim is specified');\n  }\n\n  const batchSize = input.dims[0];\n  const sequenceLength = input.dims[input.dims.length - 2];\n  const maxSequenceLength = cosCache.dims[0];\n  const hiddenSize = ShapeUtil.sizeFromDimension(input.dims, 1) / sequenceLength;\n  const headSize = rotaryEmbeddingDim === 0 ? cosCache.dims[1] * 2 : hiddenSize / numHeads;\n  if (rotaryEmbeddingDim > headSize) {\n    throw new Error('rotary_embedding_dim must be less than or equal to head_size');\n  }\n\n  if (positionIds.dims.length === 2) {\n    if (batchSize !== positionIds.dims[0]) {\n      throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${positionIds.dims[0]}`);\n    }\n    if (sequenceLength !== positionIds.dims[1]) {\n      throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${positionIds.dims[1]}`);\n    }\n  }\n\n  if (headSize / 2 !== cosCache.dims[1] && rotaryEmbeddingDim / 2 !== cosCache.dims[1]) {\n    throw new Error(\n      `Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${\n        cosCache.dims[1]\n      }`,\n    );\n  }\n\n  if (sequenceLength > maxSequenceLength) {\n    throw new Error('Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported');\n  }\n};\n\nconst createRotaryEmbeddingProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: RotaryEmbeddingAttributes,\n): ProgramInfo => {\n  const { interleaved, numHeads, rotaryEmbeddingDim, scale } = attributes;\n  const batchSize = inputs[0].dims[0];\n  const batchStride = ShapeUtil.sizeFromDimension(inputs[0].dims, 1);\n  const sequenceLength = inputs[0].dims[inputs[0].dims.length - 2];\n  const hiddenSize = batchStride / sequenceLength;\n  const halfRotaryEmbeddingDim = inputs[2].dims[1];\n  const headSize = rotaryEmbeddingDim === 0 ? halfRotaryEmbeddingDim * 2 : hiddenSize / numHeads;\n\n  // Rotary embeddings will be calculated in a pair-wise fashion. In accordance, use the shape\n  // [batch size, sequence length, num of heads, num of pairs to rotate + num of dims to copy]\n  // to unfold the global index in shader.\n  const globalShape = new Array<number>(\n    batchSize,\n    sequenceLength,\n    hiddenSize / headSize,\n    headSize - halfRotaryEmbeddingDim,\n  );\n  const globalStrides = ShapeUtil.computeStrides(globalShape);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.float, data: scale },\n    { type: DataType.uint32, data: globalShape },\n    { type: DataType.uint32, data: globalStrides },\n\n    // strides for addressing the input/output tensor, in permutated order to align with the unfolded global index,\n    // i.e. BSNH\n    ...(inputs[0].dims.length === 3\n      ? new Array<ProgramUniform>({ type: DataType.uint32, data: [batchStride, hiddenSize, headSize, 1] })\n      : []),\n    ...(inputs[0].dims.length === 4\n      ? new Array<ProgramUniform>({\n          type: DataType.uint32,\n          data: [batchStride, headSize, sequenceLength * headSize, 1],\n        })\n      : []),\n\n    ...createTensorShapeVariables(inputs[0].dims, inputs[1].dims, inputs[2].dims, inputs[3].dims, inputs[0].dims),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const input = inputVariable('input', inputs[0].dataType, inputs[0].dims.length);\n    const positionIds = inputVariable('position_ids', inputs[1].dataType, inputs[1].dims.length);\n    const cosCache = inputVariable('cos_cache', inputs[2].dataType, inputs[2].dims.length);\n    const sinCache = inputVariable('sin_cache', inputs[3].dataType, inputs[3].dims.length);\n    const output = outputVariable('output', inputs[0].dataType, inputs[0].dims.length);\n\n    shaderHelper.registerUniforms([\n      { name: 'scale', type: 'f32' },\n      { name: 'global_shape', type: 'u32', length: globalShape.length },\n      { name: 'global_strides', type: 'u32', length: globalStrides.length },\n      { name: 'input_output_strides', type: 'u32', length: globalStrides.length },\n    ]);\n\n    return `\n        ${shaderHelper.declareVariables(input, positionIds, cosCache, sinCache, output)}\n\n        ${shaderHelper.mainStart(WORKGROUP_SIZE)}\n          let half_rotary_emb_dim = uniforms.${cosCache.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('size')}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${positionIds.broadcastedIndicesToOffset('bsnh.xy', outputVariable('', positionIds.type.tensor, 2))};\n            let position_id =\n                u32(${positionIds.getByOffset('position_ids_idx')}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${interleaved});\n            let j = i + select(half_rotary_emb_dim, 1, ${interleaved});\n            let re = ${input.getByOffset('i')} * ${cosCache.get('position_id', 'bsnh[3]')} -\n                ${input.getByOffset('j')} * ${sinCache.get('position_id', 'bsnh[3]')};\n            ${output.setByOffset('i', 're')}\n            let im = ${input.getByOffset('i')} * ${sinCache.get('position_id', 'bsnh[3]')} +\n                ${input.getByOffset('j')} * ${cosCache.get('position_id', 'bsnh[3]')};\n            ${output.setByOffset('j', 'im')}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${output.setByOffset('k', input.getByOffset('k'))}\n          }\n        }`;\n  };\n\n  return {\n    name: 'RotaryEmbedding',\n    shaderCache: {\n      hint: createAttributeWithCacheKey({\n        interleaved,\n      }).cacheKey,\n      inputDependencies: ['rank', 'rank', 'rank', 'rank'],\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [{ dims: inputs[0].dims, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(ShapeUtil.size(globalShape) / WORKGROUP_SIZE) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const rotaryEmbedding = (context: ComputeContext, attributes: RotaryEmbeddingAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  context.compute(createRotaryEmbeddingProgramInfo(context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo, ProgramUniform } from '../types';\n\nimport {\n  castToF32,\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n  UniformsArrayType,\n} from './common';\n\nexport interface SkipLayerNormAttributes {\n  simplified: boolean;\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 3) {\n    throw new Error('layerNorm requires at least 3 inputs.');\n  }\n\n  const input: TensorView = inputs[0];\n  const skip: TensorView = inputs[1];\n  const gamma: TensorView = inputs[2];\n\n  if (input.dataType !== skip.dataType || input.dataType !== gamma.dataType) {\n    throw new Error('All inputs must have the same data type');\n  }\n\n  if (input.dims.length !== 3 && input.dims.length !== 2) {\n    throw new Error('Input must be 2D or 3D');\n  }\n\n  if (skip.dims.length !== 3 && skip.dims.length !== 2) {\n    throw new Error('Skip must be 2D or 3D');\n  }\n\n  const hiddenSize = input.dims[input.dims.length - 1];\n  const sequenceLength = input.dims[input.dims.length - 2];\n  if (skip.dims[skip.dims.length - 1] !== hiddenSize) {\n    throw new Error('Skip must have the same hidden size as input');\n  }\n  if (skip.dims[skip.dims.length - 2] !== sequenceLength) {\n    throw new Error('Skip must have the same sequence length as input');\n  }\n\n  if (gamma.dims.length !== 1) {\n    throw new Error('Gamma must be 1D');\n  }\n  if (gamma.dims[gamma.dims.length - 1] !== hiddenSize) {\n    throw new Error('Gamma must have the same hidden size as input');\n  }\n  if (inputs.length > 3) {\n    const beta: TensorView = inputs[3];\n    if (beta.dims.length !== 1) {\n      throw new Error('Beta must be 1D');\n    }\n    if (beta.dims[beta.dims.length - 1] !== hiddenSize) {\n      throw new Error('Beta must have the same hidden size as input');\n    }\n  }\n  if (inputs.length > 4) {\n    const bias: TensorView = inputs[4];\n    if (bias.dims.length !== 1) {\n      throw new Error('Bias must be 1D');\n    }\n    if (bias.dims[bias.dims.length - 1] !== hiddenSize) {\n      throw new Error('Bias must have the same hidden size as input');\n    }\n  }\n};\n\nconst createSkipLayerNormProgramInfo = (\n  inputs: readonly TensorView[],\n  attributes: SkipLayerNormAttributes,\n  outputCount: number,\n  isTraining: boolean,\n): ProgramInfo => {\n  const simplified = attributes.simplified;\n\n  const inputShape = inputs[0].dims;\n  const inputSize = ShapeUtil.size(inputShape);\n  const outputShape = inputShape;\n  const outputSize = inputSize;\n  const hiddenSize = inputShape.slice(-1)[0];\n  const meanInvStdDevDim = isTraining ? inputShape.slice(0, -1).concat(1) : [];\n  const hasBetaInput = !simplified && inputs.length > 3;\n  const hasBiasInput = inputs.length > 4;\n  const hasMeanOutput = isTraining && outputCount > 1;\n  const hasInvStdDevOutput = isTraining && outputCount > 2;\n  const hasInputSkipBiasSumOutput = outputCount > 3;\n  const workgroupSize = 64;\n\n  const components = getMaxComponents(hiddenSize);\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: components },\n    { type: DataType.uint32, data: hiddenSize },\n    { type: DataType.float, data: attributes.epsilon },\n  ];\n  const getShaderSource = (shaderHelper: ShaderHelper) => {\n    const uniformsArray: UniformsArrayType = [\n      { name: 'output_size', type: 'u32' },\n      { name: 'components', type: 'u32' },\n      { name: 'hidden_size', type: 'u32' },\n      { name: 'epsilon', type: 'f32' },\n    ];\n    const variables = [\n      inputVariable('x', inputs[0].dataType, inputs[0].dims, components),\n      inputVariable('skip', inputs[1].dataType, inputs[1].dims, components),\n      inputVariable('gamma', inputs[2].dataType, inputs[2].dims, components),\n    ];\n    if (hasBetaInput) {\n      variables.push(inputVariable('beta', inputs[3].dataType, inputs[3].dims, components));\n    }\n    if (hasBiasInput) {\n      variables.push(inputVariable('bias', inputs[4].dataType, inputs[4].dims, components));\n    }\n    variables.push(outputVariable('output', inputs[0].dataType, outputShape, components));\n    if (hasMeanOutput) {\n      variables.push(outputVariable('mean_output', DataType.float, meanInvStdDevDim));\n    }\n    if (hasInvStdDevOutput) {\n      variables.push(outputVariable('inv_std_output', DataType.float, meanInvStdDevDim));\n    }\n    if (hasInputSkipBiasSumOutput) {\n      variables.push(outputVariable('input_skip_bias_sum', inputs[0].dataType, outputShape, components));\n    }\n    const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n    const vecDataType = tensorTypeToWsglStorageType(DataType.float, components);\n    return `\n\n      ${shaderHelper.registerUniforms(uniformsArray).declareVariables(...variables)}\n      var<workgroup> sum_shared : array<${vecDataType}, ${workgroupSize}>;\n      var<workgroup> sum_squared_shared : array<${vecDataType}, ${workgroupSize}>;\n\n      ${shaderHelper.mainStart([workgroupSize, 1, 1])}\n        let ix = local_id.x;\n        let iy = global_id.x / ${workgroupSize};\n\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        var stride = hidden_size_vectorized / ${workgroupSize};\n        let offset = ix * stride + iy * hidden_size_vectorized;\n        let offset1d = stride * ix;\n        if (ix == ${workgroupSize - 1}) {\n          stride = hidden_size_vectorized - stride * ix;\n        }\n        for (var i: u32 = 0; i < stride; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${hasBiasInput ? 'bias[offset1d + i]' : dataType + '(0.0)'};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${hasInputSkipBiasSumOutput ? 'input_skip_bias_sum[offset + i] = value;' : ''}\n          output[offset + i] = value;\n          let f32_value = ${castToF32(dataType, components, 'value')};\n          sum_shared[ix] += f32_value;\n          sum_squared_shared[ix] += f32_value * f32_value;\n        }\n        workgroupBarrier();\n\n        var reduce_size : u32 = ${workgroupSize};\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\n          reduce_size = curr_size + (reduce_size & 1);\n          if (ix < curr_size) {\n            sum_shared[ix] += sum_shared[ix + reduce_size];\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\n          }\n          workgroupBarrier();\n        }\n\n        let sum = sum_shared[0];\n        let square_sum = sum_squared_shared[0];\n        let mean = ${sumVector('sum', components)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${sumVector('square_sum', components)} / f32(uniforms.hidden_size) ${\n          simplified ? '' : '- mean * mean'\n        } + uniforms.epsilon);\n        ${hasMeanOutput ? 'mean_output[global_idx] = mean;' : ''}\n        ${hasInvStdDevOutput ? 'inv_std_output[global_idx] = inv_std_dev;' : ''}\n\n        for (var i: u32 = 0; i < stride; i++) {\n          output[offset + i] = (output[offset + i] ${simplified ? '' : `- ${dataType}(mean)`}) *\n            ${dataType}(inv_std_dev) * gamma[offset1d + i]\n            ${hasBetaInput ? '+ beta[offset1d + i]' : ''};\n        }\n      }`;\n  };\n  const outputs = [{ dims: outputShape, dataType: inputs[0].dataType }];\n  if (outputCount > 1) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n  if (outputCount > 2) {\n    outputs.push({ dims: meanInvStdDevDim, dataType: DataType.float });\n  }\n  if (outputCount > 3) {\n    outputs.push({ dims: inputShape, dataType: inputs[0].dataType });\n  }\n  return {\n    name: 'SkipLayerNormalization',\n    shaderCache: {\n      hint: `${components};${hasMeanOutput};${hasInvStdDevOutput};${hasInputSkipBiasSumOutput}`,\n      inputDependencies: inputs.map((_input, _index) => 'type'),\n    },\n    getShaderSource,\n    getRunData: () => ({\n      outputs,\n      dispatchGroup: {\n        x: Math.ceil(outputSize / hiddenSize),\n      },\n      programUniforms,\n    }),\n  };\n};\n\nexport const skipLayerNorm = (context: ComputeContext, attributes: SkipLayerNormAttributes): void => {\n  // TODO: initialize isTraining from ComputeContext\n  const isTraining = false;\n  validateInputs(context.inputs);\n  // Mean and InvStdDev are only used in training mode and are not required for inference.\n  // They are added here for completeness only.\n  const outputs = [0];\n  if (context.outputCount > 1) {\n    outputs.push(isTraining ? 1 : -3);\n  }\n  if (context.outputCount > 2) {\n    outputs.push(isTraining ? 2 : -3);\n  }\n  if (context.outputCount > 3) {\n    outputs.push(3);\n  }\n  context.compute(createSkipLayerNormProgramInfo(context.inputs, attributes, context.outputCount, isTraining), {\n    outputs,\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext, ProgramInfo, ProgramUniform, TensorInfo } from '../types';\n\nimport {\n  createTensorShapeVariables,\n  getElementAt,\n  IndicesHelper,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  UniformsArrayType,\n} from './common';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly starts: number[];\n  readonly ends: number[];\n  readonly axes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  if (attributes.axes.length !== 0) {\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\n      throw new Error('axes, starts and ends must have the same length');\n    }\n  } else if (attributes.starts.length !== attributes.ends.length) {\n    throw new Error('starts and ends must have the same length');\n  }\n  inputs.slice(1).forEach((_, idx) => {\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  });\n};\n\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\n  const input: number[] = [];\n  if (inputs.length > idx) {\n    if (inputs[idx].dataType === DataType.int64) {\n      inputs[idx].getBigInt64Array().forEach((v) => input.push(Number(v)));\n    } else if (inputs[idx].dataType === DataType.int32) {\n      inputs[idx].getInt32Array().forEach((v) => input.push(Number(v)));\n    } else {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  }\n  return input;\n};\n\nconst createSliceAttributesFromInputs = (\n  inputs: readonly TensorView[],\n  attributes: SliceAttributes,\n): SliceAttributes => {\n  if (inputs.length > 1) {\n    const starts: number[] = readInput(inputs, 1);\n    const ends: number[] = readInput(inputs, 2);\n    let axes: number[] = readInput(inputs, 3);\n    if (axes.length === 0) {\n      axes = [...Array(inputs[0].dims.length).keys()];\n    }\n    return createAttributeWithCacheKey({ starts, ends, axes });\n  } else {\n    return attributes;\n  }\n};\n\nconst fixStartEndValues = (\n  value: number,\n  index: number,\n  inputShape: readonly number[],\n  axes: readonly number[],\n  steps: readonly number[],\n): number => {\n  let newValue = value;\n  if (value < 0) {\n    newValue += inputShape[axes[index]];\n  }\n  if (steps[index] < 0) {\n    return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\n  } else {\n    return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\n  }\n};\n\nconst calculateInputIndicesImpl = (\n  input: IndicesHelper,\n  output: IndicesHelper,\n  inputShape: readonly number[],\n): string =>\n  `fn calculateInputIndices(output_indices: ${output.type.indices}) -> ${input.type.indices} {\n          var input_indices: ${input.type.indices};\n          var carry = 0u;\n          for (var i = ${inputShape.length}; i >= 0; i--) {\n            let input_shape_i = ${getElementAt('uniforms.input_shape', 'i', inputShape.length)};\n            let steps_i = ${getElementAt('uniforms.steps', 'i', inputShape.length)};\n            let signs_i = ${getElementAt('uniforms.signs', 'i', inputShape.length)};\n            let starts_i = ${getElementAt('uniforms.starts', 'i', inputShape.length)};\n            var output_index = ${output.indicesGet('output_indices', 'i')};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${input.indicesSet('input_indices', 'i', 'input_index')};\n          }\n          return input_indices;\n      }`;\n\nconst createSliceProgramInfo = (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const inputSize = ShapeUtil.size(inputShape);\n  const axes =\n    attributes.axes.length > 0\n      ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length)\n      : [...Array(inputShape.length).keys()];\n  let steps = readInput(inputs, 4);\n  steps.forEach(\n    (step) =>\n      step !== 0 ||\n      (() => {\n        throw new Error('step cannot be 0');\n      }),\n  );\n  if (steps.length === 0) {\n    steps = Array(axes.length).fill(1);\n  }\n  const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\n\n  const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\n\n  if (axes.length !== starts.length || axes.length !== ends.length) {\n    throw new Error('start, ends and axes should have the same number of elements');\n  }\n\n  if (axes.length !== inputShape.length) {\n    for (let i = 0; i < inputShape.length; ++i) {\n      if (!axes.includes(i)) {\n        starts.splice(i, 0, 0);\n        ends.splice(i, 0, inputShape[i]);\n        steps.splice(i, 0, 1);\n      }\n    }\n  }\n  const signs = steps.map((step) => Math.sign(step));\n  // Convert negative steps to positive steps and reverse starts and ends\n  steps.forEach((step, i, array) => {\n    if (step < 0) {\n      const numSteps = (ends[i] - starts[i]) / step;\n      const newEnd = starts[i];\n      const newStart = newEnd + numSteps * steps[i];\n      starts[i] = newStart;\n      ends[i] = newEnd;\n      array[i] = -step;\n    }\n  });\n  // Output rank is expected to be less than or equal to the input rank.\n  const outputShape = inputShape.slice(0);\n  axes.forEach((axis, _) => {\n    outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\n  });\n  const outputTensorInfo: TensorInfo = { dims: outputShape, dataType: inputs[0].dataType };\n\n  const output = outputVariable('output', inputs[0].dataType, outputShape.length);\n  const input = inputVariable('input', inputs[0].dataType, inputs[0].dims.length);\n  const outputSize = ShapeUtil.size(outputShape);\n  const uniforms: UniformsArrayType = [\n    { name: 'outputSize', type: 'u32' },\n    { name: 'starts', type: 'u32', length: starts.length },\n    { name: 'signs', type: 'i32', length: signs.length },\n    { name: 'steps', type: 'u32', length: steps.length },\n  ];\n\n  const programUniforms: ProgramUniform[] = [\n    { type: DataType.uint32, data: outputSize },\n    { type: DataType.uint32, data: starts },\n    { type: DataType.int32, data: signs },\n    { type: DataType.uint32, data: steps },\n    ...createTensorShapeVariables(inputs[0].dims, outputShape),\n  ];\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.registerUniforms(uniforms).declareVariables(input, output)}\n        ${calculateInputIndicesImpl(input, output, inputShape)}\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.outputSize')}\n          let output_indices = ${output.offsetToIndices('global_idx')};\n          let input_indices = calculateInputIndices(output_indices);\n          ${output.setByOffset('global_idx', input.getByIndices('input_indices'))}\n      }`;\n  return {\n    name: 'Slice',\n    shaderCache: { hint: `${signs.length}_${starts.length}_${steps.length}`, inputDependencies: ['rank'] },\n    getShaderSource,\n    getRunData: () => ({\n      outputs: [outputTensorInfo],\n      dispatchGroup: { x: Math.ceil(inputSize / 64 /* workgroup size */) },\n      programUniforms,\n    }),\n  };\n};\n\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  const updatedAttributes = createSliceAttributesFromInputs(context.inputs, attributes);\n  context.compute(createSliceProgramInfo(context.inputs, updatedAttributes), { inputs: [0] });\n  // if (ShapeUtil.size(program.outputs[0].dims) > 0) {\n  //   context.compute(programInfoLoader, {inputs: [0]});\n  // } else {\n  //   // TODO: support empty output\n  //   throw new Error('slice: output size is 0');\n  // }\n};\n\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\n  const starts = attributes.starts as number[];\n  const ends = attributes.ends as number[];\n  const axes = attributes.axes as number[];\n  return createAttributeWithCacheKey({ starts, ends, axes });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { AttributeWithCacheKey, createAttributeWithCacheKey } from '../attribute-with-cache-key';\nimport { ComputeContext } from '../types';\nimport { createTransposeProgramInfo } from './transpose';\n\nimport {\n  getMaxComponents,\n  inputVariable,\n  outputVariable,\n  ShaderHelper,\n  sumVector,\n  tensorTypeToWsglStorageType,\n} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax op requires 1 input.');\n  }\n};\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst createSoftmaxProgramInfo = (context: ComputeContext, attributes: SoftmaxAttributes) => {\n  const input = context.inputs[0];\n  const inputShape = input.dims;\n  const outputSize = ShapeUtil.size(inputShape);\n  const inputRank = inputShape.length;\n  const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n  const isTransposeRequired = axis < inputShape.length - 1;\n  let transposedInput: TensorView;\n  let perm: number[] = [];\n\n  if (isTransposeRequired) {\n    perm = Array.from({ length: inputRank }, (_, i) => i);\n    perm[axis] = inputRank - 1;\n    perm[inputRank - 1] = axis;\n\n    transposedInput = context.compute(createTransposeProgramInfo(input, perm), {\n      inputs: [input],\n      outputs: [-1],\n    })[0];\n  } else {\n    transposedInput = input;\n  }\n\n  const transposedInputShape = transposedInput.dims;\n  const cols = transposedInputShape[inputRank - 1];\n  const rows = outputSize / cols;\n  const components = getMaxComponents(cols);\n  const packedCols = cols / components;\n  let WG = 64;\n  // If only one workgroup is dispatched, increase workgroupSize to improve parallelism.\n  if (rows === 1) {\n    WG = 256;\n  }\n  const maxVector = (name: string, components: number) => {\n    if (components === 4) {\n      return `max(max(${name}.x, ${name}.y), max(${name}.z, ${name}.w))`;\n    } else if (components === 2) {\n      return `max(${name}.x, ${name}.y)`;\n    } else if (components === 3) {\n      return `max(max(${name}.x, ${name}.y), ${name}.z)`;\n    }\n\n    return name;\n  };\n  const x = inputVariable('x', transposedInput.dataType, transposedInput.dims, components);\n  const output = outputVariable('result', transposedInput.dataType, transposedInput.dims, components);\n  const valueType = x.type.value;\n  // 6.2.4 in wgsl spec\n  const threadMaxDecl =\n    tensorTypeToWsglStorageType(transposedInput.dataType) === 'f32'\n      ? `var threadMax = ${valueType}(-3.402823e+38f);`\n      : `var threadMax = ${valueType}(-65504.0h);`;\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      var<workgroup> rowMaxShared : ${valueType};\n      var<workgroup> rowSumShared : ${valueType};\n      var<workgroup> threadShared : array<${valueType}, ${WG}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${valueType} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${valueType}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${shaderHelper.registerUniform('packedCols', 'i32').declareVariables(x, output)}\n      ${shaderHelper.mainStart(WG)}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${WG};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${threadMaxDecl}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${valueType}(${maxVector('threadShared[0]', components)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${valueType}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${valueType}(${sumVector('threadShared[0]', components)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;\n  const result = context.compute(\n    {\n      name: 'Softmax',\n      // Note that in JSEP, WG size is not included in cache by default, but WebGPU EP it is.\n      shaderCache: { hint: `${components};${WG}`, inputDependencies: ['type'] },\n      getRunData: () => ({\n        outputs: [{ dims: transposedInputShape, dataType: transposedInput.dataType }],\n        dispatchGroup: { x: rows },\n        programUniforms: [{ type: DataType.int32, data: packedCols }],\n      }),\n      getShaderSource,\n    },\n    {\n      inputs: [transposedInput],\n      outputs: [isTransposeRequired ? -1 : 0],\n    },\n  )[0];\n\n  if (isTransposeRequired) {\n    context.compute(createTransposeProgramInfo(result, perm), {\n      inputs: [result],\n    });\n  }\n};\n\nexport const softmax = (context: ComputeContext, attributes: SoftmaxAttributes): void => {\n  validateInputs(context.inputs);\n  createSoftmaxProgramInfo(context, attributes);\n};\n\nexport const parseSoftmaxAttributes = (attributes: Record<string, unknown>): SoftmaxAttributes =>\n  createAttributeWithCacheKey({ axis: attributes.axis as number });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst getRepeats = (repeatsTensorView: TensorView): readonly number[] =>\n  Array.from(repeatsTensorView.getBigInt64Array(), Number);\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 inputs.');\n  }\n\n  if (\n    inputs[0].dataType !== DataType.float &&\n    inputs[0].dataType !== DataType.float16 &&\n    inputs[0].dataType !== DataType.int32 &&\n    inputs[0].dataType !== DataType.uint32\n  ) {\n    throw new Error('Tile only support float, float16, int32, and uint32 data types');\n  }\n\n  if (inputs[1].dataType !== DataType.int64) {\n    throw new Error('Tile `repeats` input should be of int64 data type');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('Tile `repeats` input should be 1-D');\n  }\n\n  const repeats: readonly number[] = getRepeats(inputs[1]);\n\n  if (repeats.length !== inputs[0].dims.length) {\n    throw new Error('Tile `repeats` input should have same number of elements as rank of input data tensor');\n  }\n};\n\nconst getOutputShape = (inputShape: readonly number[], repeats: readonly number[]): readonly number[] => {\n  const outputShape: number[] = [];\n\n  for (let i = 0; i < inputShape.length; ++i) {\n    outputShape.push(inputShape[i] * repeats[i]);\n  }\n\n  return outputShape;\n};\n\nexport const createTileProgramInfo = (inputs: readonly TensorView[], shape?: number[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const repeats: readonly number[] = shape == null ? getRepeats(inputs[1]) : shape;\n  const outputShape = getOutputShape(inputShape, repeats);\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const dataType = inputs[0].dataType;\n  const input = inputVariable('input', dataType, inputShape.length);\n  const output = outputVariable('output', dataType, outputShape.length);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const inputShape = ${input.indices(...inputShape)};\n      ${shaderHelper.registerUniform('output_size', 'u32').declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.output_size')}\n      let output_indices = ${output.offsetToIndices('global_idx')};\n      var input_indices: ${input.type.indices};\n      for (var i = 0; i < ${inputShape.length}; i++) {\n        let input_dim_i = ${input.indicesGet('uniforms.input_shape', 'i')};\n        let input_dim_value = ${output.indicesGet('output_indices', 'i')}  % input_dim_i;\n\n        ${input.indicesSet('input_indices', 'i', 'input_dim_value')}\n      }\n      ${output.setByOffset('global_idx', input.getByIndices('input_indices'))}\n    }`;\n\n  return {\n    name: 'Tile',\n    shaderCache: { hint: `${repeats}`, inputDependencies: ['rank'] },\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: inputs[0].dataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: outputSize },\n        ...createTensorShapeVariables(inputs[0].dims, outputShape),\n      ],\n    }),\n    getShaderSource,\n  };\n};\n\nexport const tile = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  context.compute(createTileProgramInfo(context.inputs), { inputs: [0] });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { DataType } from '../../../wasm-common';\nimport { TensorView } from '../../tensor-view';\nimport { BroadcastUtil, ShapeUtil } from '../../util';\nimport { ComputeContext, ProgramInfo } from '../types';\n\nimport { createTensorShapeVariables, inputVariable, outputVariable, ShaderHelper } from './common';\n\nconst createWhereOpProgramShader = (\n  shaderHelper: ShaderHelper,\n  inputs: readonly TensorView[],\n  dimsOutput: readonly number[],\n  isBroadcast: boolean,\n  typeOutput: number,\n) => {\n  const output = outputVariable('output_data', typeOutput, dimsOutput.length, 4);\n  const a = inputVariable('a_data', inputs[1].dataType, inputs[1].dims.length, 4);\n  const b = inputVariable('b_data', inputs[2].dataType, inputs[2].dims.length, 4);\n  const c = inputVariable('c_data', inputs[0].dataType, inputs[0].dims.length, 4);\n\n  let assignment: string;\n  const expression = (a: string, b: string, c: string) => `select(${b}, ${a}, ${c})`;\n  if (!isBroadcast) {\n    assignment = output.setByOffset(\n      'global_idx',\n      expression(a.getByOffset('global_idx'), b.getByOffset('global_idx'), c.getByOffset('global_idx')),\n    );\n  } else {\n    const singleAssignment = (resStr: string, x: number, typeCast = '') => {\n      const expressionA = `a_data[index_a${x}][component_a${x}]`;\n      const expressionB = `b_data[index_b${x}][component_b${x}]`;\n      // eslint-disable-next-line no-bitwise\n      const expressionC = `bool(c_data[index_c${x}] & (0xffu << (component_c${x} * 8)))`;\n      return `\n            let output_indices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offset_a${x} = ${a.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let offset_b${x} = ${b.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let offset_c${x} = ${c.broadcastedIndicesToOffset(`output_indices${x}`, output)};\n            let index_a${x} = offset_a${x} / 4u;\n            let index_b${x} = offset_b${x} / 4u;\n            let index_c${x} = offset_c${x} / 4u;\n            let component_a${x} = offset_a${x} % 4u;\n            let component_b${x} = offset_b${x} % 4u;\n            let component_c${x} = offset_c${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expression(expressionA, expressionB, expressionC)});\n          `;\n    };\n    if (typeOutput === DataType.bool) {\n      assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment('data', 0, 'u32')}\n            ${singleAssignment('data', 1, 'u32')}\n            ${singleAssignment('data', 2, 'u32')}\n            ${singleAssignment('data', 3, 'u32')}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n    } else {\n      assignment = `\n            ${singleAssignment('output_data[global_idx]', 0)}\n            ${singleAssignment('output_data[global_idx]', 1)}\n            ${singleAssignment('output_data[global_idx]', 2)}\n            ${singleAssignment('output_data[global_idx]', 3)}\n          `;\n    }\n  }\n\n  return `\n        ${shaderHelper.registerUniform('vec_size', 'u32').declareVariables(c, a, b, output)}\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes('uniforms.vec_size')}\n        ${assignment}\n      }`;\n};\n\nconst createWhereOpProgramInfo = (inputs: readonly TensorView[]): ProgramInfo => {\n  const dimsA = inputs[1].dims;\n  const dimsB = inputs[2].dims;\n  const dimsC = inputs[0].dims;\n  const outputDataType = inputs[1].dataType;\n\n  const isBroadcast = !(ShapeUtil.areEqual(dimsA, dimsB) && ShapeUtil.areEqual(dimsB, dimsC));\n  let outputShape = dimsA;\n  let outputSize = ShapeUtil.size(dimsA);\n  // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n  if (isBroadcast) {\n    const calculatedShape = BroadcastUtil.calcShape(BroadcastUtil.calcShape(dimsA, dimsB, false)!, dimsC, false);\n    if (!calculatedShape) {\n      throw new Error(\"Can't perform where op on the given tensors\");\n    }\n    outputShape = calculatedShape;\n    outputSize = ShapeUtil.size(outputShape);\n  }\n\n  const vecSize = Math.ceil(outputSize / 4);\n\n  return {\n    name: 'Where',\n    shaderCache: { inputDependencies: ['rank', 'rank', 'rank'] },\n    getShaderSource: (shaderHelper) =>\n      createWhereOpProgramShader(shaderHelper, inputs, outputShape, isBroadcast, outputDataType),\n    getRunData: () => ({\n      outputs: [{ dims: outputShape, dataType: outputDataType }],\n      dispatchGroup: { x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* vec size */) },\n      programUniforms: [\n        { type: DataType.uint32, data: vecSize },\n        ...createTensorShapeVariables(dimsC, dimsA, dimsB, outputShape),\n      ],\n    }),\n  };\n};\n\nexport const where = (context: ComputeContext): void => {\n  context.compute(createWhereOpProgramInfo(context.inputs));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { argMax, argMin, parseArgMinMaxAttributes } from './ops/argminmax';\nimport { attention } from './ops/attention';\nimport { batchNorm } from './ops/batch-norm';\nimport { biasAdd } from './ops/bias-add';\nimport { biasSplitGelu } from './ops/bias-split-gelu';\nimport * as binaryOps from './ops/binary-op';\nimport { concat, parseConcatAttributes } from './ops/concat';\nimport { conv, parseConvAttributes } from './ops/conv';\nimport { convTranspose, parseConvTransposeAttributes } from './ops/conv-transpose';\nimport { cumsum, parseCumSumAttributes } from './ops/cumsum';\nimport { depthToSpace, parseDepthToSpaceAttributes } from './ops/depth-to-space';\nimport { einsum, parseEinsumAttributes } from './ops/einsum';\nimport { expand } from './ops/expand';\nimport { fastGelu } from './ops/fast-gelu';\nimport { gather, parseGatherAttributes } from './ops/gather';\nimport { gatherND, parseGatherNDAttributes } from './ops/gather-nd';\nimport { gatherBlockQuantized, parseGatherBlockQuantizedAttributes } from './ops/gather-block-quantized';\nimport { gatherElements, parseGatherElementsAttributes } from './ops/gather-elements';\nimport { gemm, parseGemmAttributes } from './ops/gemm';\nimport { gridSample, parseGridSampleAttributes } from './ops/grid-sample';\nimport { groupQueryAttention } from './ops/group-query-attention';\nimport { instanceNorm } from './ops/instance-norm';\nimport { layerNorm } from './ops/layer-norm';\nimport { matMul } from './ops/matmul';\nimport { matMulNBits, parseMatMulNBitsAttributes } from './ops/matmulnbits';\nimport { multiHeadAttention, parseMultiHeadAttentionAttributes } from './ops/multihead-attention';\nimport { pad } from './ops/pad';\nimport * as pool from './ops/pool';\nimport { dequantizeLinear, parseDequantizeLinearAttributes } from './ops/quantize-linear';\nimport { range } from './ops/range';\nimport { scatterND, parseScatterNDAttributes } from './ops/scatter-nd';\nimport {\n  reduceL1,\n  reduceL2,\n  reduceLogSum,\n  reduceLogSumExp,\n  reduceMax,\n  reduceMean,\n  reduceMin,\n  reduceProd,\n  reduceSum,\n  reduceSumSquare,\n} from './ops/reduce';\nimport { parseResizeAttributes, resize } from './ops/resize';\nimport { rotaryEmbedding } from './ops/rotary-embedding';\nimport { skipLayerNorm } from './ops/skip-layer-norm';\nimport { parseSliceAttributes, slice } from './ops/slice';\nimport { parseSoftmaxAttributes, softmax } from './ops/softmax';\nimport { parseSplitAttributes, split } from './ops/split';\nimport { tile } from './ops/tile';\nimport { parseTransposeAttributes, transpose } from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport { where } from './ops/where';\nimport { ComputeContext } from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction] | [RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['ArgMax', [argMax, parseArgMinMaxAttributes]],\n  ['ArgMin', [argMin, parseArgMinMaxAttributes]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  ['Attention', [attention]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['BatchNormalization', [batchNorm]],\n  ['BiasAdd', [biasAdd]],\n  ['BiasSplitGelu', [biasSplitGelu]],\n  ['Cast', [unaryOps.cast, unaryOps.parseCastAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['Clip', [unaryOps.clip]],\n  ['Concat', [concat, parseConcatAttributes]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['CumSum', [cumsum, parseCumSumAttributes]],\n  ['DepthToSpace', [depthToSpace, parseDepthToSpaceAttributes]],\n  ['DequantizeLinear', [dequantizeLinear, parseDequantizeLinearAttributes]],\n  ['Div', [binaryOps.div]],\n  ['Einsum', [einsum, parseEinsumAttributes]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Equal', [binaryOps.equal]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Expand', [expand]],\n  ['FastGelu', [fastGelu]],\n  ['Floor', [unaryOps.floor]],\n  ['FusedConv', [conv, parseConvAttributes]],\n  ['Gather', [gather, parseGatherAttributes]],\n  ['GatherElements', [gatherElements, parseGatherElementsAttributes]],\n  ['GatherBlockQuantized', [gatherBlockQuantized, parseGatherBlockQuantizedAttributes]],\n  ['GatherND', [gatherND, parseGatherNDAttributes]],\n  ['Gelu', [unaryOps.gelu]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['Greater', [binaryOps.greater]],\n  ['GreaterOrEqual', [binaryOps.greaterOrEqual]],\n  ['GridSample', [gridSample, parseGridSampleAttributes]],\n  ['GroupQueryAttention', [groupQueryAttention]],\n  ['HardSigmoid', [unaryOps.hardSigmoid, unaryOps.parseHardSigmoidAttributes]],\n  ['InstanceNormalization', [instanceNorm]],\n  ['LayerNormalization', [layerNorm]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['Less', [binaryOps.less]],\n  ['LessOrEqual', [binaryOps.lessOrEqual]],\n  ['Log', [unaryOps.log]],\n  ['MatMul', [matMul]],\n  ['MatMulNBits', [matMulNBits, parseMatMulNBitsAttributes]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['MultiHeadAttention', [multiHeadAttention, parseMultiHeadAttentionAttributes]],\n  ['Neg', [unaryOps.neg]],\n  ['Not', [unaryOps.not]],\n  ['Pad', [pad]],\n  ['Pow', [binaryOps.pow]],\n  ['QuickGelu', [unaryOps.quickgelu, unaryOps.parseAlphaAttributes]],\n  ['Range', [range]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['ReduceMin', [reduceMin]],\n  ['ReduceMean', [reduceMean]],\n  ['ReduceMax', [reduceMax]],\n  ['ReduceSum', [reduceSum]],\n  ['ReduceProd', [reduceProd]],\n  ['ReduceL1', [reduceL1]],\n  ['ReduceL2', [reduceL2]],\n  ['ReduceLogSum', [reduceLogSum]],\n  ['ReduceLogSumExp', [reduceLogSumExp]],\n  ['ReduceSumSquare', [reduceSumSquare]],\n  ['Relu', [unaryOps.relu]],\n  ['Resize', [resize, parseResizeAttributes]],\n  ['RotaryEmbedding', [rotaryEmbedding]],\n  ['ScatterND', [scatterND, parseScatterNDAttributes]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Slice', [slice, parseSliceAttributes]],\n  ['SkipLayerNormalization', [skipLayerNorm]],\n  ['Split', [split, parseSplitAttributes]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Softmax', [softmax, parseSoftmaxAttributes]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Tile', [tile]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n  ['Where', [where]],\n]);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { TRACE_FUNC_BEGIN, TRACE_FUNC_END } from 'onnxruntime-common';\n\nimport { WebGpuBackend } from '../backend-webgpu';\nimport { LOG_DEBUG } from '../log';\n\nimport { createShaderHelper } from './ops/common';\nimport { Artifact, GpuData, ProgramInfo } from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>; // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact | undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(\n    buildArtifact: Artifact,\n    inputs: GpuData[],\n    outputs: GpuData[],\n    dispatchGroup: [number, number, number],\n    uniformBufferBinding: GPUBindingResource | undefined,\n  ): void {\n    TRACE_FUNC_BEGIN(buildArtifact.programInfo.name);\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n    this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({ binding: entries.length, resource: { buffer: input.buffer } });\n    }\n    for (const output of outputs) {\n      entries.push({ binding: entries.length, resource: { buffer: output.buffer } });\n    }\n    if (uniformBufferBinding) {\n      entries.push({ binding: entries.length, resource: uniformBufferBinding });\n    }\n    const bindGroup = device.createBindGroup({\n      layout: buildArtifact.computePipeline.getBindGroupLayout(0),\n      entries,\n      label: buildArtifact.programInfo.name,\n    });\n\n    if (this.backend.sessionStatus === 'capturing') {\n      const commandInfo = {\n        kernelId: this.backend.currentKernelId!,\n        computePipeline: buildArtifact.computePipeline,\n        bindGroup,\n        dispatchGroup,\n      };\n      const sessionCommandList = this.backend.capturedCommandList.get(this.backend.currentSessionId!);\n      sessionCommandList!.push(commandInfo);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    computePassEncoder.setBindGroup(0, bindGroup);\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n    this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2 + 1);\n    this.backend.pendingDispatchNumber++;\n\n    if (\n      this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber ||\n      this.backend.queryType === 'at-passes'\n    ) {\n      this.backend.endComputePass();\n    }\n    if (this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber) {\n      this.backend.flush();\n    }\n    TRACE_FUNC_END(buildArtifact.programInfo.name);\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    TRACE_FUNC_BEGIN(programInfo.name);\n    const device = this.backend.device;\n    const enableDirectives: string[] = [];\n\n    // Enable WGSL extensions based on available WebGPU features\n    const extensionsInfo: Array<{ feature: GPUFeatureName; extension: string }> = [\n      { feature: 'shader-f16', extension: 'f16' },\n      { feature: 'subgroups' as GPUFeatureName, extension: 'subgroups' },\n      { feature: 'subgroups-f16' as GPUFeatureName, extension: 'subgroups_f16' },\n    ];\n    extensionsInfo.forEach((info) => {\n      if (device.features.has(info.feature)) {\n        enableDirectives.push(`enable ${info.extension};`);\n      }\n    });\n\n    const shaderHelper = createShaderHelper(normalizedDispatchGroupSize, this.backend.device.limits);\n    const userCode = programInfo.getShaderSource(shaderHelper);\n    const code = `${enableDirectives.join('\\n')}\\n${shaderHelper.additionalImplementations}\\n${userCode}`;\n    const shaderModule = device.createShaderModule({ code, label: programInfo.name });\n    LOG_DEBUG('verbose', () => `[WebGPU] ${programInfo.name} shader code: ${code}`);\n\n    const computePipeline = device.createComputePipeline({\n      compute: { module: shaderModule, entryPoint: 'main' },\n      layout: 'auto',\n      label: programInfo.name,\n    });\n\n    TRACE_FUNC_END(programInfo.name);\n    return { programInfo, computePipeline, uniformVariablesInfo: shaderHelper.variablesInfo };\n  }\n\n  normalizeDispatchGroupSize(\n    dispatchGroup: ReturnType<ProgramInfo['getRunData']>['dispatchGroup'],\n  ): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : dispatchGroup.y || 1;\n    const z = typeof dispatchGroup === 'number' ? 1 : dispatchGroup.z || 1;\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env, Tensor, TRACE, TRACE_FUNC_BEGIN, TRACE_FUNC_END } from 'onnxruntime-common';\n\nimport { DataType, tensorDataTypeEnumToString } from '../wasm-common';\n\nimport { configureLogger, LOG_DEBUG } from './log';\nimport { createView, TensorView } from './tensor-view';\nimport { createGpuDataManager, downloadGpuData, GpuDataManager } from './webgpu/gpu-data-manager';\nimport { RunFunction, WEBGPU_OP_RESOLVE_RULES } from './webgpu/op-resolve-rules';\nimport { ProgramManager } from './webgpu/program-manager';\nimport {\n  AdapterInfo,\n  ComputeContext,\n  DeviceInfo,\n  GpuArchitecture,\n  GpuData,\n  GpuVendor,\n  ProgramInfo,\n  ProgramInputTensorInfoDependency,\n  SessionState,\n  TimestampQuery,\n} from './webgpu/types';\n\ninterface CommandInfo {\n  readonly kernelId: number;\n  readonly computePipeline: GPUComputePipeline;\n  readonly bindGroup: GPUBindGroup;\n  readonly dispatchGroup: [number, number, number];\n}\n\ninterface KernelInfo {\n  readonly kernelType: string;\n  readonly kernelName: string;\n  readonly kernelEntry: RunFunction;\n  readonly attributes: [((attribute: unknown) => unknown) | undefined, unknown];\n}\n\ninterface PendingKernelInfo {\n  readonly kernelId: number;\n  readonly programName: string;\n  readonly inputTensorViews: readonly TensorView[];\n  readonly outputTensorViews: readonly TensorView[];\n}\n\nconst getProgramInputTensorInfoDependencyKey = (\n  inputTensors: readonly TensorView[],\n  inputDependencies: readonly ProgramInputTensorInfoDependency[],\n): string => {\n  if (inputDependencies.length !== inputTensors.length) {\n    throw new Error(\n      `inputDependencies length ${inputDependencies.length} is not equal to inputTensors length ${\n        inputTensors.length\n      }.`,\n    );\n  }\n\n  const inputInfos: string[] = [];\n  for (let i = 0; i < inputTensors.length; ++i) {\n    const type = inputTensors[i].dataType;\n    switch (inputDependencies[i]) {\n      case 'none': {\n        inputInfos.push('');\n        break;\n      }\n      case 'type': {\n        inputInfos.push(`${type}`);\n        break;\n      }\n      case 'rank': {\n        const rank = inputTensors[i].dims.length;\n        inputInfos.push(`${type};${rank}`);\n        break;\n      }\n      case 'dims': {\n        const dims = inputTensors[i].dims.join(',');\n        inputInfos.push(`${type};${dims}`);\n        break;\n      }\n      default:\n        throw new Error(`unsupported input dependency: ${inputDependencies[i]}`);\n    }\n  }\n\n  return inputInfos.join('|');\n};\n\n/**\n * get a unique key representing the program from the program info, input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey = (\n  programInfo: ProgramInfo,\n  inputTensors: readonly TensorView[],\n  is1DimensionDispatch: boolean,\n): string => {\n  // final key format:\n  // <PROGRAM_NAME>[<PROGRAM_CUSTOM_CACHE_HINT>]:is1DimensionDispatch:<INPUTS_INFO_0>|<INPUTS_INFO_1>|...\n  let key = programInfo.name;\n  if (programInfo.shaderCache?.hint) {\n    key += '[' + programInfo.shaderCache.hint + ']';\n  }\n  key +=\n    ':' +\n    is1DimensionDispatch +\n    `:${getProgramInputTensorInfoDependencyKey(\n      inputTensors,\n      programInfo.shaderCache?.inputDependencies ??\n        new Array<ProgramInputTensorInfoDependency>(inputTensors.length).fill('dims'),\n    )}`;\n  return key;\n};\n\nclass AdapterInfoImpl implements AdapterInfo {\n  readonly architecture?: string;\n  readonly vendor?: string;\n\n  constructor(adapterInfo: GPUAdapterInfo) {\n    if (adapterInfo) {\n      this.architecture = adapterInfo.architecture;\n      this.vendor = adapterInfo.vendor;\n    }\n  }\n\n  isArchitecture(architecture: GpuArchitecture): boolean {\n    return this.architecture === architecture;\n  }\n\n  isVendor(vendor: GpuVendor): boolean {\n    return this.vendor === vendor;\n  }\n}\n\nclass DeviceInfoImpl implements DeviceInfo {\n  readonly subgroupsSupported: boolean;\n  readonly subgroupsF16Supported: boolean;\n  readonly subgroupSizeRange?: readonly [number, number];\n\n  constructor(device: GPUDevice) {\n    this.subgroupsSupported = device.features.has('subgroups' as GPUFeatureName);\n    this.subgroupsF16Supported = device.features.has('subgroups' as GPUFeatureName);\n    // Currently subgroups feature is still experimental and size attributes are not in the WebGPU IDL, so we have to\n    // workaround the IDL type checks.\n    // TODO: clean this after subgroups feature is settled in IDL.\n    const deviceSubgroupsLimits = device.limits as { minSubgroupSize?: number; maxSubgroupSize?: number };\n    if (!this.subgroupsSupported || !deviceSubgroupsLimits.minSubgroupSize || !deviceSubgroupsLimits.maxSubgroupSize) {\n      this.subgroupSizeRange = undefined;\n    } else {\n      this.subgroupSizeRange = [deviceSubgroupsLimits.minSubgroupSize, deviceSubgroupsLimits.maxSubgroupSize];\n    }\n  }\n}\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  adapterInfo: AdapterInfoImpl;\n  device: GPUDevice;\n  deviceInfo: DeviceInfoImpl;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the session ID of which is currently being run.\n   * `null` means no session is being run.\n   * only valid when session.run is executed.\n   */\n  currentSessionId: number | null = null;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number | null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, { [key: string]: unknown }>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): { [key: string]: unknown } {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  // KernelID -> kernelInfo mapping\n  kernels: Map<number, KernelInfo>;\n  private commandEncoder: GPUCommandEncoder | null = null;\n  private computePassEncoder: GPUComputePassEncoder | null = null;\n  maxDispatchNumber = 16;\n  pendingDispatchNumber = 0;\n\n  // info of kernels pending submission for a single batch\n  private pendingKernels: PendingKernelInfo[] = [];\n  // queryReadBuffer -> pendingKernels mapping for all the batches\n  private pendingQueries: Map<GPUBuffer, PendingKernelInfo[]> = new Map();\n  private queryResolveBuffer?: GPUBuffer;\n  private querySet?: GPUQuerySet;\n  private queryTimeBase?: bigint;\n  queryType: TimestampQuery;\n\n  env: Env;\n  sessionStatus: SessionState = 'default';\n  /**\n   * a SessionID -> CommandInfo[] mapping. It's used to record all GPU commands for corresponding session.\n   */\n  capturedCommandList: Map<number, CommandInfo[]> = new Map();\n\n  /**\n   * a SessionID -> PendingKernelInfo[] mapping for profiling.\n   */\n  private capturedPendingKernels: Map<number, PendingKernelInfo[]> = new Map();\n\n  /**\n   * a SessionID -> a Map of (InputOutputIndex -> [ID, GPUBuffer]) mapping.\n   */\n  sessionExternalDataMapping: Map<number, Map<number, [number, GPUBuffer]>> = new Map();\n\n  async initialize(env: Env, adapter: GPUAdapter): Promise<void> {\n    this.env = env;\n    const requiredFeatures: GPUFeatureName[] = [];\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n        maxBufferSize: adapter.limits.maxBufferSize,\n        maxComputeInvocationsPerWorkgroup: adapter.limits.maxComputeInvocationsPerWorkgroup,\n        maxComputeWorkgroupSizeX: adapter.limits.maxComputeWorkgroupSizeX,\n        maxComputeWorkgroupSizeY: adapter.limits.maxComputeWorkgroupSizeY,\n        maxComputeWorkgroupSizeZ: adapter.limits.maxComputeWorkgroupSizeZ,\n      },\n      requiredFeatures,\n    };\n\n    // Try requiring WebGPU features\n    const requireFeatureIfAvailable = (feature: GPUFeatureName) =>\n      adapter.features.has(feature) && requiredFeatures.push(feature) && true;\n    // Try chromium-experimental-timestamp-query-inside-passes and fallback to timestamp-query\n    if (!requireFeatureIfAvailable('chromium-experimental-timestamp-query-inside-passes' as GPUFeatureName)) {\n      requireFeatureIfAvailable('timestamp-query');\n    }\n    requireFeatureIfAvailable('shader-f16');\n    // Try subgroups\n    if (requireFeatureIfAvailable('subgroups' as GPUFeatureName)) {\n      // If subgroups feature is available, also try subgroups-f16\n      requireFeatureIfAvailable('subgroups-f16' as GPUFeatureName);\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.deviceInfo = new DeviceInfoImpl(this.device);\n    this.adapterInfo = new AdapterInfoImpl(adapter.info || (await adapter.requestAdapterInfo()));\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = (ev) => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    Object.defineProperty(this.env.webgpu, 'device', {\n      value: this.device,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    });\n    Object.defineProperty(this.env.webgpu, 'adapter', {\n      value: adapter,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    });\n\n    // init queryType, which is necessary for InferenceSession.create\n    this.setQueryType();\n  }\n\n  dispose(): void {\n    if (typeof this.querySet !== 'undefined') {\n      this.querySet.destroy();\n    }\n    this.gpuDataManager.dispose();\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      const commandEncoder = this.getCommandEncoder();\n      const computePassDescriptor: GPUComputePassDescriptor = {};\n\n      if (this.queryType === 'at-passes') {\n        computePassDescriptor.timestampWrites = {\n          querySet: this.querySet!,\n          beginningOfPassWriteIndex: this.pendingDispatchNumber * 2,\n          endOfPassWriteIndex: this.pendingDispatchNumber * 2 + 1,\n        };\n      }\n\n      this.computePassEncoder = commandEncoder.beginComputePass(computePassDescriptor);\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    if (!this.commandEncoder) {\n      return;\n    }\n\n    TRACE_FUNC_BEGIN();\n\n    this.endComputePass();\n    let queryReadBuffer: GPUBuffer;\n    if (this.queryType !== 'none') {\n      this.commandEncoder.resolveQuerySet(\n        this.querySet!,\n        0,\n        this.pendingDispatchNumber * 2,\n        this.queryResolveBuffer!,\n        0,\n      );\n\n      queryReadBuffer = this.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        { size: this.pendingDispatchNumber * 2 * 8, usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST },\n      );\n\n      this.pendingQueries.set(queryReadBuffer, this.pendingKernels);\n      this.pendingKernels = [];\n      this.commandEncoder.copyBufferToBuffer(\n        this.queryResolveBuffer!,\n        0,\n        queryReadBuffer,\n        0,\n        this.pendingDispatchNumber * 2 * 8,\n      );\n    }\n\n    this.device.queue.submit([this.commandEncoder.finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n\n    if (this.queryType !== 'none') {\n      void queryReadBuffer!.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(queryReadBuffer.getMappedRange());\n        const pendingKernels = this.pendingQueries.get(queryReadBuffer)!;\n        for (let i = 0; i < mappedData.length / 2; i++) {\n          const pendingKernelInfo = pendingKernels[i];\n          const kernelId = pendingKernelInfo.kernelId;\n          const kernelInfo = this.kernels.get(kernelId)!;\n          const kernelType = kernelInfo.kernelType;\n          const kernelName = kernelInfo.kernelName;\n          const programName = pendingKernelInfo.programName;\n          const inputTensorViews = pendingKernelInfo.inputTensorViews;\n          const outputTensorViews = pendingKernelInfo.outputTensorViews;\n          const startTimeU64 = mappedData[i * 2];\n          const endTimeU64 = mappedData[i * 2 + 1];\n\n          if (typeof this.queryTimeBase === 'undefined') {\n            this.queryTimeBase = startTimeU64;\n          }\n\n          const startTime = Number(startTimeU64 - this.queryTimeBase);\n          const endTime = Number(endTimeU64 - this.queryTimeBase);\n\n          if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n            throw new RangeError('incorrect timestamp range');\n          }\n\n          if (this.env.webgpu.profiling?.ondata) {\n            this.env.webgpu.profiling.ondata({\n              version: 1,\n              inputsMetadata: inputTensorViews.map((value) => ({\n                dims: value.dims,\n                dataType: tensorDataTypeEnumToString(value.dataType),\n              })),\n              outputsMetadata: outputTensorViews.map((value) => ({\n                dims: value.dims,\n                dataType: tensorDataTypeEnumToString(value.dataType),\n              })),\n              kernelId,\n              kernelType,\n              kernelName,\n              programName,\n              startTime,\n              endTime,\n            });\n          } else {\n            // if no callback is provided, print the profiling message to console\n            let inputShapes = '';\n            inputTensorViews.forEach((value, i) => {\n              inputShapes += `input[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n            });\n            let outputShapes = '';\n            outputTensorViews.forEach((value, i) => {\n              outputShapes += `output[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n            });\n            // eslint-disable-next-line no-console\n            console.log(\n              `[profiling] kernel \"${kernelId}|${kernelType}|${kernelName}|${programName}\" ${inputShapes}${\n                outputShapes\n              }execution time: ${endTime - startTime} ns`,\n            );\n          }\n          TRACE('GPU', `${programName}::${startTimeU64}::${endTimeU64}`);\n        }\n        queryReadBuffer.unmap();\n        this.pendingQueries.delete(queryReadBuffer);\n      });\n    }\n    TRACE_FUNC_END();\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program a ProgramInfo instance\n   * @param inputTensorViews a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(\n    program: ProgramInfo,\n    inputTensorViews: readonly TensorView[],\n    outputIndices: readonly number[],\n    createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n    createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView,\n    outputCount: number,\n  ): TensorView[] {\n    TRACE_FUNC_BEGIN(program.name);\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputTensorViews.length; ++i) {\n      const data = inputTensorViews[i].data;\n      // if tensor view data is 0, it means the output is zero-sized tensor, and there is no GPU data for it.\n      if (data === 0) {\n        continue;\n      }\n      const gpuData = this.gpuDataManager.get(data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${data}`);\n      }\n      inputDatas.push(gpuData);\n    }\n\n    const { outputs, dispatchGroup, programUniforms } = program.getRunData(inputTensorViews);\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs.\n      // value -3 is used for placeholder output. So -3, -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (\n        !Number.isInteger(validatedOutputIndices[i]) ||\n        validatedOutputIndices[i] < -3 ||\n        validatedOutputIndices[i] >= outputCount\n      ) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      if (validatedOutputIndices[i] === -3) {\n        continue;\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView =\n        isTemporary || isPersistent\n          ? createIntermediateOutput(outputs[i].dataType, outputs[i].dims)\n          : createKernelOutput(validatedOutputIndices[i], outputs[i].dataType, outputs[i].dims);\n      outputTensorViews.push(tensorView);\n      // if tensor view data is 0, it means the output is zero-sized tensor, and there is no GPU data for it.\n      if (tensorView.data === 0) {\n        continue;\n      }\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputDatas.push(gpuData);\n    }\n\n    // when there are any zero-sized tensor in the inputs or outputs, we should report error unless all outputs are\n    // zero-sized tensors.\n    if (inputDatas.length !== inputTensorViews.length || outputDatas.length !== outputTensorViews.length) {\n      // if all outputs are zero-sized tensors, there is no need to run the program.\n      if (outputDatas.length === 0) {\n        TRACE_FUNC_END(program.name);\n        return outputTensorViews;\n      }\n      // if some outputs are zero-sized tensors, report an error.\n      //\n      // TODO: so far we don't see any use case that outputs include both zero-sized tensors and non-zero-sized tensors.\n      // If we see such use case, we need to make a change here to support it.\n      throw new Error(\n        `Program ${program.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`,\n      );\n    }\n\n    // load uniforms\n    // TODO: add cache for uniform (is it necessary?)\n    //\n    let uniformBufferBinding: GPUBindingResource | undefined;\n    if (programUniforms) {\n      let currentOffset = 0;\n      const offsets: number[] = [];\n\n      programUniforms.forEach((v) => {\n        const data = typeof v.data === 'number' ? [v.data] : v.data;\n        if (data.length === 0) {\n          return;\n        }\n        // https://www.w3.org/TR/WGSL/#alignof\n        const sizeOfElement = v.type === DataType.float16 ? 2 : 4;\n        let sizeOfVecOrMat;\n        let baseAlignment;\n        if (v.type === DataType.float16) {\n          baseAlignment = data.length > 4 ? 16 : data.length > 2 ? 8 : data.length * sizeOfElement;\n          sizeOfVecOrMat = data.length > 4 ? 16 : sizeOfElement * data.length;\n        } else {\n          baseAlignment = data.length <= 2 ? data.length * sizeOfElement : 16;\n          sizeOfVecOrMat = 16;\n        }\n        currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n        offsets.push(currentOffset);\n        // For non-float16 type, when data.length > 4, the uniform variable is of type array<vec4<i32|u32|f32>,N>, where\n        // N = Math.ceil(data.length / 4) and SizeOf(vec4<i32|u32|f32>) = 16. The total byte length is N *\n        // SizeOf(vec4<i32|u32|f32>). For float16 type, when data.length > 4, the uniform variable is of type\n        // array<mat2x4<f16>,N>, where N = Math.ceil(data.length / 8) and SizeOf(mat2x4<f16>) = 16. The total byte\n        // length is N * SizeOf(mat2x4<f16>).\n        const elementPerVecOrMat = v.type === DataType.float16 ? 8 : 4;\n        currentOffset +=\n          data.length > 4 ? Math.ceil(data.length / elementPerVecOrMat) * sizeOfVecOrMat : data.length * sizeOfElement;\n      });\n\n      // Meet alignment of struct here: https://www.w3.org/TR/WGSL/#alignment-and-size. For simplicity, set\n      // maxAlignmentOfField to 16 since the underlying buffer has been rounded up to 16.\n      const maxAlignmentOfField = 16;\n      currentOffset = Math.ceil(currentOffset / maxAlignmentOfField) * maxAlignmentOfField;\n      const arrayBuffer = new ArrayBuffer(currentOffset);\n      programUniforms.forEach((v, i) => {\n        const offset = offsets[i];\n        const data = typeof v.data === 'number' ? [v.data] : v.data;\n        if (v.type === DataType.int32) {\n          new Int32Array(arrayBuffer, offset, data.length).set(data);\n        } else if (v.type === DataType.uint32) {\n          new Uint32Array(arrayBuffer, offset, data.length).set(data);\n        } else if (v.type === DataType.float16) {\n          new Uint16Array(arrayBuffer, offset, data.length).set(data);\n        } else if (v.type === DataType.float) {\n          new Float32Array(arrayBuffer, offset, data.length).set(data);\n        } else {\n          throw new Error(`Unsupported uniform type: ${tensorDataTypeEnumToString(v.type)}`);\n        }\n      });\n\n      const uniformBufferData =\n        // eslint-disable-next-line no-bitwise\n        this.gpuDataManager.create(currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n      this.device.queue.writeBuffer(uniformBufferData.buffer, 0, arrayBuffer, 0, currentOffset);\n      this.gpuDataManager.release(uniformBufferData.id);\n      uniformBufferBinding = { offset: 0, size: currentOffset, buffer: uniformBufferData.buffer };\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(dispatchGroup);\n    const is1DimensionDispatch = normalizedDispatchGroup[1] === 1 && normalizedDispatchGroup[2] === 1;\n    // get program info\n    const key = getProgramInfoUniqueKey(program, inputTensorViews, is1DimensionDispatch);\n    let artifact = this.programManager.getArtifact(key);\n    if (!artifact) {\n      artifact = this.programManager.build(program, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n      LOG_DEBUG('info', () => `[artifact] key: ${key}, programName: ${program.name}`);\n    }\n\n    // validate uniform variables\n    if (programUniforms && artifact.uniformVariablesInfo) {\n      if (programUniforms.length !== artifact.uniformVariablesInfo.length) {\n        throw new Error(\n          `Uniform variables count mismatch: expect ${artifact.uniformVariablesInfo.length}, got ${\n            programUniforms.length\n          } in program \"${artifact.programInfo.name}\".`,\n        );\n      }\n      for (let i = 0; i < programUniforms.length; i++) {\n        const uniform = programUniforms[i];\n        const actualType = uniform.type;\n        const actualLength = typeof uniform.data === 'number' ? 1 : uniform.data.length;\n        const [type, length] = artifact.uniformVariablesInfo[i];\n        if (actualType !== type || actualLength !== length) {\n          throw new Error(\n            `Uniform variable ${i} mismatch: expect type ${type} with size ${length}, got type ${\n              actualType\n            } with size ${actualLength} in program \"${artifact.programInfo.name}\".`,\n          );\n        }\n      }\n    }\n\n    LOG_DEBUG(\n      'info',\n      () =>\n        `[ProgramManager] run \"${program.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n          normalizedDispatchGroup[1]\n        }x${normalizedDispatchGroup[2]}`,\n    );\n\n    if (this.queryType !== 'none' || this.sessionStatus === 'capturing') {\n      const pendingKernelInfo: PendingKernelInfo = {\n        kernelId: this.currentKernelId!,\n        programName: artifact.programInfo.name,\n        inputTensorViews,\n        outputTensorViews,\n      };\n      this.pendingKernels.push(pendingKernelInfo);\n\n      if (this.sessionStatus === 'capturing') {\n        const sessionPendingKernels = this.capturedPendingKernels.get(this.currentSessionId!);\n        sessionPendingKernels!.push(pendingKernelInfo);\n      }\n    }\n\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup, uniformBufferBinding);\n\n    TRACE_FUNC_END(program.name);\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    await this.gpuDataManager.download(gpuDataId, getTargetBuffer);\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(kernelType: string, kernelId: number, attribute: unknown, kernelName: string): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(kernelType);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${kernelType}`);\n    }\n\n    const kernelInfo: KernelInfo = {\n      kernelType,\n      kernelName,\n      kernelEntry: op[0],\n      attributes: [op[1], attribute],\n    };\n    this.kernels.set(kernelId, kernelInfo);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext, errors: Array<Promise<string | null>>): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const kernelType = kernel.kernelType;\n    const kernelName = kernel.kernelName;\n    const kernelEntry = kernel.kernelEntry;\n    const attributes = kernel.attributes;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"[${kernelType}] ${kernelName}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"[${kernelType}] ${kernelName}\"...`);\n\n    const useErrorScope = this.env.debug;\n\n    this.temporaryData = [];\n    try {\n      if (useErrorScope) {\n        this.device.pushErrorScope('validation');\n      }\n\n      kernelEntry(context, attributes[1]);\n      return 0; // ORT_OK\n    } catch (e) {\n      errors.push(Promise.resolve(`[WebGPU] Kernel \"[${kernelType}] ${kernelName}\" failed. ${e}`));\n      return 1; // ORT_FAIL\n    } finally {\n      if (useErrorScope) {\n        errors.push(\n          this.device\n            .popErrorScope()\n            .then((err) =>\n              err ? `GPU validation error for kernel \"[${kernelType}] ${kernelName}\": ${err.message}` : null,\n            ),\n        );\n      }\n\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n\n  // #region external buffer\n  registerBuffer(sessionId: number, index: number, buffer: GPUBuffer, size: number): number {\n    let sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n    if (!sessionInputOutputMapping) {\n      sessionInputOutputMapping = new Map();\n      this.sessionExternalDataMapping.set(sessionId, sessionInputOutputMapping);\n    }\n\n    // the buffer may be user created, or managed by GPU data manager.\n    // The GPU data manager will not manage these buffers. we register them as external buffers.\n    //\n    // The map `sessionInputOutputMapping` is used to store the data ID and buffer for each input/output. Once a\n    // specific input/output is registered, the data ID will not change.\n    const previousBuffer = sessionInputOutputMapping.get(index);\n    const id = this.gpuDataManager.registerExternalBuffer(buffer, size, previousBuffer);\n    sessionInputOutputMapping.set(index, [id, buffer]);\n    return id;\n  }\n  unregisterBuffers(sessionId: number): void {\n    const sessionInputOutputMapping = this.sessionExternalDataMapping.get(sessionId);\n    if (sessionInputOutputMapping) {\n      sessionInputOutputMapping.forEach((bufferInfo) => this.gpuDataManager.unregisterExternalBuffer(bufferInfo[0]));\n      this.sessionExternalDataMapping.delete(sessionId);\n    }\n  }\n  getBuffer(gpuDataId: number): GPUBuffer {\n    const gpuData = this.gpuDataManager.get(gpuDataId);\n    if (!gpuData) {\n      throw new Error(`no GPU data for buffer: ${gpuDataId}`);\n    }\n    return gpuData.buffer;\n  }\n  createDownloader(\n    gpuBuffer: GPUBuffer,\n    size: number,\n    type: Tensor.GpuBufferDataTypes,\n  ): () => Promise<Tensor.DataType> {\n    return async () => {\n      const data = await downloadGpuData(this, gpuBuffer, size);\n      return createView(data.buffer, type);\n    };\n  }\n  // #endregion\n  writeTimestamp(index: number): void {\n    if (this.queryType !== 'inside-passes') {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.computePassEncoder as any).writeTimestamp(this.querySet, index);\n  }\n  setQueryType(): void {\n    this.queryType = 'none';\n    if (\n      this.env.webgpu.profiling?.mode === 'default' ||\n      (typeof this.env.trace === 'undefined' ? this.env.wasm.trace : this.env.trace)\n    ) {\n      if (this.device.features.has('chromium-experimental-timestamp-query-inside-passes')) {\n        this.queryType = 'inside-passes';\n      } else if (this.device.features.has('timestamp-query')) {\n        this.queryType = 'at-passes';\n      }\n\n      if (this.queryType !== 'none' && typeof this.querySet === 'undefined') {\n        this.querySet = this.device.createQuerySet({\n          type: 'timestamp',\n          count: this.maxDispatchNumber * 2,\n        });\n        this.queryResolveBuffer = this.device.createBuffer(\n          // eslint-disable-next-line no-bitwise\n          { size: this.maxDispatchNumber * 2 * 8, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE },\n        );\n      }\n    }\n  }\n\n  captureBegin(): void {\n    LOG_DEBUG('info', 'captureBegin');\n    if (!this.capturedCommandList.get(this.currentSessionId!)) {\n      this.capturedCommandList.set(this.currentSessionId!, []);\n    }\n    if (!this.capturedPendingKernels.get(this.currentSessionId!)) {\n      this.capturedPendingKernels.set(this.currentSessionId!, []);\n    }\n    // flush the left commands before we change the status.\n    this.flush();\n    this.sessionStatus = 'capturing';\n  }\n  captureEnd(): void {\n    LOG_DEBUG('info', 'captureEnd');\n    // flush the left commands before we change the status.\n    this.flush();\n    this.sessionStatus = 'default';\n  }\n  replay(): void {\n    LOG_DEBUG('info', 'replay');\n    this.sessionStatus = 'replaying';\n    const sessionCommandList = this.capturedCommandList.get(this.currentSessionId!);\n    const sessionPendingKernels = this.capturedPendingKernels.get(this.currentSessionId!);\n    const length = sessionCommandList!.length;\n    this.pendingKernels = [];\n    for (let i = 0; i < length; i++) {\n      const computePassEncoder = this.getComputePassEncoder();\n      const command = sessionCommandList![i];\n      this.writeTimestamp(this.pendingDispatchNumber * 2);\n      computePassEncoder.setPipeline(command.computePipeline);\n      computePassEncoder.setBindGroup(0, command.bindGroup);\n      computePassEncoder.dispatchWorkgroups(...command.dispatchGroup);\n      this.writeTimestamp(this.pendingDispatchNumber * 2 + 1);\n      this.pendingDispatchNumber++;\n      if (this.queryType !== 'none') {\n        this.pendingKernels.push(sessionPendingKernels![i]);\n      }\n      if (this.pendingDispatchNumber >= this.maxDispatchNumber || this.queryType === 'at-passes') {\n        this.endComputePass();\n      }\n      if (this.pendingDispatchNumber >= this.maxDispatchNumber) {\n        this.flush();\n      }\n    }\n    // flush the left commands before we change the status.\n    this.flush();\n    this.sessionStatus = 'default';\n  }\n\n  onCreateSession(): void {\n    this.gpuDataManager.onCreateSession();\n  }\n\n  onReleaseSession(sessionId: number): void {\n    this.unregisterBuffers(sessionId);\n    if (this.capturedCommandList.has(sessionId)) {\n      this.capturedCommandList.delete(sessionId);\n    }\n    if (this.capturedPendingKernels.has(sessionId)) {\n      this.capturedPendingKernels.delete(sessionId);\n    }\n    this.gpuDataManager.onReleaseSession(sessionId);\n  }\n\n  onRunStart(sessionId: number): void {\n    this.currentSessionId = sessionId;\n    this.setQueryType();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { WebNNBackend } from '../backend-webnn';\nimport { LOG_DEBUG } from '../log';\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"webnn.d.ts\" />\n\nexport type TensorId = number;\n\n/**\n * Manages TensorId to MLTensor mapping.\n */\nexport interface TensorManager {\n  /**\n   * Reserve a new TensorId.\n   */\n  reserveTensorId(): TensorId;\n  /**\n   * Release a TensorId.\n   */\n  releaseTensorId(tensorId: TensorId): void;\n  /**\n   * Ensure a MLTensor is created for the TensorId.\n   */\n  ensureTensor(\n    tensorId: TensorId,\n    dataType: MLOperandDataType,\n    shape: readonly number[],\n    copyOld: boolean,\n  ): Promise<MLTensor>;\n  /**\n   * Upload data to a MLTensor.\n   */\n  upload(tensorId: TensorId, data: Uint8Array): void;\n  /**\n   * Download data from a MLTensor.\n   */\n  download(tensorId: TensorId): Promise<ArrayBuffer>;\n  download(tensorId: TensorId, dstTensor: ArrayBufferView | ArrayBuffer): Promise<undefined>;\n  /**\n   * Release all tensors for a given session.\n   */\n  releaseTensorsForSession(session: number): void;\n  /**\n   * Register an externally created MLTensor with a given MLContext and return a TensorId.\n   */\n  registerTensor(mlContext: MLContext, mlTensor: MLTensor, dataType: MLOperandDataType, shape: number[]): TensorId;\n}\n\nlet tensorGuid = 1;\nconst createNewTensorId = (): TensorId => tensorGuid++;\n\n/**\n * Map from MLOperandDataType to size in bits. Using bits instead of bytes to avoid possible precision loss on int4 and uint4.\n */\nconst webnnDataTypeToSize = new Map<MLOperandDataType, number>([\n  ['float32', 32],\n  ['float16', 16],\n  ['int32', 32],\n  ['uint32', 32],\n  ['int64', 64],\n  ['uint64', 64],\n  ['int8', 8],\n  ['uint8', 8],\n  ['int4', 4],\n  ['uint4', 4],\n]);\n\n/**\n * Calculate the byte length of a tensor with the given data type and shape.\n */\nconst calculateByteLength = (dataType: MLOperandDataType, shape: readonly number[]): number => {\n  const size = webnnDataTypeToSize.get(dataType);\n  if (!size) {\n    throw new Error('Unsupported data type.');\n  }\n  return shape.length > 0 ? Math.ceil((shape.reduce((a, b) => a * b) * size) / 8) : 0;\n};\n\n/**\n * TensorWrapper wraps an MLTensor and provides a way to track the last session that used it.\n */\nclass TensorWrapper {\n  // The id of the last session that used this tensor.\n  public sessionId: number;\n\n  private mlContext: MLContext;\n  private mlTensor: MLTensor;\n  private dataType: MLOperandDataType;\n  private tensorShape: readonly number[];\n\n  constructor(descriptor: {\n    sessionId: number;\n    context: MLContext;\n    tensor: MLTensor;\n    dataType: MLOperandDataType;\n    shape: readonly number[];\n  }) {\n    this.sessionId = descriptor.sessionId;\n    this.mlContext = descriptor.context;\n    this.mlTensor = descriptor.tensor;\n    this.dataType = descriptor.dataType;\n    this.tensorShape = descriptor.shape;\n  }\n\n  public get tensor(): MLTensor {\n    return this.mlTensor;\n  }\n\n  public get type(): MLOperandDataType {\n    return this.dataType;\n  }\n\n  public get shape(): readonly number[] {\n    return this.tensorShape;\n  }\n\n  public get byteLength(): number {\n    return calculateByteLength(this.dataType, this.tensorShape);\n  }\n\n  public destroy(): void {\n    LOG_DEBUG('verbose', () => '[WebNN] TensorWrapper.destroy');\n    this.mlTensor.destroy();\n  }\n\n  public write(data: Uint8Array): void {\n    this.mlContext.writeTensor(this.mlTensor, data);\n  }\n\n  public async read(): Promise<ArrayBuffer>;\n  public async read(dstBuffer: ArrayBufferView | ArrayBuffer): Promise<undefined>;\n  async read(dstBuffer?: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer | undefined> {\n    if (dstBuffer) {\n      return this.mlContext.readTensor(this.mlTensor, dstBuffer);\n    }\n    return this.mlContext.readTensor(this.mlTensor);\n  }\n\n  public canReuseTensor(context: MLContext, dataType: MLOperandDataType, shape: readonly number[]): boolean {\n    return (\n      this.mlContext === context &&\n      this.dataType === dataType &&\n      this.tensorShape.length === shape.length &&\n      this.tensorShape.every((v, i) => v === shape[i])\n    );\n  }\n}\n\n/**\n * TensorTracker tracks the MLTensor and pending upload data.\n *\n * We need to track the MLTensor and pending upload data because we delay the creation of MLTensor until\n * we know the data type and shape. This is because WebNN only support creating MLTensors with dataTypes and shape.\n */\nclass TensorIdTracker {\n  private activeUpload?: Uint8Array;\n\n  constructor(\n    private tensorManager: TensorManagerImpl,\n    private wrapper?: TensorWrapper,\n  ) {}\n\n  public get tensorWrapper(): TensorWrapper | undefined {\n    return this.wrapper;\n  }\n\n  public releaseTensor(): void {\n    if (this.tensorWrapper) {\n      this.tensorManager.releaseTensor(this.tensorWrapper);\n      this.wrapper = undefined;\n    }\n  }\n\n  public async ensureTensor(\n    context: MLContext,\n    dataType: MLOperandDataType,\n    shape: readonly number[],\n    copyOld: boolean,\n  ): Promise<MLTensor> {\n    if (this.wrapper) {\n      if (this.wrapper.canReuseTensor(context, dataType, shape)) {\n        return this.wrapper.tensor;\n      } else {\n        if (copyOld) {\n          if (this.wrapper.byteLength !== calculateByteLength(dataType, shape)) {\n            throw new Error('Unable to copy data to tensor with different size.');\n          }\n          this.activeUpload = new Uint8Array(await this.wrapper.read());\n        }\n        this.tensorManager.releaseTensor(this.wrapper);\n      }\n    }\n\n    // eslint-disable-next-line no-bitwise\n    const usage = typeof MLTensorUsage == 'undefined' ? undefined : MLTensorUsage.READ | MLTensorUsage.WRITE;\n    this.wrapper = await this.tensorManager.getCachedTensor(dataType, shape, usage, true, true);\n\n    if (copyOld && this.activeUpload) {\n      this.wrapper.write(this.activeUpload);\n      this.activeUpload = undefined;\n    }\n\n    return this.wrapper.tensor;\n  }\n\n  public upload(data: Uint8Array): void {\n    if (this.wrapper) {\n      if (data.byteLength === this.wrapper.byteLength) {\n        this.wrapper.write(data);\n        return;\n      } else {\n        LOG_DEBUG('verbose', () => 'Data size does not match tensor size. Releasing tensor.');\n        this.releaseTensor();\n      }\n    }\n\n    if (this.activeUpload) {\n      this.activeUpload.set(data);\n    } else {\n      this.activeUpload = new Uint8Array(data);\n    }\n  }\n\n  public async download(dstBuffer?: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer | undefined> {\n    if (this.activeUpload) {\n      if (dstBuffer) {\n        if (dstBuffer instanceof ArrayBuffer) {\n          new Uint8Array(dstBuffer).set(this.activeUpload);\n        } else {\n          new Uint8Array(dstBuffer.buffer, dstBuffer.byteOffset, dstBuffer.byteLength).set(this.activeUpload);\n        }\n        return;\n      } else {\n        return this.activeUpload.buffer;\n      }\n    }\n    if (!this.wrapper) {\n      throw new Error('Tensor has not been created.');\n    }\n    if (!dstBuffer) {\n      return this.wrapper.read();\n    }\n    return this.wrapper.read(dstBuffer);\n  }\n}\n\nclass TensorManagerImpl implements TensorManager {\n  private tensorTrackersById: Map<TensorId, TensorIdTracker> = new Map();\n  private freeTensors: TensorWrapper[] = [];\n  private externalTensors: Set<TensorWrapper> = new Set();\n\n  constructor(private backend: WebNNBackend) {}\n\n  public reserveTensorId(): TensorId {\n    const tensorId = createNewTensorId();\n    this.tensorTrackersById.set(tensorId, new TensorIdTracker(this));\n    return tensorId;\n  }\n\n  public releaseTensorId(tensorId: TensorId): void {\n    const tensorTracker = this.tensorTrackersById.get(tensorId);\n    if (!tensorTracker) {\n      return;\n    }\n    this.tensorTrackersById.delete(tensorId);\n    if (tensorTracker.tensorWrapper) {\n      this.releaseTensor(tensorTracker.tensorWrapper);\n    }\n  }\n\n  public async ensureTensor(\n    tensorId: TensorId,\n    dataType: MLOperandDataType,\n    shape: number[],\n    copyOld: boolean,\n  ): Promise<MLTensor> {\n    LOG_DEBUG(\n      'verbose',\n      () =>\n        `[WebNN] TensorManager.ensureTensor {tensorId: ${tensorId}, dataType: ${\n          dataType\n        }, shape: ${shape}, copyOld: ${copyOld}}`,\n    );\n    const tensor = this.tensorTrackersById.get(tensorId);\n    if (!tensor) {\n      throw new Error('Tensor not found.');\n    }\n    return tensor.ensureTensor(this.backend.currentContext, dataType, shape, copyOld);\n  }\n\n  public upload(tensorId: TensorId, data: Uint8Array): void {\n    const tensor = this.tensorTrackersById.get(tensorId);\n    if (!tensor) {\n      throw new Error('Tensor not found.');\n    }\n    tensor.upload(data);\n  }\n\n  public async download(tensorId: TensorId): Promise<ArrayBuffer>;\n  public async download(tensorId: TensorId, dstBuffer: ArrayBufferView | ArrayBuffer): Promise<undefined>;\n  async download(tensorId: TensorId, dstBuffer?: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer | undefined> {\n    LOG_DEBUG(\n      'verbose',\n      () => `[WebNN] TensorManager.download {tensorId: ${tensorId}, dstBuffer: ${dstBuffer?.byteLength}}`,\n    );\n    const tensorTracker = this.tensorTrackersById.get(tensorId);\n    if (!tensorTracker) {\n      throw new Error('Tensor not found.');\n    }\n    return tensorTracker.download(dstBuffer);\n  }\n\n  public releaseTensorsForSession(sessionId: number): void {\n    for (const tensor of this.freeTensors) {\n      if (tensor.sessionId === sessionId) {\n        tensor.destroy();\n      }\n    }\n    this.freeTensors = this.freeTensors.filter((tensor) => tensor.sessionId !== sessionId);\n  }\n\n  public registerTensor(\n    mlContext: MLContext,\n    mlTensor: MLTensor,\n    dataType: MLOperandDataType,\n    shape: readonly number[],\n  ): TensorId {\n    const tensorId = createNewTensorId();\n    // Defaulting to READ | WRITE if usage is not provided.\n    // eslint-disable-next-line no-bitwise\n    const wrapper = new TensorWrapper({\n      sessionId: this.backend.currentSessionId,\n      context: mlContext,\n      tensor: mlTensor,\n      dataType,\n      shape,\n    });\n    this.tensorTrackersById.set(tensorId, new TensorIdTracker(this, wrapper));\n    this.externalTensors.add(wrapper);\n    return tensorId;\n  }\n\n  /**\n   * Get or create an MLTensor with the given data type and shape.\n   */\n  public async getCachedTensor(\n    dataType: MLOperandDataType,\n    shape: readonly number[],\n    usage: MLTensorUsageFlags | undefined,\n    writable: boolean,\n    readable: boolean,\n  ): Promise<TensorWrapper> {\n    const sessionId = this.backend.currentSessionId;\n    const context = this.backend.currentContext;\n    for (const [index, tensor] of this.freeTensors.entries()) {\n      if (tensor.canReuseTensor(context, dataType, shape)) {\n        LOG_DEBUG('verbose', () => `[WebNN] Reusing tensor {dataType: ${dataType}, shape: ${shape}}`);\n        const wrapper = this.freeTensors.splice(index, 1)[0];\n        wrapper.sessionId = sessionId;\n        return wrapper;\n      }\n    }\n    LOG_DEBUG('verbose', () => `[WebNN] MLContext.createTensor {dataType: ${dataType}, shape: ${shape}}`);\n    const tensor = await context.createTensor({\n      dataType,\n      shape,\n      dimensions: shape,\n      usage,\n      writable,\n      readable,\n    });\n    return new TensorWrapper({ sessionId, context, tensor, dataType, shape });\n  }\n\n  /**\n   * Release tensor for reuse unless external.\n   */\n  public releaseTensor(tensorWrapper: TensorWrapper) {\n    if (this.externalTensors.has(tensorWrapper)) {\n      this.externalTensors.delete(tensorWrapper);\n    }\n    this.freeTensors.push(tensorWrapper);\n  }\n}\n\nexport const createTensorManager = (...args: ConstructorParameters<typeof TensorManagerImpl>): TensorManager =>\n  new TensorManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"webnn/webnn.d.ts\" />\n\nimport { Env, Tensor } from 'onnxruntime-common';\n\nimport { DataType } from '../wasm-common';\nimport { getInstance } from '../wasm-factory';\n\nimport { createView } from './tensor-view';\nimport { TensorId, createTensorManager } from './webnn/tensor-manager';\nimport { configureLogger, LOG_DEBUG } from './log';\n\n/*\n * TensorProto::data_type to WebNN OperandType mapping.\n */\nconst onnxDataTypeToWebnnDataType = new Map<DataType, MLOperandDataType>([\n  [DataType.float, 'float32'],\n  [DataType.float16, 'float16'],\n  [DataType.int32, 'int32'],\n  [DataType.uint32, 'uint32'],\n  [DataType.int64, 'int64'],\n  [DataType.uint64, 'uint64'],\n  [DataType.int4, 'int4'],\n  [DataType.uint4, 'uint4'],\n  [DataType.int8, 'int8'],\n  [DataType.uint8, 'uint8'],\n  [DataType.bool, 'uint8'],\n]);\n\ntype MLContextEntry = {\n  gpuDevice?: GPUDevice;\n  options?: MLContextOptions;\n  mlContext: MLContext;\n};\n\nconst compareMLContextOptions = (a?: MLContextOptions, b?: MLContextOptions): boolean => {\n  if (a === b) {\n    return true;\n  }\n  if (a === undefined || b === undefined) {\n    return false;\n  }\n  const aKeys = Object.keys(a).sort() as Array<keyof typeof a>;\n  const bKeys = Object.keys(b).sort() as Array<keyof typeof b>;\n  return aKeys.length === bKeys.length && aKeys.every((key, index) => key === bKeys[index] && a[key] === b[key]);\n};\n\n/**\n * WebNN backend implementation. This class is used to keep track of the MLTensors created by the backend and keep track\n * of the current MLContext being used by the sessions.\n */\nexport class WebNNBackend {\n  /**\n   * Tensor managers for each session.\n   */\n  private tensorManager = createTensorManager(this);\n  /**\n   * Maps from session id to MLContexts.\n   */\n  private mlContextBySessionId = new Map<number, MLContext>();\n  /**\n   * Maps from MLContext to session ids.\n   */\n  private sessionIdsByMLContext = new Map<MLContext, Set<number>>();\n  /**\n   * Cache of MLContexts.\n   */\n  private mlContextCache: MLContextEntry[] = [];\n  /**\n   * Current session id.\n   */\n  private activeSessionId?: number;\n\n  constructor(env: Env) {\n    configureLogger(env.logLevel!, !!env.debug);\n  }\n\n  public get currentSessionId(): number {\n    if (this.activeSessionId === undefined) {\n      throw new Error('No active session');\n    }\n    return this.activeSessionId;\n  }\n\n  public onRunStart(sessionId: number): void {\n    this.activeSessionId = sessionId;\n  }\n\n  public async createMLContext(optionsOrDevice?: MLContextOptions | GPUDevice): Promise<MLContext> {\n    if (optionsOrDevice instanceof GPUDevice) {\n      const mlContextIndex = this.mlContextCache.findIndex((entry) => entry.gpuDevice === optionsOrDevice);\n      if (mlContextIndex !== -1) {\n        return this.mlContextCache[mlContextIndex].mlContext;\n      } else {\n        const mlContext = await navigator.ml.createContext(optionsOrDevice);\n        this.mlContextCache.push({ gpuDevice: optionsOrDevice, mlContext });\n        return mlContext;\n      }\n    } else if (optionsOrDevice === undefined) {\n      const mlContextIndex = this.mlContextCache.findIndex(\n        (entry) => entry.options === undefined && entry.gpuDevice === undefined,\n      );\n      if (mlContextIndex !== -1) {\n        return this.mlContextCache[mlContextIndex].mlContext;\n      } else {\n        const mlContext = await navigator.ml.createContext();\n        this.mlContextCache.push({ mlContext });\n        return mlContext;\n      }\n    }\n\n    const mlContextIndex = this.mlContextCache.findIndex((entry) =>\n      compareMLContextOptions(entry.options, optionsOrDevice),\n    );\n    if (mlContextIndex !== -1) {\n      return this.mlContextCache[mlContextIndex].mlContext;\n    } else {\n      const mlContext = await navigator.ml.createContext(optionsOrDevice);\n      this.mlContextCache.push({ options: optionsOrDevice, mlContext });\n      return mlContext;\n    }\n  }\n\n  public get currentContext(): MLContext {\n    const mlContext = this.getMLContext(this.currentSessionId);\n    if (!mlContext) {\n      throw new Error(`No MLContext found for session ${this.currentSessionId}`);\n    }\n    return mlContext;\n  }\n\n  public registerMLContext(sessionId: number, mlContext: MLContext): void {\n    this.mlContextBySessionId.set(sessionId, mlContext);\n    let sessionIds = this.sessionIdsByMLContext.get(mlContext);\n    if (!sessionIds) {\n      sessionIds = new Set();\n      this.sessionIdsByMLContext.set(mlContext, sessionIds);\n    }\n    sessionIds.add(sessionId);\n  }\n\n  public onReleaseSession(sessionId: number): void {\n    const mlContext = this.mlContextBySessionId.get(sessionId)!;\n    if (!mlContext) {\n      // Current session is not a WebNN session.\n      return;\n    }\n    this.tensorManager.releaseTensorsForSession(sessionId);\n    this.mlContextBySessionId.delete(sessionId);\n    const sessionIds = this.sessionIdsByMLContext.get(mlContext)!;\n    sessionIds.delete(sessionId);\n    if (sessionIds.size === 0) {\n      this.sessionIdsByMLContext.delete(mlContext);\n      const mlContextIndex = this.mlContextCache.findIndex((entry) => entry.mlContext === mlContext);\n      if (mlContextIndex !== -1) {\n        this.mlContextCache.splice(mlContextIndex, 1);\n      }\n    }\n  }\n\n  public getMLContext(sessionId: number): MLContext | undefined {\n    return this.mlContextBySessionId.get(sessionId);\n  }\n\n  public reserveTensorId(): TensorId {\n    return this.tensorManager.reserveTensorId();\n  }\n\n  public releaseTensorId(tensorId: TensorId): void {\n    LOG_DEBUG('verbose', () => `[WebNN] releaseTensorId {tensorId: ${tensorId}}`);\n    this.tensorManager.releaseTensorId(tensorId);\n  }\n\n  public async ensureTensor(\n    tensorId: TensorId,\n    onnxDataType: DataType,\n    dimensions: number[],\n    copyOld: boolean,\n  ): Promise<MLTensor> {\n    const webnnDataType = onnxDataTypeToWebnnDataType.get(onnxDataType);\n    if (!webnnDataType) {\n      throw new Error(`Unsupported ONNX data type: ${onnxDataType}`);\n    }\n    return this.tensorManager.ensureTensor(tensorId, webnnDataType, dimensions, copyOld);\n  }\n\n  public uploadTensor(tensorId: TensorId, data: Uint8Array): void {\n    const wasm = getInstance();\n    if (!wasm.shouldTransferToMLTensor) {\n      throw new Error('Trying to upload to a MLTensor while shouldTransferToMLTensor is false');\n    }\n    LOG_DEBUG('verbose', () => `[WebNN] uploadTensor {tensorId: ${tensorId}, data: ${data.byteLength}}`);\n    this.tensorManager.upload(tensorId, data);\n  }\n\n  public async downloadTensor(tensorId: TensorId, dstBuffer: ArrayBufferView | ArrayBuffer): Promise<undefined> {\n    return this.tensorManager.download(tensorId, dstBuffer);\n  }\n\n  public createMLTensorDownloader(tensorId: TensorId, type: Tensor.MLTensorDataTypes): () => Promise<Tensor.DataType> {\n    return async () => {\n      const data = await this.tensorManager.download(tensorId);\n      return createView(data, type);\n    };\n  }\n\n  public registerMLTensor(tensor: MLTensor, onnxDataType: DataType, dimensions: number[]): TensorId {\n    const webnnDataType = onnxDataTypeToWebnnDataType.get(onnxDataType);\n    if (!webnnDataType) {\n      throw new Error(`Unsupported ONNX data type: ${onnxDataType}`);\n    }\n\n    const id = this.tensorManager.registerTensor(this.currentContext, tensor, webnnDataType, dimensions);\n    LOG_DEBUG(\n      'verbose',\n      () =>\n        `[WebNN] registerMLTensor {tensor: ${tensor}, dataType: ${webnnDataType}, dimensions: ${\n          dimensions\n        }} -> {tensorId: ${id}}`,\n    );\n    return id;\n  }\n\n  // Register a WebNN Constant operand from external data.\n  public registerMLConstant(\n    externalFilePath: string,\n    dataOffset: number,\n    dataLength: number,\n    builder: MLGraphBuilder,\n    desc: MLOperandDescriptor,\n    mountedFiles: Map<string, Uint8Array> | undefined,\n  ): MLOperand {\n    // If available, \"Module.MountedFiles\" is a Map for all preloaded files.\n    if (!mountedFiles) {\n      throw new Error('External mounted files are not available.');\n    }\n\n    let filePath = externalFilePath;\n    if (externalFilePath.startsWith('./')) {\n      filePath = externalFilePath.substring(2);\n    }\n    const fileData = mountedFiles.get(filePath);\n    if (!fileData) {\n      throw new Error(`File with name ${filePath} not found in preloaded files.`);\n    }\n\n    if (dataOffset + dataLength > fileData.byteLength) {\n      throw new Error('Out of bounds: data offset and length exceed the external file data size.');\n    }\n\n    const buffer = fileData.slice(dataOffset, dataOffset + dataLength).buffer;\n    let bufferView: ArrayBufferView;\n    switch (desc.dataType) {\n      case 'float32':\n        bufferView = new Float32Array(buffer);\n        break;\n      case 'float16':\n        bufferView = new Uint16Array(buffer);\n        break;\n      case 'int32':\n        bufferView = new Int32Array(buffer);\n        break;\n      case 'uint32':\n        bufferView = new Uint32Array(buffer);\n        break;\n      case 'int64':\n        bufferView = new BigInt64Array(buffer);\n        break;\n      case 'uint64':\n        bufferView = new BigUint64Array(buffer);\n        break;\n      case 'int8':\n        bufferView = new Int8Array(buffer);\n        break;\n      case 'int4':\n      case 'uint4':\n      case 'uint8':\n        bufferView = new Uint8Array(buffer);\n        break;\n      default:\n        throw new Error(`Unsupported data type: ${desc.dataType} in creating WebNN Constant from external data.`);\n    }\n\n    LOG_DEBUG('verbose', () => `[WebNN] registerMLConstant {dataType: ${desc.dataType}, shape: ${desc.shape}}}`);\n\n    return builder.constant(desc, bufferView);\n  }\n\n  public flush(): void {\n    // Unlike the WebGPU backend, the WebNN backend does not need to flush any pending operations.\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport { calculateTensorSizeInBytes, DataType } from '../wasm-common';\n\nimport type { OrtWasmModule } from '../wasm-types';\n\nimport { WebGpuBackend } from './backend-webgpu';\nimport { LOG_DEBUG } from './log';\nimport { TensorView } from './tensor-view';\nimport { ShapeUtil } from './util';\nimport {\n  AdapterInfo,\n  ComputeContext,\n  ComputeContextInputsOutputsMapping,\n  DeviceInfo,\n  ProgramInfo,\n} from './webgpu/types';\nimport { WebNNBackend } from './backend-webnn';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n    private module: OrtWasmModule,\n    public readonly dataType: number,\n    public readonly data: number,\n    public readonly dims: readonly number[],\n  ) {}\n\n  getFloat32Array(): Float32Array {\n    if (this.dataType !== DataType.float) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0\n      ? new Float32Array()\n      : new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getBigInt64Array(): BigInt64Array {\n    if (this.dataType !== DataType.int64) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0\n      ? new BigInt64Array()\n      : new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getInt32Array(): Int32Array {\n    if (this.dataType !== DataType.int32) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getUint16Array(): Uint16Array {\n    if (this.dataType !== DataType.float16 && this.dataType !== DataType.uint16) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Uint16Array() : new Uint16Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly adapterInfo: AdapterInfo;\n  readonly deviceInfo: DeviceInfo;\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  readonly outputCount: number;\n  get kernelCustomData(): { [key: string]: unknown } {\n    return this.backend.currentKernelCustomData;\n  }\n  get customDataBuffer(): Uint8Array {\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n  }\n  private customDataOffset = 0;\n  private customDataSize = 0;\n  constructor(\n    private module: OrtWasmModule,\n    private backend: WebGpuBackend,\n    contextDataOffset: number,\n  ) {\n    this.adapterInfo = backend.adapterInfo;\n    this.deviceInfo = backend.deviceInfo;\n\n    // extract context data\n    const ptrSize = module.PTR_SIZE;\n    let dataIndex = contextDataOffset / module.PTR_SIZE;\n    const type = ptrSize === 4 ? 'i32' : 'i64';\n    this.opKernelContext = Number(module.getValue(ptrSize * dataIndex++, type));\n    const inputCount = Number(module.getValue(ptrSize * dataIndex++, type));\n    this.outputCount = Number(module.getValue(ptrSize * dataIndex++, type));\n    this.customDataOffset = Number(module.getValue(ptrSize * dataIndex++, '*'));\n    this.customDataSize = Number(module.getValue(ptrSize * dataIndex++, type));\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = Number(module.getValue(ptrSize * dataIndex++, type));\n      const data = Number(module.getValue(ptrSize * dataIndex++, '*'));\n      const dim = Number(module.getValue(ptrSize * dataIndex++, type));\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(Number(module.getValue(ptrSize * dataIndex++, type)));\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping): TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n      inputsOutputsMapping?.inputs?.map((i) => (typeof i === 'number' ? this.inputs[i] : i)) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n      new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const bufferSize = calculateTensorSizeInBytes(dataType, dims);\n      if (!bufferSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const gpuDataId = bufferSize > 0 ? this.backend.gpuDataManager.create(bufferSize).id : 0;\n      return new TensorViewImpl(this.module, dataType, gpuDataId, dims);\n    };\n    return this.backend.run(\n      program,\n      mappedInputs,\n      outputIndices,\n      createKernelOutput,\n      createTemporaryOutput,\n      this.outputCount,\n    );\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const ptrSize = this.module.PTR_SIZE;\n      const type = ptrSize === 4 ? 'i32' : 'i64';\n      const data = this.module.stackAlloc((1 + dims.length) * ptrSize /* sizeof(size_t) */);\n      this.module.setValue(data, dims.length, type);\n      for (let i = 0; i < dims.length; i++) {\n        this.module.setValue(data + ptrSize * (i + 1), dims[i], type);\n      }\n      return this.module._JsepOutput!(this.opKernelContext, index, data);\n    } catch (e) {\n      throw new Error(\n        `Failed to generate kernel's output[${index}] with dims [${dims}]. ` +\n          'If you are running with pre-allocated output, please make sure the output type/dims are correct. ' +\n          `Error: ${e}`,\n      );\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\n/**\n * Initialize JSEP with WebGPU backend.\n *\n * This function will be called after the WebAssembly module is loaded and initialized (\"_OrtInit\" is called), once for\n * each of the following EPs if they are specified:\n * - \"webgpu\"\n * - \"webnn\"\n *\n * For WebGPU, this function expects:\n *  - WebGPU is enabled in build (BUILD_DEFS.DISABLE_JSEP === false).\n *  - WebGPU is available in current environment. (a valid GPUAdapter is passed in)\n *\n * For WebNN, this function expects:\n * - WebNN is enabled in build (BUILD_DEFS.DISABLE_JSEP === false).\n * - WebNN is available in current environment. (navigator.ml is not undefined)\n *\n * If the WebAssembly module is not built with JSEP support, this function will throw an error. This will invalidate\n * 'webgpu'/'webnn' backend.\n *\n * @param name - the name of the EP, either \"webgpu\" or \"webnn\"\n * @param module - the ORT WebAssembly module\n * @param env - the ORT environment variable (ort.env)\n * @param gpuAdapter - the pre-created GPU adapter\n */\nexport const init = async (\n  name: 'webgpu' | 'webnn',\n  module: OrtWasmModule,\n  env: Env,\n  gpuAdapter?: GPUAdapter,\n): Promise<void> => {\n  const jsepInit = module.jsepInit;\n  if (!jsepInit) {\n    throw new Error('Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.');\n  }\n\n  if (name === 'webgpu') {\n    const backend = new WebGpuBackend();\n    await backend.initialize(env, gpuAdapter!);\n\n    jsepInit('webgpu', [\n      // backend\n      backend,\n\n      // jsepAlloc()\n      (size: number) => backend.alloc(Number(size)),\n\n      // jsepFree()\n      (ptr: number) => backend.free(ptr),\n\n      // jsepCopy(src, dst, size, isSourceGpu)\n      (src: number, dst: number, size: number, isSourceGpu = false) => {\n        if (isSourceGpu) {\n          LOG_DEBUG(\n            'verbose',\n            () => `[WebGPU] jsepCopyGpuToGpu: src=${Number(src)}, dst=${Number(dst)}, size=${Number(size)}`,\n          );\n          backend.memcpy(Number(src), Number(dst));\n        } else {\n          LOG_DEBUG(\n            'verbose',\n            () =>\n              `[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(src)}, gpuDataId=${Number(dst)}, size=${Number(size)}`,\n          );\n          const data = module.HEAPU8.subarray(Number(src >>> 0), Number(src >>> 0) + Number(size));\n          backend.upload(Number(dst), data);\n        }\n      },\n\n      // jsepCopyAsync(src, dst, size)\n      async (gpuDataId: number, dataOffset: number, size: number): Promise<void> => {\n        LOG_DEBUG(\n          'verbose',\n          () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`,\n        );\n\n        await backend.download(Number(gpuDataId), () =>\n          module.HEAPU8.subarray(Number(dataOffset) >>> 0, Number(dataOffset + size) >>> 0),\n        );\n      },\n\n      // jsepCreateKernel\n      (kernelType: string, kernelId: number, attribute: unknown) =>\n        backend.createKernel(\n          kernelType,\n          Number(kernelId),\n          attribute,\n          module.UTF8ToString(module._JsepGetNodeName!(Number(kernelId))),\n        ),\n\n      // jsepReleaseKernel\n      (kernel: number) => backend.releaseKernel(kernel),\n\n      // jsepRun\n      (kernel: number, contextDataOffset: number, sessionHandle: number, errors: Array<Promise<string | null>>) => {\n        LOG_DEBUG(\n          'verbose',\n          () =>\n            `[WebGPU] jsepRun: sessionHandle=${sessionHandle}, kernel=${kernel}, contextDataOffset=${contextDataOffset}`,\n        );\n        const context = new ComputeContextImpl(module, backend, Number(contextDataOffset));\n        return backend.computeKernel(Number(kernel), context, errors);\n      },\n      // jsepCaptureBegin\n      () => backend.captureBegin(),\n      // jsepCaptureEnd\n      () => backend.captureEnd(),\n      // jsepReplay\n      () => backend.replay(),\n    ]);\n  } else {\n    const backend = new WebNNBackend(env);\n    jsepInit('webnn', [\n      backend,\n      // jsepReserveTensorId\n      () => backend.reserveTensorId(),\n      // jsepReleaseTensorId,\n      (tensorId: number) => backend.releaseTensorId(tensorId),\n      // jsepEnsureTensor\n      async (tensorId: number, onnxDataType: number, shape: number[], copyOld) =>\n        backend.ensureTensor(tensorId, onnxDataType, shape, copyOld),\n      // jsepUploadTensor\n      (tensorId: number, data: Uint8Array) => {\n        backend.uploadTensor(tensorId, data);\n      },\n      // jsepDownloadTensor\n      async (tensorId: number, dstBuffer: ArrayBufferView | ArrayBuffer) => backend.downloadTensor(tensorId, dstBuffer),\n    ]);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"jsep/webnn/webnn.d.ts\" />\n\nimport { Env, InferenceSession, Tensor } from 'onnxruntime-common';\n\nimport {\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport { setRunOptions } from './run-options';\nimport { setSessionOptions } from './session-options';\nimport {\n  calculateTensorSizeInBytes,\n  dataLocationStringToEnum,\n  isGpuBufferSupportedType,\n  isMLTensorSupportedType,\n  logLevelStringToEnum,\n  tensorDataTypeEnumToString,\n  tensorDataTypeStringToEnum,\n  tensorTypeToTypedArrayConstructor,\n} from './wasm-common';\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError } from './wasm-utils';\nimport { loadFile } from './wasm-utils-load-file';\n\n// #region Initializations\n\n/**\n * There are 4 different \"initialization\" steps for ORT. They happen in different places and different time.\n *\n * 1. JavaScript initialization for onnxruntime-common and onnxruntime-web.\n *    This is the first initialization step. In this step, onnxruntime-web calls onnxruntime-common's registerBackend()\n * function multiple times to register all the available backends. The backend registration is very fast. It only\n * registers the backend name with the uninitialized backend object. No heavy initialization is done in this step.\n *    Refer to web/lib/index.ts for the backend registration.\n *\n * 2. WebAssembly artifact initialization.\n *    This happens when any registered wasm backend is used for the first time (ie. `ort.InferenceSession.create()` is\n * called). In this step, onnxruntime-web does the followings:\n *     - create a proxy worker and make sure the proxy worker is ready to receive messages, if proxy is enabled.\n *     - perform feature detection, locate correct WebAssembly artifact path and call the Emscripten generated\n * JavaScript code to initialize the WebAssembly runtime.\n *         - if proxy is enabled, this step happens in the proxy worker using message 'init-wasm'.\n *         - downloading the 'ort-wasm{...}.wasm' file is done in this step.\n *         - if multi-thread is enabled, one or more webworker will be created to initialize the PThread threadpool.\n *\n * 3. ORT environment initialization.\n *    This happens after step 2. In this step, onnxruntime-web performs ONNX Runtime environment initialization.\n * Function `_OrtInit()` is called in this step.\n *     - if proxy is enabled, this step happens in the proxy worker using message 'init-ort'.\n *     - logging level (ort.env.logLevel) and thread number (ort.env.wasm.numThreads) are set in this step.\n *\n * 4. Session initialization.\n *    This happens when `ort.InferenceSession.create()` is called. Unlike the first 3 steps (they only called once),\n * this step will be done for each session. In this step, onnxruntime-web does the followings:\n *    If the parameter is a URL:\n *    - download the model data from the URL.\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - dereference the model buffer. This step allows the original ArrayBuffer to be garbage collected.\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *    If the parameter is a Uint8Array object:\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *\n */\n\n/**\n * initialize ORT environment.\n *\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError(\"Can't initialize onnxruntime.\");\n  }\n};\n\n/**\n * initialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async (env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n};\n\n/**\n * perform EP specific initialization.\n *\n * @param env\n * @param epName\n */\nexport const initEp = async (env: Env, epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n\n    if (epName === 'webgpu') {\n      // perform WebGPU availability check\n      if (typeof navigator === 'undefined' || !navigator.gpu) {\n        throw new Error('WebGPU is not supported in current environment');\n      }\n\n      let adapter = env.webgpu.adapter as GPUAdapter | null;\n      if (!adapter) {\n        // if adapter is not set, request a new adapter.\n        const powerPreference = env.webgpu.powerPreference;\n        if (\n          powerPreference !== undefined &&\n          powerPreference !== 'low-power' &&\n          powerPreference !== 'high-performance'\n        ) {\n          throw new Error(`Invalid powerPreference setting: \"${powerPreference}\"`);\n        }\n        const forceFallbackAdapter = env.webgpu.forceFallbackAdapter;\n        if (forceFallbackAdapter !== undefined && typeof forceFallbackAdapter !== 'boolean') {\n          throw new Error(`Invalid forceFallbackAdapter setting: \"${forceFallbackAdapter}\"`);\n        }\n        adapter = await navigator.gpu.requestAdapter({ powerPreference, forceFallbackAdapter });\n        if (!adapter) {\n          throw new Error(\n            'Failed to get GPU adapter. ' +\n              'You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.',\n          );\n        }\n      } else {\n        // if adapter is set, validate it.\n        if (\n          typeof adapter.limits !== 'object' ||\n          typeof adapter.features !== 'object' ||\n          typeof adapter.requestDevice !== 'function'\n        ) {\n          throw new Error('Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.');\n        }\n      }\n\n      await initJsep('webgpu', getInstance(), env, adapter);\n    }\n    if (epName === 'webnn') {\n      // perform WebNN availability check\n      if (typeof navigator === 'undefined' || !(navigator as unknown as { ml: unknown }).ml) {\n        throw new Error('WebNN is not supported in current environment');\n      }\n\n      await initJsep('webnn', getInstance(), env);\n    }\n  }\n};\n\n// #endregion Initializations\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu' | 'cpu-pinned' | 'gpu-buffer' | 'ml-tensor';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer', 'ml-tensor'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number,\n  inputNamesUTF8Encoded: number[],\n  outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState | null,\n  enableGraphCapture: boolean,\n  inputOutputBound: boolean,\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const ptrSize = wasm.PTR_SIZE;\n    const dataOffset = wasm.stackAlloc(2 * ptrSize);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + ptrSize);\n    if (errorCode !== 0) {\n      checkLastError(\"Can't get session input/output count.\");\n    }\n    const type = ptrSize === 4 ? 'i32' : 'i64';\n    return [Number(wasm.getValue(dataOffset, type)), Number(wasm.getValue(dataOffset + ptrSize, type))];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * allocate the memory and memcpy the external buffer.\n *\n * @param model - the external buffer containing the model data. Must not be the same buffer as the WASM heap.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const copyFromExternalBuffer = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session from a model data buffer.\n *\n * @param modelData - either a Uint8Array object representing the model data, or a 2-elements tuple containing the\n *     pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSession = async (\n  modelData: Uint8Array | SerializableInternalBuffer,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  let modelDataOffset: number, modelDataLength: number;\n  const wasm = getInstance();\n\n  if (Array.isArray(modelData)) {\n    // if model data is an array, it must be a 2-elements tuple containing the pointer and size of the model data\n    [modelDataOffset, modelDataLength] = modelData;\n  } else if (modelData.buffer === wasm.HEAPU8.buffer) {\n    // if model data uses the same buffer as the WASM heap, we don't need to copy it.\n    [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n  } else {\n    // otherwise, copy the model data to the WASM heap.\n    [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n  }\n\n  let sessionHandle = 0;\n  let sessionOptionsHandle = 0;\n  let ioBindingHandle = 0;\n  let allocs: number[] = [];\n  const inputNamesUTF8Encoded = [];\n  const outputNamesUTF8Encoded = [];\n\n  try {\n    [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n    if (options?.externalData && wasm.mountExternalData) {\n      const loadingPromises = [];\n      for (const file of options.externalData) {\n        const path = typeof file === 'string' ? file : file.path;\n        loadingPromises.push(\n          loadFile(typeof file === 'string' ? file : file.data).then((data) => {\n            wasm.mountExternalData!(path, data);\n          }),\n        );\n      }\n\n      // wait for all external data files to be loaded\n      await Promise.all(loadingPromises);\n    }\n\n    for (const provider of options?.executionProviders ?? []) {\n      const providerName = typeof provider === 'string' ? provider : provider.name;\n      if (providerName === 'webnn') {\n        wasm.shouldTransferToMLTensor = false;\n        if (typeof provider !== 'string') {\n          const webnnOptions = provider as InferenceSession.WebNNExecutionProviderOption;\n          const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const gpuDevice = (webnnOptions as InferenceSession.WebNNOptionsWebGpu)?.gpuDevice;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          const powerPreference = (webnnOptions as InferenceSession.WebNNContextOptions)?.powerPreference;\n          if (context) {\n            wasm.currentContext = context as MLContext;\n          } else if (gpuDevice) {\n            wasm.currentContext = await wasm.jsepCreateMLContext!(gpuDevice);\n          } else {\n            wasm.currentContext = await wasm.jsepCreateMLContext!({ deviceType, powerPreference });\n          }\n        } else {\n          wasm.currentContext = await wasm.jsepCreateMLContext!();\n        }\n        break;\n      }\n    }\n\n    sessionHandle = await wasm._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n    if (sessionHandle === 0) {\n      checkLastError(\"Can't create a session.\");\n    }\n\n    wasm.jsepOnCreateSession?.();\n\n    // clear current MLContext after session creation\n    if (wasm.currentContext) {\n      wasm.jsepRegisterMLContext!(sessionHandle, wasm.currentContext);\n      wasm.currentContext = undefined;\n      wasm.shouldTransferToMLTensor = true;\n    }\n\n    const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n    const enableGraphCapture = !!options?.enableGraphCapture;\n\n    const inputNames = [];\n    const outputNames = [];\n    const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an input name.\");\n      }\n      inputNamesUTF8Encoded.push(name);\n      inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an output name.\");\n      }\n      outputNamesUTF8Encoded.push(name);\n      const nameString = wasm.UTF8ToString(name);\n      outputNames.push(nameString);\n\n      if (!BUILD_DEFS.DISABLE_JSEP) {\n        if (enableGraphCapture && options?.preferredOutputLocation === undefined) {\n          outputPreferredLocations.push('gpu-buffer');\n          continue;\n        }\n        const location =\n          typeof options?.preferredOutputLocation === 'string'\n            ? options.preferredOutputLocation\n            : (options?.preferredOutputLocation?.[nameString] ?? 'cpu');\n        if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer' && location !== 'ml-tensor') {\n          throw new Error(`Not supported preferred output location: ${location}.`);\n        }\n        if (enableGraphCapture && location !== 'gpu-buffer') {\n          throw new Error(\n            `Not supported preferred output location: ${location}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`,\n          );\n        }\n        outputPreferredLocations.push(location);\n      }\n    }\n\n    // use IO binding only when at least one output is preferred to be on GPU.\n    let bindingState: IOBindingState | null = null;\n    if (!BUILD_DEFS.DISABLE_JSEP && outputPreferredLocations.some((l) => l === 'gpu-buffer' || l === 'ml-tensor')) {\n      ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n      if (ioBindingHandle === 0) {\n        checkLastError(\"Can't create IO binding.\");\n      }\n\n      bindingState = {\n        handle: ioBindingHandle,\n        outputPreferredLocations,\n        outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l)),\n      };\n    }\n\n    activeSessions.set(sessionHandle, [\n      sessionHandle,\n      inputNamesUTF8Encoded,\n      outputNamesUTF8Encoded,\n      bindingState,\n      enableGraphCapture,\n      false,\n    ]);\n    return [sessionHandle, inputNames, outputNames];\n  } catch (e) {\n    inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n\n    if (ioBindingHandle !== 0) {\n      if (wasm._OrtReleaseBinding(ioBindingHandle) !== 0) {\n        checkLastError(\"Can't release IO binding.\");\n      }\n    }\n\n    if (sessionHandle !== 0) {\n      if (wasm._OrtReleaseSession(sessionHandle) !== 0) {\n        checkLastError(\"Can't release session.\");\n      }\n    }\n    throw e;\n  } finally {\n    wasm._free(modelDataOffset);\n    if (sessionOptionsHandle !== 0) {\n      if (wasm._OrtReleaseSessionOptions(sessionOptionsHandle) !== 0) {\n        checkLastError(\"Can't release session options.\");\n      }\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n\n    // unmount external data if necessary\n    wasm.unmountExternalData?.();\n  }\n};\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;\n\n  if (ioBindingState) {\n    if (enableGraphCapture) {\n      if (wasm._OrtClearBoundOutputs(ioBindingState.handle) !== 0) {\n        checkLastError(\"Can't clear bound outputs.\");\n      }\n    }\n    if (wasm._OrtReleaseBinding(ioBindingState.handle) !== 0) {\n      checkLastError(\"Can't release IO binding.\");\n    }\n  }\n\n  wasm.jsepOnReleaseSession?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  if (wasm._OrtReleaseSession(sessionHandle) !== 0) {\n    checkLastError(\"Can't release session.\");\n  }\n  activeSessions.delete(sessionId);\n};\n\nexport const prepareInputOutputTensor = (\n  tensor: TensorMetadata | null,\n  tensorHandles: number[],\n  allocs: number[],\n  sessionId: number,\n  index: number,\n  enableGraphCapture = false,\n): void => {\n  if (!tensor) {\n    tensorHandles.push(0);\n    return;\n  }\n\n  const wasm = getInstance();\n  const ptrSize = wasm.PTR_SIZE;\n\n  const dataType = tensor[0];\n  const dims = tensor[1];\n  const location = tensor[3];\n\n  let rawData: number;\n  let dataByteLength: number;\n\n  if (dataType === 'string' && (location === 'gpu-buffer' || location === 'ml-tensor')) {\n    throw new Error('String tensor is not supported on GPU.');\n  }\n\n  if (enableGraphCapture && location !== 'gpu-buffer') {\n    throw new Error(\n      `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`,\n    );\n  }\n\n  if (location === 'gpu-buffer') {\n    const gpuBuffer = tensor[2].gpuBuffer;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerBuffer = wasm.jsepRegisterBuffer;\n    if (!registerBuffer) {\n      throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n    }\n    rawData = registerBuffer(sessionId, index, gpuBuffer, dataByteLength);\n  } else if (location === 'ml-tensor') {\n    const mlTensor = tensor[2].mlTensor as MLTensor;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerMLTensor = wasm.jsepRegisterMLTensor;\n    if (!registerMLTensor) {\n      throw new Error('Tensor location \"ml-tensor\" is not supported without using WebNN.');\n    }\n    rawData = registerMLTensor(mlTensor, tensorDataTypeStringToEnum(dataType), dims);\n  } else {\n    const data = tensor[2];\n\n    if (Array.isArray(data)) {\n      // string tensor\n      dataByteLength = ptrSize * data.length;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      for (let i = 0; i < data.length; i++) {\n        if (typeof data[i] !== 'string') {\n          throw new TypeError(`tensor data at index ${i} is not a string`);\n        }\n        wasm.setValue(rawData + i * ptrSize, allocWasmString(data[i], allocs), '*');\n      }\n    } else {\n      dataByteLength = data.byteLength;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n    }\n  }\n\n  const stack = wasm.stackSave();\n  const dimsOffset = wasm.stackAlloc(4 * dims.length);\n  try {\n    dims.forEach((d, index) => wasm.setValue(dimsOffset + index * ptrSize, d, ptrSize === 4 ? 'i32' : 'i64'));\n    const tensor = wasm._OrtCreateTensor(\n      tensorDataTypeStringToEnum(dataType),\n      rawData,\n      dataByteLength,\n      dimsOffset,\n      dims.length,\n      dataLocationStringToEnum(location),\n    );\n    if (tensor === 0) {\n      checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n    }\n    tensorHandles.push(tensor);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * perform inference run\n */\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputTensors: TensorMetadata[],\n  outputIndices: number[],\n  outputTensors: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const ptrSize = wasm.PTR_SIZE;\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n  const ioBindingState = session[3];\n  const enableGraphCapture = session[4];\n  const inputOutputBound = session[5];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * ptrSize);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * ptrSize);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * ptrSize);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * ptrSize);\n\n  try {\n    // WebNN backend needs the active session to check MLTensors with the current context.\n    wasm.jsepOnRunStart?.(sessionHandle);\n\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(\n        inputTensors[i],\n        inputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n        outputTensors[i],\n        outputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputCount + outputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    for (let i = 0; i < inputCount; i++) {\n      wasm.setValue(inputValuesOffset + i * ptrSize, inputTensorHandles[i], '*');\n      wasm.setValue(inputNamesOffset + i * ptrSize, inputNamesUTF8Encoded[inputIndices[i]], '*');\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.setValue(outputValuesOffset + i * ptrSize, outputTensorHandles[i], '*');\n      wasm.setValue(outputNamesOffset + i * ptrSize, outputNamesUTF8Encoded[outputIndices[i]], '*');\n    }\n\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState && !inputOutputBound) {\n      const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(\n          `input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`,\n        );\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3]; // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode = wasm._OrtBindOutput(\n            handle,\n            outputNamesUTF8Encoded[index],\n            0,\n            outputPreferredLocationsEncoded[index],\n          );\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        true,\n      ]);\n    }\n\n    let errorCode: number;\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n        sessionHandle,\n        ioBindingState.handle,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    } else {\n      errorCode = await wasm._OrtRun(\n        sessionHandle,\n        inputNamesOffset,\n        inputValuesOffset,\n        inputCount,\n        outputNamesOffset,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = Number(wasm.getValue(outputValuesOffset + i * ptrSize, '*'));\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * ptrSize);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type | undefined,\n        dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n          tensor,\n          tensorDataOffset,\n          tensorDataOffset + ptrSize,\n          tensorDataOffset + 2 * ptrSize,\n\n          tensorDataOffset + 3 * ptrSize,\n        );\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        const valueType = ptrSize === 4 ? 'i32' : 'i64';\n        const dataType = Number(wasm.getValue(tensorDataOffset, valueType));\n        dataOffset = wasm.getValue(tensorDataOffset + ptrSize, '*');\n        const dimsOffset = wasm.getValue(tensorDataOffset + ptrSize * 2, '*');\n        const dimsLength = Number(wasm.getValue(tensorDataOffset + ptrSize * 3, valueType));\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(Number(wasm.getValue(dimsOffset + i * ptrSize, valueType)));\n        }\n        if (wasm._OrtFree(dimsOffset) !== 0) {\n          checkLastError(\"Can't free memory for tensor dims.\");\n        }\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer' || preferredLocation === 'ml-tensor') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.getValue(dataOffset + i * ptrSize, '*');\n            const nextOffset = wasm.getValue(dataOffset + (i + 1) * ptrSize, '*');\n            const maxBytesToRead = i === size - 1 ? undefined : nextOffset - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const getBuffer = wasm.jsepGetBuffer;\n            if (!getBuffer) {\n              throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n            }\n            const gpuBuffer = getBuffer(dataOffset);\n            const bufferSize = calculateTensorSizeInBytes(dataType, size);\n            if (bufferSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader!(gpuBuffer, bufferSize, type),\n                dispose: () => {\n                  if (wasm._OrtReleaseTensor(tensor) !== 0) {\n                    checkLastError(\"Can't release tensor.\");\n                  }\n                },\n              },\n              'gpu-buffer',\n            ]);\n          } else if (preferredLocation === 'ml-tensor' && size > 0) {\n            const ensureTensor = wasm.jsepEnsureTensor;\n            if (!ensureTensor) {\n              throw new Error('preferredLocation \"ml-tensor\" is not supported without using WebNN.');\n            }\n            const tensorSize = calculateTensorSizeInBytes(dataType, size);\n            if (tensorSize === undefined || !isMLTensorSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // If the graph has been partitioned, the output tensor may have not been created. For this reason, we use\n            // ensureTensor to get/create the MLTensor. In which case, we don't need to copy the data if a new tensor\n            // has been created.\n            const mlTensor = await ensureTensor(dataOffset, dataType, dims, false);\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                mlTensor,\n                download: wasm.jsepCreateMLTensorDownloader!(dataOffset, type),\n                dispose: () => {\n                  wasm.jsepReleaseTensorId!(dataOffset);\n                  wasm._OrtReleaseTensor(tensor);\n                },\n              },\n              'ml-tensor',\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(\n              wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength),\n            );\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState && !enableGraphCapture) {\n      if (wasm._OrtClearBoundOutputs(ioBindingState.handle) !== 0) {\n        checkLastError(\"Can't clear bound outputs.\");\n      }\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        false,\n      ]);\n    }\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach((p) => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach((p) => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError(\"Can't get an profile file name.\");\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env, InferenceSession } from 'onnxruntime-common';\n\nimport {\n  OrtWasmMessage,\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport { initializeWebAssembly } from './wasm-factory';\nimport { importProxyWorker, inferWasmPathPrefixFromScriptSrc } from './wasm-utils-import';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker | undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\nlet temporaryObjectUrl: string | undefined;\n\ntype PromiseCallbacks<T = void> = [resolve: (result: T) => void, reject: (reason: unknown) => void];\nlet initWasmCallbacks: PromiseCallbacks;\nconst queuedCallbacks: Map<OrtWasmMessage['type'], Array<PromiseCallbacks<unknown>>> = new Map();\n\nconst enqueueCallbacks = (type: OrtWasmMessage['type'], callbacks: PromiseCallbacks<unknown>): void => {\n  const queue = queuedCallbacks.get(type);\n  if (queue) {\n    queue.push(callbacks);\n  } else {\n    queuedCallbacks.set(type, [callbacks]);\n  }\n};\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      if (temporaryObjectUrl) {\n        URL.revokeObjectURL(temporaryObjectUrl);\n        temporaryObjectUrl = undefined;\n      }\n      break;\n    case 'init-ep':\n    case 'copy-from':\n    case 'create':\n    case 'release':\n    case 'run':\n    case 'end-profiling': {\n      const callbacks = queuedCallbacks.get(ev.data.type)!;\n      if (ev.data.err) {\n        callbacks.shift()![1](ev.data.err);\n      } else {\n        callbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    }\n    default:\n  }\n};\n\nexport const initializeWebAssemblyAndOrtRuntime = async (): Promise<void> => {\n  if (initialized) {\n    return;\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initWasm()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initWasm()' failed.\");\n  }\n\n  initializing = true;\n\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n\n      void importProxyWorker().then(([objectUrl, worker]) => {\n        try {\n          proxyWorker = worker;\n          proxyWorker.onerror = (ev: ErrorEvent) => reject(ev);\n          proxyWorker.onmessage = onProxyWorkerMessage;\n          initWasmCallbacks = [resolve, reject];\n          const message: OrtWasmMessage = { type: 'init-wasm', in: env };\n\n          // if the proxy worker is loaded from a blob URL, we need to make sure the path information is not lost.\n          //\n          // when `env.wasm.wasmPaths` is not set, we need to pass the path information to the worker.\n          //\n          if (!BUILD_DEFS.ENABLE_BUNDLE_WASM_JS && !message.in!.wasm.wasmPaths && objectUrl) {\n            // for a build not bundled the wasm JS, we need to pass the path prefix to the worker.\n            // the path prefix will be used to resolve the path to both the wasm JS and the wasm file.\n            const inferredWasmPathPrefix = inferWasmPathPrefixFromScriptSrc();\n            if (inferredWasmPathPrefix) {\n              message.in!.wasm.wasmPaths = inferredWasmPathPrefix;\n            }\n          }\n\n          if (\n            BUILD_DEFS.IS_ESM &&\n            BUILD_DEFS.ENABLE_BUNDLE_WASM_JS &&\n            !message.in!.wasm.wasmPaths &&\n            (objectUrl || BUILD_DEFS.ESM_IMPORT_META_URL?.startsWith('file:'))\n          ) {\n            // for a build bundled the wasm JS, if either of the following conditions is met:\n            // - the proxy worker is loaded from a blob URL\n            // - `import.meta.url` is a file URL, it means it is overwriten by the bundler.\n            //\n            // in either case, the path information is lost, we need to pass the path of the .wasm file to the worker.\n            // we need to use the bundler preferred URL format:\n            // new URL('filename', import.meta.url)\n            // so that the bundler can handle the file using corresponding loaders.\n            message.in!.wasm.wasmPaths = {\n              wasm: !BUILD_DEFS.DISABLE_JSEP\n                ? new URL('ort-wasm-simd-threaded.jsep.wasm', BUILD_DEFS.ESM_IMPORT_META_URL).href\n                : new URL('ort-wasm-simd-threaded.wasm', BUILD_DEFS.ESM_IMPORT_META_URL).href,\n            };\n          }\n          proxyWorker.postMessage(message);\n          temporaryObjectUrl = objectUrl;\n        } catch (e) {\n          reject(e);\n        }\n      }, reject);\n    });\n  } else {\n    try {\n      await initializeWebAssembly(env.wasm);\n      await core.initRuntime(env);\n      initialized = true;\n    } catch (e) {\n      aborted = true;\n      throw e;\n    } finally {\n      initializing = false;\n    }\n  }\n};\n\nexport const initializeOrtEp = async (epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('init-ep', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'init-ep', in: { epName, env } };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initEp(env, epName);\n  }\n};\n\nexport const copyFromExternalBuffer = async (buffer: Uint8Array): Promise<SerializableInternalBuffer> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableInternalBuffer>((resolve, reject) => {\n      enqueueCallbacks('copy-from', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'copy-from', in: { buffer } };\n      proxyWorker!.postMessage(message, [buffer.buffer]);\n    });\n  } else {\n    return core.copyFromExternalBuffer(buffer);\n  }\n};\n\nexport const createSession = async (\n  model: SerializableInternalBuffer | Uint8Array,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check unsupported options\n    if (options?.preferredOutputLocation) {\n      throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      enqueueCallbacks('create', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'create', in: { model, options: { ...options } } };\n      const transferable: Transferable[] = [];\n      if (model instanceof Uint8Array) {\n        transferable.push(model.buffer);\n      }\n      proxyWorker!.postMessage(message, transferable);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('release', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'release', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputs: TensorMetadata[],\n  outputIndices: number[],\n  outputs: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some((t) => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some((t) => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      enqueueCallbacks('run', [resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[]; // every input is on CPU.\n      const message: OrtWasmMessage = {\n        type: 'run',\n        in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options },\n      };\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('end-profiling', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'end-profiling', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  InferenceSession,\n  InferenceSessionHandler,\n  SessionHandler,\n  Tensor,\n  TRACE_FUNC_BEGIN,\n  TRACE_FUNC_END,\n} from 'onnxruntime-common';\n\nimport { SerializableInternalBuffer, TensorMetadata } from './proxy-messages';\nimport { copyFromExternalBuffer, createSession, endProfiling, releaseSession, run } from './proxy-wrapper';\nimport { isGpuBufferSupportedType, isMLTensorSupportedType } from './wasm-common';\nimport { isNode } from './wasm-utils-env';\nimport { loadFile } from './wasm-utils-load-file';\n\nexport const encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, 'gpu-buffer'];\n    case 'ml-tensor':\n      return [tensor.type, tensor.dims, { mlTensor: tensor.mlTensor }, 'ml-tensor'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nexport const decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const { gpuBuffer, download, dispose } = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });\n    }\n    case 'ml-tensor': {\n      const dataType = tensor[0];\n      if (!isMLTensorSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing MLTensor tensor`);\n      }\n      const { mlTensor, download, dispose } = tensor[2];\n      return Tensor.fromMLTensor(mlTensor, { dataType, dims: tensor[1], download, dispose });\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async fetchModelAndCopyToWasmMemory(path: string): Promise<SerializableInternalBuffer> {\n    // fetch model from url and move to wasm heap.\n    return copyFromExternalBuffer(await loadFile(path));\n  }\n\n  async loadModel(pathOrBuffer: string | Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    TRACE_FUNC_BEGIN();\n    let model: Parameters<typeof createSession>[0];\n\n    if (typeof pathOrBuffer === 'string') {\n      if (isNode) {\n        // node\n        model = await loadFile(pathOrBuffer);\n      } else {\n        // browser\n        // fetch model and copy to wasm heap.\n        model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);\n      }\n    } else {\n      model = pathOrBuffer;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n    TRACE_FUNC_END();\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor | null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs = inputArray.map((t, i) =>\n      encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`),\n    );\n    const outputs = outputArray.map((t, i) =>\n      t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null,\n    );\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    TRACE_FUNC_END();\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Backend, env, InferenceSession, InferenceSessionHandler } from 'onnxruntime-common';\n\nimport { initializeOrtEp, initializeWebAssemblyAndOrtRuntime } from './wasm/proxy-wrapper';\nimport { OnnxruntimeWebAssemblySessionHandler } from './wasm/session-handler-inference';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (env.wasm.simd === false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated property \"env.wasm.simd\" is set to false. ' +\n        'non-SIMD build is no longer provided, and this setting will be ignored.',\n    );\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.trace !== 'boolean') {\n    env.wasm.trace = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    // The following logic only applies when `ort.env.wasm.numThreads` is not set by user. We will always honor user's\n    // setting if it is provided.\n\n    // Browser: when crossOriginIsolated is false, SharedArrayBuffer is not available so WebAssembly threads will not\n    // work. In this case, we will set numThreads to 1.\n    //\n    // There is an exception: when the browser is configured to force-enable SharedArrayBuffer (e.g. Chromuim with\n    // --enable-features=SharedArrayBuffer), it is possible that `self.crossOriginIsolated` is false and\n    // SharedArrayBuffer is available at the same time. This is usually for testing. In this case,  we will still set\n    // numThreads to 1 here. If we want to enable multi-threading in test, we should set `ort.env.wasm.numThreads` to a\n    // value greater than 1.\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      env.wasm.numThreads = 1;\n    } else {\n      const numCpuLogicalCores =\n        typeof navigator === 'undefined' ? require('node:os').cpus().length : navigator.hardwareConcurrency;\n      env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n    }\n  }\n};\n\nexport class OnnxruntimeWebAssemblyBackend implements Backend {\n  /**\n   * This function initializes the WebAssembly backend.\n   *\n   * This function will be called only once for each backend name. It will be called the first time when\n   * `ort.InferenceSession.create()` is called with a registered backend name.\n   *\n   * @param backendName - the registered backend name.\n   */\n  async init(backendName: string): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyAndOrtRuntime();\n\n    // performe EP specific initialization\n    await initializeOrtEp(backendName);\n  }\n  createInferenceSessionHandler(\n    path: string,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(\n    buffer: Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(\n    pathOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow bundler to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow bundler remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport * as ort from 'onnxruntime-common';\nexport default ort;\n\nimport { registerBackend, env } from 'onnxruntime-common';\nimport { version } from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    registerBackend('webgpu', wasmBackend, 5);\n    registerBackend('webnn', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n}\n\nObject.defineProperty(env.versions, 'web', { value: version, enumerable: true });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.21.0-dev.20250206-d981b153d3';\n"]}